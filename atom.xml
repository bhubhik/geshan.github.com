<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
	<title>Geshan&#39;s Blog</title>
	<subtitle>A blog about software engineering, devops and web development</subtitle>
	
	<link href="https://geshan.com.np/atom.xml" rel="self"/>
	<link href="https://geshan.com.np/"/>
	<updated>2022-06-18T08:47:45Z</updated>
	<id>https://geshan.com.np/</id>
	<author>
		<name>Geshan Manandhar</name>
		<email>geshan@gmail.com</email>
	</author>
	
	<entry>
		<title>Using Jest beforeEach to write better unit tests in JavaScript, with code example</title>
		<link href="https://geshan.com.np/blog/2022/06/jest-beforeeach/"/>
		<updated>2022-06-18T08:47:45Z</updated>
		<id>https://geshan.com.np/blog/2022/06/jest-beforeeach/</id>
		<content type="html">&lt;p&gt;Jest is one of the most popular testing frameworks in JavaScript. In this post, we will delve into using Jest beforeEach properly to make unit testing better with JavaScript, let’s get going!&lt;/p&gt;
&lt;!-- more --&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/jest-beforeeach/01jest-beforeeach.jpg&quot; title=&quot;Jest before each with code example&quot; alt=&quot;Jest before each with code example&quot; /&gt;
&lt;h2 id=&quot;table-of-contents&quot; tabindex=&quot;-1&quot;&gt;Table of contents &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2022/06/jest-beforeeach/#table-of-contents&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2022/06/jest-beforeeach/#more-about-jest&quot;&gt;More about Jest&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2022/06/jest-beforeeach/#jest-beforeeach&quot;&gt;Jest beforeEach&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2022/06/jest-beforeeach/#prerequisites&quot;&gt;Prerequisites&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2022/06/jest-beforeeach/#example-of-jest-beforeeach&quot;&gt;Example of jest beforeEach&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2022/06/jest-beforeeach/#simple-hacker-news-api-client&quot;&gt;Simple Hacker News API client&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2022/06/jest-beforeeach/#run-the-hacker-news-api-client-example&quot;&gt;Run the Hacker News API Client example&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2022/06/jest-beforeeach/#tests-with-jest-beforeeach-for-the-hn-client&quot;&gt;Tests with jest beforeEach for the HN client&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2022/06/jest-beforeeach/#conclusion&quot;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;more-about-jest&quot; tabindex=&quot;-1&quot;&gt;More about Jest &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2022/06/jest-beforeeach/#more-about-jest&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Jest brands itself as a delightful JavaScript Testing Framework with a focus on simplicity. It works both on the backend (Node.js) and frontend libraries like React, Angular, Vue, and more. It also has mocking and code coverage out of the box. Started and maintained by Facebook, Jest is very useful for UI-based tests with &lt;a href=&quot;https://jestjs.io/docs/snapshot-testing&quot;&gt;Snapshot testing&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;jest-beforeeach&quot; tabindex=&quot;-1&quot;&gt;Jest beforeEach &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2022/06/jest-beforeeach/#jest-beforeeach&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;BeforeEach in Jest is part of the &lt;a href=&quot;https://jestjs.io/docs/setup-teardown&quot;&gt;setup and teardown&lt;/a&gt; process. As the name suggests, if we want to run a function or some other code repeatedly “before each” test that code can be put in the beforeEach function.&lt;/p&gt;
&lt;p&gt;Similarly, jest also has &lt;code&gt;afterEach&lt;/code&gt; function that will run a piece of code every time a test has completed running a.k.a tear down. If we want to run some code only once before all the tests run, Jest has &lt;code&gt;beforeAll&lt;/code&gt; function for that purpose.&lt;/p&gt;
&lt;p&gt;If you are wondering about how to scope multiple levels of beforeEach and the sequence of execution, the official &lt;a href=&quot;https://jestjs.io/docs/setup-teardown#scoping&quot;&gt;docs&lt;/a&gt; do a great job of explaining it. The example of &lt;code&gt;beforeEach&lt;/code&gt; on the official docs with loading the database doesn’t seem the cut the chase for explaining its usage well.&lt;/p&gt;
&lt;p&gt;Next up, we will look at a practical example of getting the latest stories from HackerNews and writing tests for it using jest beforeEach after getting through the prerequisites.&lt;/p&gt;
&lt;h2 id=&quot;prerequisites&quot; tabindex=&quot;-1&quot;&gt;Prerequisites &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2022/06/jest-beforeeach/#prerequisites&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;To understand the example given below better for this tutorial, it would be best to know the following things:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Having general knowledge how of Node.js and NPM work will be helpful&lt;/li&gt;
&lt;li&gt;Have basic knowledge of how Jest works in general and write simple tests with Jest&lt;/li&gt;
&lt;li&gt;Knowing how Github works will be useful to navigate through the code example on Github&lt;/li&gt;
&lt;li&gt;A general understanding of promises and async-await will be beneficial but not required&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;It&#39;s time to dabble with some code now :).&lt;/p&gt;
&lt;h2 id=&quot;example-of-jest-beforeeach&quot; tabindex=&quot;-1&quot;&gt;Example of jest beforeEach &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2022/06/jest-beforeeach/#example-of-jest-beforeeach&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;For this guide, we will use an example of getting the latest stories from the unofficial HackerNews API provided by Algolia. Below is our Hacker news client that uses &lt;a href=&quot;https://github.com/axios/axios&quot;&gt;Axios&lt;/a&gt; to get the latest story on Hackernews for any given keyword, if no keyword is provided it will fetch all the latest stories:&lt;/p&gt;
&lt;h3 id=&quot;simple-hacker-news-api-client&quot; tabindex=&quot;-1&quot;&gt;Simple Hacker News API client &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2022/06/jest-beforeeach/#simple-hacker-news-api-client&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;module&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;exports &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;HnClient&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token function&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;axios&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    axios&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;defaults&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;baseURL &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;https://hn.algolia.com/api/v1&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;axios &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; axios&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;getLatestStories&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;keyword &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; response &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;axios&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;/search_by_date?query=&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;keyword&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&amp;amp;tags=story&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; response&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;data&lt;span class=&quot;token operator&quot;&gt;?.&lt;/span&gt;hits &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;catch&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;e&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;      console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;Error while getting stories &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;e&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;message&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; e&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;    &lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The above client is written as a Class and exported to be used by any other file that requires it. It has a constructor that expects an Axios instance to be passed in. This helps with testing as the dependency can be easily mocked. In the constructor, it sets the &lt;code&gt;baseURL&lt;/code&gt; of the Axios instance and sets it in the class scope.&lt;/p&gt;
&lt;p&gt;Next up, there is a &lt;code&gt;getLatestStories&lt;/code&gt; method which is async and takes in a parameter called &lt;code&gt;keyword&lt;/code&gt;. This method makes a &lt;code&gt;get&lt;/code&gt; call to the &lt;code&gt;search_by_date&lt;/code&gt; endpoint on the unofficial hacker news API set as the base URL in the constructor. It also passes the query and tags parameters for the API endpoint as stated in their &lt;a href=&quot;https://hn.algolia.com/api&quot;&gt;docs&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If the &lt;code&gt;response.data&lt;/code&gt; is received and it has the &lt;code&gt;hits&lt;/code&gt; property that will be returned which is an array of stores else and empty array &lt;code&gt;[]&lt;/code&gt; is returned to the caller.&lt;/p&gt;
&lt;p&gt;Furthermore, to make the method resilient to any failure calling the Algolia HackerNews (HN) API if any error occurs, it will land in the catch block and log the error then return an empty array. In the next section, we will see how to execute the above class to see sample output.&lt;/p&gt;
&lt;h3 id=&quot;run-the-hacker-news-api-client-example&quot; tabindex=&quot;-1&quot;&gt;Run the Hacker News API Client example &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2022/06/jest-beforeeach/#run-the-hacker-news-api-client-example&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The above code an be quickly seen in action by executing the following:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; HnClient &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;./src/hnClient&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; axios &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;axios&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; keyword &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; process&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;argv&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; hnClient &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;HnClient&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;axios&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;keyword: &lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; keyword&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; stories &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; hnClient&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getLatestStories&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;keyword&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;table&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;stories&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;story&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; title&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; author &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; story&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;title&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; author&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;  &lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It can be run with &lt;code&gt;node index.js javascript&lt;/code&gt; given the file is named as such and the &lt;code&gt;HnClient&lt;/code&gt; class is saved in the &lt;code&gt;src&lt;/code&gt; folder. The index.js uses an IIFE to call instantiate the &lt;code&gt;HnClient&lt;/code&gt; class with an Axios instance and logs the title and author of the story as a table in the console which looks like the below:&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/jest-beforeeach/02jest-beforeeach-run.jpg&quot; title=&quot;Example output for Jest BeforeEach test run&quot; alt=&quot;Jest before each with code example&quot; /&gt;
&lt;p&gt;As seen the &lt;code&gt;javascript&lt;/code&gt; parameter passed in the command line is passed till the API call and the latest 20 stories are pulled in from the API and logged on the console as a table with the story title and author.&lt;/p&gt;
&lt;h3 id=&quot;tests-with-jest-beforeeach-for-the-hn-client&quot; tabindex=&quot;-1&quot;&gt;Tests with jest beforeEach for the HN client &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2022/06/jest-beforeeach/#tests-with-jest-beforeeach-for-the-hn-client&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Let’s write some tests for the &lt;code&gt;HnClient&lt;/code&gt; class we have written with the use of jest beforeEach which will make testing the class easier. There are &lt;a href=&quot;https://geshan.com.np/blog/2016/03/there-are-only-two-types-of-automated-software-tests/&quot;&gt;two types of tests&lt;/a&gt; fast ones (unit) and not fast ones (integration), we will write unit tests for this guide.&lt;/p&gt;
&lt;p&gt;Below is the bare-bones unit test case for the happy path where we expect to get the latest stories for a given keyword:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; HnClient &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;../src/hnClient&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; log &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; jest&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;spyOn&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;console&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;log&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;mockImplementation&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token function&quot;&gt;describe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;HnClient&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; axiosMock &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token literal-property property&quot;&gt;defaults&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token literal-property property&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; jest&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; hnClient&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;  &lt;span class=&quot;token function&quot;&gt;beforeEach&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    hnClient &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;HnClient&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;axiosMock&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;  &lt;span class=&quot;token function&quot;&gt;describe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;getLatestStories&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token function&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;should return an array of stories for given keyword&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; returnedStories &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;          &lt;span class=&quot;token literal-property property&quot;&gt;created_at&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;2022-06-17T13:47:57.000Z&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;          &lt;span class=&quot;token literal-property property&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Qwik and Partytown: How to remove 99% of JavaScript from main thread&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;          &lt;span class=&quot;token literal-property property&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;https://www.youtube.com/watch?v=0dC11DMR3fU&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;          &lt;span class=&quot;token literal-property property&quot;&gt;author&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;barisx&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;         &lt;br /&gt;        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;          &lt;span class=&quot;token literal-property property&quot;&gt;created_at&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;2022-06-17T09:59:00.000Z&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;          &lt;span class=&quot;token literal-property property&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Prepack – A tool for making JavaScript code run faster&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;          &lt;span class=&quot;token literal-property property&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;https://prepack.io/&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;          &lt;span class=&quot;token literal-property property&quot;&gt;author&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;longrod&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;         &lt;br /&gt;        &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;      &lt;br /&gt;      &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;      axiosMock&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;get &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; jest&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;mockResolvedValueOnce&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;hits&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; returnedStories &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;      &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; stories &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; hnClient&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getLatestStories&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;javascript&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;      &lt;span class=&quot;token function&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;axiosMock&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;defaults&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;baseURL&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toBe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;https://hn.algolia.com/api/v1&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token function&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;axiosMock&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;get&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toHaveBeenCalledWith&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;/search_by_date?query=javascript&amp;amp;tags=story&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token function&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;stories&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toBeInstanceOf&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Array&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token function&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;stories&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toBe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token function&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;stories&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toHaveProperty&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;title&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token function&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;stories&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;title&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toBe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Qwik and Partytown: How to remove 99% of JavaScript from main thread&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token function&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;stories&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toHaveProperty&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;url&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token function&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;stories&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;url&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toBe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;https://prepack.io/&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We have written only one test for the &lt;code&gt;getLatestStories&lt;/code&gt; method the happy path of getting data back from the HN Algolia API. We have instantiated the system under test (SUT) here as &lt;code&gt;hnClient&lt;/code&gt; and used it later in the test. Doing it in the before each doesn’t really help us till now.&lt;br /&gt;
Some assertions like &lt;code&gt;toBe&lt;/code&gt; are pretty similar to &lt;a href=&quot;https://geshan.com.np/blog/2021/01/phpunit-assertions/#some-phpunit-assertions-you-must-start-using-today&quot;&gt;PHPUnit assertions&lt;/a&gt; if you are familiar with them.&lt;/p&gt;
&lt;p&gt;Lets add another test to see the milage we get from jest beforeEach:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token function&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;should return an empty array if no stories are found&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  axiosMock&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;get &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; jest&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;mockResolvedValueOnce&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; stories &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; hnClient&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getLatestStories&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;  &lt;span class=&quot;token function&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;stories&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toBeInstanceOf&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Array&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token function&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;stories&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toBe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In this test, we are testing the case of, if no data is returned from the API it should still return an empty array. Now as we can see, we are reusing the &lt;code&gt;hnClient&lt;/code&gt; defined in the &lt;code&gt;beforeEach&lt;/code&gt; if it was not instantiated in the before each then we would need to do it here for this test case again.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Image if &lt;code&gt;hnClient&lt;/code&gt; has 5 dependencies instead of 1, that would be a fair amount of setup and no. of lines to code to repeat in each test.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This is where &lt;code&gt;beforeEach&lt;/code&gt; shines if there is a need to execute some set lines of code before each test execution it can be put in the beforeEach section and done.&lt;/p&gt;
&lt;p&gt;We can add another test case to test the scenario when the API throws and error and the execution lands in the catch part of the code as follows:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token function&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;should handle any error and return empty stories array&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  axiosMock&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;get &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; jest&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;mockRejectedValueOnce&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Error&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;server down&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; stories &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; hnClient&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getLatestStories&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;python&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token function&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;log&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toHaveBeenCalledWith&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;expect&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;stringContaining&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;server down&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; expect&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;anything&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token function&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;stories&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toBeInstanceOf&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Array&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token function&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;stories&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toBe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Even here we are conveniently using the &lt;code&gt;hnClient&lt;/code&gt; instantiated properly in the beforeEach which has the needed dependency of the Axios instance. We are adjusting the axiosMock’s &lt;code&gt;get&lt;/code&gt; method to throw an error as a promise rejection and that does the job. This is the power and ease of using beforeEach properly that makes writing tests much better and easier.&lt;/p&gt;
&lt;p&gt;With the above 3 tests, we will have 100% code coverage that can be seen by running:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;npm run test:cov
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The above common is mapped to &lt;code&gt;jest –coverage&lt;/code&gt; and as jest has a built-in code coverage it gives the following output:&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/jest-beforeeach/03jest-beforeeach-code-cov.jpg&quot; title=&quot;Example output for Jest BeforeEach test code coverage&quot; alt=&quot;Jest before each code coverage&quot; /&gt;
&lt;p&gt;You can find the full code of this project in this &lt;a href=&quot;https://geshan.com.np/blog/2022/06/jest-beforeeach/%E2%80%8B%E2%80%8Bhttps://github.com/geshan/simple-hn-client&quot;&gt;GitHub repository&lt;/a&gt; and the most important parts of the example in this &lt;a href=&quot;https://geshan.com.np/blog/2022/06/jest-beforeeach/%E2%80%8B%E2%80%8Bhttps://github.com/geshan/simple-hn-client/pull/2/files&quot;&gt;pull request&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;conclusion&quot; tabindex=&quot;-1&quot;&gt;Conclusion &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2022/06/jest-beforeeach/#conclusion&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;We have learned how to use jest BeforeEach in this tutorial to make the JavaScipt tests better and easier to write with optimal code reuses in tests.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I hope this helps you write even better tests with JavaSciprt be it for Node.js (Backend) or other frontend frameworks/libraries like React, Vue, or any other.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Keep writing headache-saving tests :).&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>How to use TypeScript optional parameters with example code</title>
		<link href="https://geshan.com.np/blog/2022/06/typescript-optional-parameters/"/>
		<updated>2022-06-12T06:37:45Z</updated>
		<id>https://geshan.com.np/blog/2022/06/typescript-optional-parameters/</id>
		<content type="html">&lt;p&gt;TypeScript is a superset of JavaScript that has climbed up in &lt;a href=&quot;https://trends.google.com/trends/explore?date=today%205-y&amp;amp;q=%2Fm%2F0n50hxv&quot;&gt;popularity&lt;/a&gt; in the past few years. In this post, we will learn how to use optional parameters in TypeScript functions, let’s get started!&lt;/p&gt;
&lt;!-- more --&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/typescript-optional-parameters/01typescript-optional-parameters.jpg&quot; title=&quot;TypeScript optional parameters with example code&quot; alt=&quot;TypeScript optional parameters with example code&quot; /&gt;
&lt;h2 id=&quot;table-of-contents&quot; tabindex=&quot;-1&quot;&gt;Table of contents &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2022/06/typescript-optional-parameters/#table-of-contents&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2022/06/typescript-optional-parameters/#example-of-printing-full-name&quot;&gt;Example of printing full name&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2022/06/typescript-optional-parameters/#optional-parameters-in-javascirpt&quot;&gt;Optional parameters in JavaScirpt&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2022/06/typescript-optional-parameters/#optional-parameters-with-typescript&quot;&gt;Optional parameters with TypeScript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2022/06/typescript-optional-parameters/#default-params-in-typescript&quot;&gt;Default params in Typescript&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2022/06/typescript-optional-parameters/#conclusion&quot;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;example-of-printing-full-name&quot; tabindex=&quot;-1&quot;&gt;Example of printing full name &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2022/06/typescript-optional-parameters/#example-of-printing-full-name&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;For this tutorial we will use a simple yet useful example of getting the full name, the rules are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;If the middle name is provided full name has the middle name included&lt;/li&gt;
&lt;li&gt;In case the name has only first and last name the full name will not have the middle name included.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;It can be coded as below in both JavaScript and TypeScirpt as we will see in the next section as well as how optional parameters make it easy to get the desired output minimizing errors in TypeScript.&lt;/p&gt;
&lt;h2 id=&quot;optional-parameters-in-javascirpt&quot; tabindex=&quot;-1&quot;&gt;Optional parameters in JavaScirpt &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2022/06/typescript-optional-parameters/#optional-parameters-in-javascirpt&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;By default, all the parameters in JavaScript are optional. Let’s look at this with above mentioned example of getting the fullname with first name, middle name and last name below:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;getFullName&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;firstName&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; lastName&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; middleName&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; fullName &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; middleName &lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;firstName&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt; &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;middleName&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt; &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;lastName&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;firstName&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt; &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;lastName&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; fullName&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getFullName&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getFullName&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;John&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getFullName&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;John&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Doe&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getFullName&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;John&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Doe&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;MiddleName&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The above code will give the output as follows:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;undefined undefined&lt;br /&gt;John undefined&lt;br /&gt;John Doe&lt;br /&gt;John MiddleName Doe&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So in ES6 Javascript, there isn’t a way to make a function parameter required, this is how JavaScript works as it is a bit too flexible. That is a reason why we can use TypeScript to add types as well as make the function parameters required, let’s look at the same example with TypeScript. We can use &lt;a href=&quot;https://geshan.com.np/blog/2021/02/nodemon/&quot;&gt;nodemon&lt;/a&gt; to compile and execute the script on save. We can also use &lt;a href=&quot;https://geshan.com.np/blog/2020/11/nodejs-with-docker/&quot;&gt;docker with Node.js&lt;/a&gt; to deploy the compiled code easily.&lt;/p&gt;
&lt;h2 id=&quot;optional-parameters-with-typescript&quot; tabindex=&quot;-1&quot;&gt;Optional parameters with TypeScript &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2022/06/typescript-optional-parameters/#optional-parameters-with-typescript&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;For the same example we wil now use TypeScript and write the &lt;code&gt;getFullName&lt;/code&gt; function as below in the &lt;code&gt;optional-params.ts&lt;/code&gt; file, notice the file is &lt;code&gt;.ts&lt;/code&gt; for typescript:&lt;/p&gt;
&lt;pre class=&quot;language-ts&quot;&gt;&lt;code class=&quot;language-ts&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;getFullName&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;firstName&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; lastName&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; middleName&lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; fullName &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; middleName &lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;firstName&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt; &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;middleName&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt; &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;lastName&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;firstName&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt; &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;lastName&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; fullName&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;//console.log(getFullName(&#39;John&#39;)); // compile error - An argument for &#39;lastName&#39; was not provided.&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token builtin&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getFullName&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;John&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Doe&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token builtin&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getFullName&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;John&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Doe&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;MiddleName&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;The &lt;code&gt;?&lt;/code&gt; after the middle name indicates the TS compiler it is an optional parameter.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;We will also need to create a &lt;code&gt;tsconfig.json&lt;/code&gt; file with the following contents:&lt;/p&gt;
&lt;pre class=&quot;language-json&quot;&gt;&lt;code class=&quot;language-json&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token property&quot;&gt;&quot;compilerOptions&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token property&quot;&gt;&quot;target&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;es5&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token property&quot;&gt;&quot;module&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;commonjs&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token property&quot;&gt;&quot;sourceMap&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We will use &lt;code&gt;tsc&lt;/code&gt; and &lt;code&gt;node&lt;/code&gt; to run the above TypeScript file after compiling it to JavaScript with the following command:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;tsc optional-params.ts &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;node&lt;/span&gt; optional-params.js&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Given we have Node installed, we can get the TypeScript compiler with &lt;code&gt;npm install -g typescript&lt;/code&gt;. The above command will first compile the TypeScript file called &lt;code&gt;optional-params.ts&lt;/code&gt; to Javascript and the second command will execute the Javascript as a Node.js script. It will give us the following output:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;John Doe&lt;br /&gt;John MiddleName Doe&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let us quickly go through what the above script does:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The &lt;code&gt;getFullName&lt;/code&gt; function takes 3 parameters, &lt;code&gt;firstName&lt;/code&gt;, &lt;code&gt;lastName&lt;/code&gt; and &lt;code&gt;middleName&lt;/code&gt; where only &lt;code&gt;middleName&lt;/code&gt; is optional.&lt;/li&gt;
&lt;li&gt;If there is &lt;code&gt;middleName&lt;/code&gt; is passed the function will print the full name with the middle name else it will only be first name and last name.&lt;/li&gt;
&lt;li&gt;Line 6 if uncommented will stop the compilation process with the error &lt;code&gt;An argument for &#39;lastName&#39; was not provided.&lt;/code&gt; as the last name is a required parameter by default.&lt;/li&gt;
&lt;li&gt;Line 7 and 8 will work where the first valid call will log &lt;code&gt;John Doe&lt;/code&gt; without a middle name and the second call will log &lt;code&gt;John MiddleName Doe&lt;/code&gt; with the optional parameter of the middle name passed.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;You can try the above code in the &lt;a href=&quot;https://www.typescriptlang.org/play&quot;&gt;TypeScript playground&lt;/a&gt; and fiddle around with it or use &lt;a href=&quot;https://www.typescriptlang.org/play?#code/GYVwdgxgLglg9mABAcwKZQGIgDbYHICGAtqgBTAwBOAzlISQFyK2UxjIA0i2Bt9qTFm06IiMACbjsqfgH5BUVuwCUiAN4AoRIggJaiULn6IAvKIlSZxVIlmIABgBI1FGnWsBfRM7GTp-L2cePk97RCYnFyoQkkC1YPdY+wBuRC1ESnQQSiRDfGtkjQ8NDQB6Ut0wajhpADpsOGRSNEwcfJJSAHIAKTgACzBO5WVU8p04IgAHGGlEVEpKOEpEAFpEAEEkAkpkEBIwKAMlxE6E-k7EAHdeRDA4Q8nFgDcJVHFajUrquoamlqwjNYur0Bp0uJ0ACJwVBDEafPQ1VD1RrNdAA9pkHr9QbgqEw8EAWQs-mssMKQA&quot;&gt;this&lt;/a&gt; one.&lt;/p&gt;
&lt;h2 id=&quot;default-params-in-typescript&quot; tabindex=&quot;-1&quot;&gt;Default params in Typescript &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2022/06/typescript-optional-parameters/#default-params-in-typescript&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The above typescript code can be simplified with use of default params, for instance if the &lt;code&gt;middleName&lt;/code&gt; can be set to  &#39;&#39;- empty string  if not provided the above code can be written as:&lt;/p&gt;
&lt;pre class=&quot;language-ts&quot;&gt;&lt;code class=&quot;language-ts&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;getFullName&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;firstName&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; lastName&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;string&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; middleName&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; fullName &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;firstName&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt; &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;middleName&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt; &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;lastName&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; fullName&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;//console.log(getFullName(&#39;John&#39;)); // compile error - An argument for &#39;lastName&#39; was not provided.&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token builtin&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getFullName&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;John&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Doe&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token builtin&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getFullName&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;John&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Doe&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;MiddleName&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The above function looks pretty similar the main difference is, that the &lt;code&gt;middleName&lt;/code&gt; is set as a default value of an empty string if not provided. This has a similar output as seen below:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;John  Doe&lt;br /&gt;John MiddleName Doe&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;There is a couple of extra spaces when only the first name and last name are printed but that is a tradeoff we can take for the simplified code. All the code is available as part of this &lt;a href=&quot;https://github.com/geshan/ts-optional-params/pull/1&quot;&gt;pull request&lt;/a&gt; for your reference.&lt;/p&gt;
&lt;h2 id=&quot;conclusion&quot; tabindex=&quot;-1&quot;&gt;Conclusion &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2022/06/typescript-optional-parameters/#conclusion&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In this useful guide, we saw how to use optional parameters in the TypeScript function with a simple yet practical example.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I hope it has helped you unravel how optional and default parameters work in TypeScript.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Keep learning!&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>10 useful Docker commands to get things done with a real-life example</title>
		<link href="https://geshan.com.np/blog/2022/05/docker-commands/"/>
		<updated>2022-05-14T11:37:45Z</updated>
		<id>https://geshan.com.np/blog/2022/05/docker-commands/</id>
		<content type="html">&lt;p&gt;Docker packages software applications into containers making them easy to build, test, and ship (deploy). In this post we will look into some useful docker commands you should know about with real-life examples. Let’s get rolling!&lt;/p&gt;
&lt;!-- more --&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/docker-commands/01docker-commands.jpg&quot; title=&quot;10 useful docker commands&quot; alt=&quot;10 useful docker commands&quot; /&gt;
&lt;h2 id=&quot;table-of-contents&quot; tabindex=&quot;-1&quot;&gt;Table of contents &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2022/05/docker-commands/#table-of-contents&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2022/05/docker-commands/#prerequisites&quot;&gt;Prerequisites&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2022/05/docker-commands/#example&quot;&gt;Example&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2022/05/docker-commands/#docker-commands&quot;&gt;Docker Commands&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2022/05/docker-commands/#docker-search&quot;&gt;Docker search&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2022/05/docker-commands/#docker-pull&quot;&gt;Docker pull&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2022/05/docker-commands/#docker-images&quot;&gt;Docker images&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2022/05/docker-commands/#docker-run&quot;&gt;Docker run&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2022/05/docker-commands/#docker-ps&quot;&gt;Docker ps&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2022/05/docker-commands/#docker-exec&quot;&gt;Docker exec&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2022/05/docker-commands/#docker-logs&quot;&gt;Docker logs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2022/05/docker-commands/#docker-stop&quot;&gt;Docker stop&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2022/05/docker-commands/#docker-kill&quot;&gt;Docker kill&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2022/05/docker-commands/#difference-between-docker-stop-and-kill&quot;&gt;Difference between docker stop and kill&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2022/05/docker-commands/#docker-cp&quot;&gt;Docker cp&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2022/05/docker-commands/#copy-file-from-host-to-the-container&quot;&gt;Copy file from host to the container&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2022/05/docker-commands/#copy-file-from-container-to-host&quot;&gt;Copy file from container to host&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2022/05/docker-commands/#other-useful-docker-commands&quot;&gt;Other useful docker commands&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2022/05/docker-commands/#conclusion&quot;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- tocstop --&gt;
&lt;h2 id=&quot;prerequisites&quot; tabindex=&quot;-1&quot;&gt;Prerequisites &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2022/05/docker-commands/#prerequisites&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Some prerequisites to following this tutorial are listed below:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Have docker installed on your machine&lt;/li&gt;
&lt;li&gt;Generally aware of &lt;a href=&quot;https://www.ibm.com/au-en/cloud/learn/docker&quot;&gt;what is docker and why to use it&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Know about &lt;a href=&quot;https://hub.docker.com/search?q=&quot;&gt;DockerHub&lt;/a&gt;, think of it as GitHub for container images&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;In the consequent section, we will brief about the example we are going to use to know the handy docker commands.&lt;/p&gt;
&lt;h2 id=&quot;example&quot; tabindex=&quot;-1&quot;&gt;Example &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2022/05/docker-commands/#example&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Before diving deeper into the examples, it would be best to know that Docker is beneficial when used in the &lt;a href=&quot;https://geshan.com.np/blog/2018/10/why-use-docker-3-reasons-from-a-development-perspective/&quot;&gt;local development environment&lt;/a&gt;. It would be safe to say that docker has changed how software engineers work in the &lt;a href=&quot;https://geshan.com.np/blog/2018/11/4-ways-docker-changed-the-way-software-engineers-work-in-past-half-decade/&quot;&gt;past decade years&lt;/a&gt; after releasing in 2013.&lt;/p&gt;
&lt;p&gt;All the commands run for the example used have been run on a Mac (M1 pro chip) with Docker version 20.10.13, build a224086. We will run the MySQL server locally as an example to know and understand the useful docker commands. In the next section, we will start with the commands and get our hands dirty.&lt;/p&gt;
&lt;h2 id=&quot;docker-commands&quot; tabindex=&quot;-1&quot;&gt;Docker Commands &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2022/05/docker-commands/#docker-commands&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;For this exercise, we will look into 12+ docker commands that you should be aware of. The goal is to run the MySQL server locally using docker. That leads us to the first docker command, docker search.&lt;/p&gt;
&lt;h3 id=&quot;docker-search&quot; tabindex=&quot;-1&quot;&gt;Docker search &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2022/05/docker-commands/#docker-search&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;As its help with &lt;code&gt;docker search –help&lt;/code&gt; says, it helps search Docker hub for images. As our aim is to run MySQL locally let’s run the following command to see what MySQL related images are available on DockerHub:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;docker&lt;/span&gt; search mysql&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This gives an output similar to the below:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;NAME                           DESCRIPTION                                     STARS     OFFICIAL   AUTOMATED&lt;br /&gt;mysql                          MySQL is a widely used, open-source relation…   &lt;span class=&quot;token number&quot;&gt;12559&lt;/span&gt;     &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;OK&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;       &lt;br /&gt;mariadb                        MariaDB Server is a high performing &lt;span class=&quot;token function&quot;&gt;open&lt;/span&gt; sou…   &lt;span class=&quot;token number&quot;&gt;4829&lt;/span&gt;      &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;OK&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;       &lt;br /&gt;percona                        Percona Server is a fork of the MySQL relati…   &lt;span class=&quot;token number&quot;&gt;576&lt;/span&gt;       &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;OK&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;       &lt;br /&gt;phpmyadmin                     phpMyAdmin - A web interface &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; MySQL and M…   &lt;span class=&quot;token number&quot;&gt;535&lt;/span&gt;       &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;OK&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;       &lt;br /&gt;bitnami/mysql                  Bitnami MySQL Docker Image                      &lt;span class=&quot;token number&quot;&gt;71&lt;/span&gt;                   &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;OK&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;br /&gt;linuxserver/mysql-workbench                                                    &lt;span class=&quot;token number&quot;&gt;36&lt;/span&gt;                   &lt;br /&gt;linuxserver/mysql              A Mysql container, brought to you by LinuxSe…   &lt;span class=&quot;token number&quot;&gt;35&lt;/span&gt;                   &lt;br /&gt;ubuntu/mysql                   MySQL &lt;span class=&quot;token function&quot;&gt;open&lt;/span&gt; &lt;span class=&quot;token builtin class-name&quot;&gt;source&lt;/span&gt; fast, stable, multi-thread…   &lt;span class=&quot;token number&quot;&gt;33&lt;/span&gt;                   &lt;br /&gt;circleci/mysql                 MySQL is a widely used, open-source relation…   &lt;span class=&quot;token number&quot;&gt;25&lt;/span&gt;                   &lt;br /&gt;google/mysql                   MySQL server &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; Google Compute Engine          &lt;span class=&quot;token number&quot;&gt;21&lt;/span&gt;                   &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;OK&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;br /&gt;vmware/harbor-db               Mysql container &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; Harbor                      &lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt;                   &lt;br /&gt;bitnami/mysqld-exporter                                                        &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;                    &lt;br /&gt;ibmcom/mysql-s390x             Docker image &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; mysql-s390x                    &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;                    &lt;br /&gt;newrelic/mysql-plugin          New Relic Plugin &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; monitoring MySQL databa…   &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;                    &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;OK&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;br /&gt;nasqueron/mysql                                                                &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;                    &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;OK&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;br /&gt;vitess/mysqlctld               vitess/mysqlctld                                &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;                    &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;OK&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;br /&gt;mirantis/mysql                                                                 &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;br /&gt;…                    &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It is not super useful as it is listing all the MySQL images, to make our search more useful and target we will use the filter and limit parameters as follows:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;docker&lt;/span&gt; search --filter&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;is-official&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;true --limit&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt; mysql&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here, we are asking docker to give us only the &lt;a href=&quot;https://docs.docker.com/docker-hub/official_images/&quot;&gt;official images&lt;/a&gt; and limit it to 5 for mysql. It will yield something like:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;NAME         DESCRIPTION                                     STARS     OFFICIAL   AUTOMATED&lt;br /&gt;mysql        MySQL is a widely used, open-source relation…   &lt;span class=&quot;token number&quot;&gt;12559&lt;/span&gt;     &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;OK&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;       &lt;br /&gt;mariadb      MariaDB Server is a high performing &lt;span class=&quot;token function&quot;&gt;open&lt;/span&gt; sou…   &lt;span class=&quot;token number&quot;&gt;4829&lt;/span&gt;      &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;OK&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;       &lt;br /&gt;percona      Percona Server is a fork of the MySQL relati…   &lt;span class=&quot;token number&quot;&gt;576&lt;/span&gt;       &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;OK&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;       &lt;br /&gt;phpmyadmin   phpMyAdmin - A web interface &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; MySQL and M…   &lt;span class=&quot;token number&quot;&gt;535&lt;/span&gt;       &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;OK&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;       &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Looks like the official MySQL image with 12.5K stars should suffice our need. What we did is more like googling for “docker mysql” in some sense. Anyways as for the next task, let’s pull it and go toward running run it.&lt;/p&gt;
&lt;h3 id=&quot;docker-pull&quot; tabindex=&quot;-1&quot;&gt;Docker pull &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2022/05/docker-commands/#docker-pull&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;We could directly run the image with the &lt;code&gt;docker run&lt;/code&gt; command but in this tutorial, we are learning the docker commands so let’s understand what &lt;code&gt;docker pull&lt;/code&gt; can do for us. Docker pull command will pull an image or a repository from a registry.&lt;/p&gt;
&lt;p&gt;A registry is a place that stores built docker images, DockerHub being the main one but as per the need you/your company can set up a private docker image registry too. AWS also has a &lt;a href=&quot;https://gallery.ecr.aws/&quot;&gt;public container registry&lt;/a&gt; we can use.&lt;/p&gt;
&lt;p&gt;To pull a docker image it would be best to know the specific version to pull, in our case we can visit the MySQL’s DockerHub &lt;a href=&quot;https://hub.docker.com/_/mysql?tab=tags&quot;&gt;tags&lt;/a&gt; page. For this example, I will pull MySQL 8.0-oracle:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;docker&lt;/span&gt; pull mysql:8.0-oracle&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It will show an output like the below:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;8.0-oracle: Pulling from library/mysql
2d35f3f87cf6: Pull complete 
e08c104e7e4b: Pull complete 
9a34eb48fc75: Pull complete 
5bb6dedbc752: Pull complete 
19a4f2fda7b8: Pull complete 
dff080c7a5fa: Pull complete 
5c984e7fd2f6: Pull complete 
57b567fb3d57: Pull complete 
bbbd9d96c94e: Pull complete 
71907ccd70c5: Pull complete 
Digest: sha256:fc7cc18cbd47405471f57a6cf3ae44883fc3aecff8248c5318f18e1bbbf4c7d3
Status: Downloaded newer image for mysql:8.0-oracle
docker.io/library/mysql:8.0-oracle
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If there is a push there is a &lt;a href=&quot;https://docs.docker.com/engine/reference/commandline/push/&quot;&gt;docker push&lt;/a&gt; command too but we will not learn about that in this post. Let’s see if it is pulled correctly with &lt;code&gt;docker images&lt;/code&gt; next.&lt;/p&gt;
&lt;h3 id=&quot;docker-images&quot; tabindex=&quot;-1&quot;&gt;Docker images &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2022/05/docker-commands/#docker-images&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The docker command &lt;code&gt;docker images&lt;/code&gt; lists images on the local system. It will list the images pulled in from repositories or built locally. As we have pulled in the &lt;code&gt;mysql8.0-oracle&lt;/code&gt; image we can see it listed with:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;docker&lt;/span&gt; images&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It will give us the following output:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;REPOSITORY     TAG            IMAGE ID       CREATED         SIZE&lt;br /&gt;mysql          &lt;span class=&quot;token number&quot;&gt;8.0&lt;/span&gt;-oracle     a1eb4ca73814   &lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt; days ago     505MB&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Depending on other images pulled or built locally you may see more images on your system.&lt;br /&gt;
One useful command to remove intermediate images or images that were not successfully built or pulled is below:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;docker&lt;/span&gt; rmi -f &lt;span class=&quot;token variable&quot;&gt;&lt;span class=&quot;token variable&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;docker&lt;/span&gt; images -f &lt;span class=&quot;token string&quot;&gt;&quot;dangling=true&quot;&lt;/span&gt; -q&lt;span class=&quot;token variable&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This uses the &lt;code&gt;docker rmi&lt;/code&gt; command used to remove images with docker images that are dangling, meaning they were not pulled or built successfully. The above command is similar to &lt;code&gt;docker image prune -a&lt;/code&gt;. You can read more aout docker image prune on it&#39;s official &lt;a href=&quot;https://docs.docker.com/engine/reference/commandline/image_prune/&quot;&gt;docs&lt;/a&gt;. It is simpler and platform agnostic.&lt;/p&gt;
&lt;p&gt;Now, as we know the image is pulled and available locally we can run the MySQL image in the subsequent section.&lt;/p&gt;
&lt;h3 id=&quot;docker-run&quot; tabindex=&quot;-1&quot;&gt;Docker run &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2022/05/docker-commands/#docker-run&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;docker run&lt;/code&gt; command is used to run an image as a new container. To say that it has some parameters will be an understatement as we can see lots of parameters with &lt;code&gt;docker run –help&lt;/code&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Docker run is one of the most important docker commands to learn. It has multiple arguments to do many things. It would be wise to understand the difference of image and container first.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;If you are confused about Image and container, please read this post about &lt;a href=&quot;https://dockerlabs.collabnix.com/beginners/components/container-vs-image.html&quot;&gt;Image vs container&lt;/a&gt;. In summary, an image is a snapshot of a container and when an image runs (becomes a running instance) it is a container. Containers can be directly run with just a &lt;code&gt;docker run&lt;/code&gt; command without a docker pull. With the run command, Docker will pull the image and run it.&lt;/p&gt;
&lt;p&gt;For this guide, we will use some of the main ones that are useful to run MySQL in our case, before running the command below please execute &lt;code&gt;mkdir /tmp/mysql-data&lt;/code&gt;, then run:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;docker&lt;/span&gt; run --name mysql8 --rm -v /tmp/mysql-data:/var/lib/mysql -e &lt;span class=&quot;token assign-left variable&quot;&gt;MYSQL_ROOT_PASSWORD&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;KTQJbtWYtM1u1UUj -e &lt;span class=&quot;token assign-left variable&quot;&gt;MYSQL_DATABASE&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;testing -p &lt;span class=&quot;token number&quot;&gt;3306&lt;/span&gt;:3306 -it mysql:8.0-oracle&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So, what are the parameters we used for the &lt;code&gt;docker run&lt;/code&gt; command, let’s elaborate on the parameters:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;--name&lt;/code&gt; is passed to name the container as &lt;code&gt;mysql8&lt;/code&gt;, if not passed docker will use a random name&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--rm&lt;/code&gt; is used to remove the container when it is stopped&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-v /tmp/mysql-data:/var/lib/mysql&lt;/code&gt; is added as volume to retain the data when the container restarts, it will vanish when the host &lt;a href=&quot;https://www.fosslinux.com/41739/linux-tmp-directory-everything-you-need-to-know.htm&quot;&gt;machine restarts&lt;/a&gt; as it is in &lt;code&gt;/tmp&lt;/code&gt;. Volumes can be &lt;a href=&quot;https://docs.docker.com/engine/reference/commandline/volume_create/&quot;&gt;managed&lt;/a&gt; implicitly by Docker too.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-e MYSQL_ROOT_PASSWORD=KTQJbtWYtM1u1UUj -e MYSQL_DATABASE=testing&lt;/code&gt; as utilized to set the root user’s password and initializing a database named &lt;code&gt;testing&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-p 3306:3306&lt;/code&gt; maps host port 3306 to container port 3306, the port 3306 is MySQL’s default port. You can map to a different host port too like &lt;code&gt;3307:3306&lt;/code&gt; will map local post 3307 to container port 3306&lt;/li&gt;
&lt;li&gt;&lt;code&gt; -it mysql:8.0-oracle&lt;/code&gt; - -it will show all logs as the tty is allocated and we are using the official MySQL image version 8.0 which will run the Oracle flavor.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If we wanted to push the output to the background we can use the &lt;code&gt;-d&lt;/code&gt; flag to keep the output detached and not show in the foreground. For more options please skim through the official &lt;a href=&quot;https://docs.docker.com/engine/reference/run/#docker-run-reference&quot;&gt;docker run docs&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Let’s understand what the above command does then we will also see what it outputs.&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token number&quot;&gt;2022&lt;/span&gt;-05-14 06:13:34+00:00 &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;Note&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;Entrypoint&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;: Entrypoint script &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; MySQL Server &lt;span class=&quot;token number&quot;&gt;8.0&lt;/span&gt;.29-1.el8 started.&lt;br /&gt;&lt;span class=&quot;token number&quot;&gt;2022&lt;/span&gt;-05-14 06:13:34+00:00 &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;Note&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;Entrypoint&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;: Switching to dedicated user &lt;span class=&quot;token string&quot;&gt;&#39;mysql&#39;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token number&quot;&gt;2022&lt;/span&gt;-05-14 06:13:34+00:00 &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;Note&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;Entrypoint&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;: Entrypoint script &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; MySQL Server &lt;span class=&quot;token number&quot;&gt;8.0&lt;/span&gt;.29-1.el8 started.&lt;br /&gt;&lt;span class=&quot;token number&quot;&gt;2022&lt;/span&gt;-05-14 06:13:34+00:00 &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;Note&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;Entrypoint&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;: Initializing database files&lt;br /&gt;&lt;span class=&quot;token number&quot;&gt;2022&lt;/span&gt;-05-14T06:13:34.963954Z &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;System&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;MY-013169&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;Server&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; /usr/sbin/mysqld &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;mysqld &lt;span class=&quot;token number&quot;&gt;8.0&lt;/span&gt;.29&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; initializing of server &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; progress as process &lt;span class=&quot;token number&quot;&gt;44&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token number&quot;&gt;2022&lt;/span&gt;-05-14T06:13:34.974569Z &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;Warning&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;MY-010159&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;Server&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; Setting &lt;span class=&quot;token assign-left variable&quot;&gt;lower_case_table_names&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt; because &lt;span class=&quot;token function&quot;&gt;file&lt;/span&gt; system &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; /var/lib/mysql/ is &lt;span class=&quot;token keyword&quot;&gt;case&lt;/span&gt; insensitive&lt;br /&gt;&lt;span class=&quot;token number&quot;&gt;2022&lt;/span&gt;-05-14T06:13:34.991554Z &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;System&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;MY-013576&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;InnoDB&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; InnoDB initialization has started.&lt;br /&gt;&lt;span class=&quot;token number&quot;&gt;2022&lt;/span&gt;-05-14T06:13:39.989090Z &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;System&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;MY-013577&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;InnoDB&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; InnoDB initialization has ended.&lt;br /&gt;&lt;span class=&quot;token number&quot;&gt;2022&lt;/span&gt;-05-14T06:13:42.519457Z &lt;span class=&quot;token number&quot;&gt;6&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;Warning&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;MY-010453&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;Server&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; root@localhost is created with an empty password &lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt; Please consider switching off the --initialize-insecure option.&lt;br /&gt;&lt;span class=&quot;token number&quot;&gt;2022&lt;/span&gt;-05-14 06:13:48+00:00 &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;Note&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;Entrypoint&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;: Database files initialized&lt;br /&gt;&lt;span class=&quot;token number&quot;&gt;2022&lt;/span&gt;-05-14 06:13:48+00:00 &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;Note&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;Entrypoint&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;: Starting temporary server&lt;br /&gt;mysqld will log errors to /var/lib/mysql/46a76c820507.err&lt;br /&gt;mysqld is running as pid &lt;span class=&quot;token number&quot;&gt;95&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token number&quot;&gt;2022&lt;/span&gt;-05-14 06:13:50+00:00 &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;Note&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;Entrypoint&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;: Temporary server started.&lt;br /&gt;&lt;span class=&quot;token string&quot;&gt;&#39;/var/lib/mysql/mysql.sock&#39;&lt;/span&gt; -&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;/var/run/mysqld/mysqld.sock&#39;&lt;/span&gt;&lt;br /&gt;Warning: Unable to load &lt;span class=&quot;token string&quot;&gt;&#39;/usr/share/zoneinfo/iso3166.tab&#39;&lt;/span&gt; as &lt;span class=&quot;token function&quot;&gt;time&lt;/span&gt; zone. Skipping it.&lt;br /&gt;Warning: Unable to load &lt;span class=&quot;token string&quot;&gt;&#39;/usr/share/zoneinfo/leapseconds&#39;&lt;/span&gt; as &lt;span class=&quot;token function&quot;&gt;time&lt;/span&gt; zone. Skipping it.&lt;br /&gt;Warning: Unable to load &lt;span class=&quot;token string&quot;&gt;&#39;/usr/share/zoneinfo/tzdata.zi&#39;&lt;/span&gt; as &lt;span class=&quot;token function&quot;&gt;time&lt;/span&gt; zone. Skipping it.&lt;br /&gt;Warning: Unable to load &lt;span class=&quot;token string&quot;&gt;&#39;/usr/share/zoneinfo/zone.tab&#39;&lt;/span&gt; as &lt;span class=&quot;token function&quot;&gt;time&lt;/span&gt; zone. Skipping it.&lt;br /&gt;Warning: Unable to load &lt;span class=&quot;token string&quot;&gt;&#39;/usr/share/zoneinfo/zone1970.tab&#39;&lt;/span&gt; as &lt;span class=&quot;token function&quot;&gt;time&lt;/span&gt; zone. Skipping it.&lt;br /&gt;&lt;span class=&quot;token number&quot;&gt;2022&lt;/span&gt;-05-14 06:13:53+00:00 &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;Note&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;Entrypoint&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;: Creating database testing&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token number&quot;&gt;2022&lt;/span&gt;-05-14 06:13:53+00:00 &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;Note&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;Entrypoint&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;: Stopping temporary server&lt;br /&gt;&lt;span class=&quot;token number&quot;&gt;2022&lt;/span&gt;-05-14 06:13:55+00:00 &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;Note&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;Entrypoint&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;: Temporary server stopped&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token number&quot;&gt;2022&lt;/span&gt;-05-14 06:13:55+00:00 &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;Note&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;Entrypoint&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;: MySQL init process done. Ready &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; start up.&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token number&quot;&gt;2022&lt;/span&gt;-05-14T06:13:56.134193Z &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;System&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;MY-010116&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;Server&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; /usr/sbin/mysqld &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;mysqld &lt;span class=&quot;token number&quot;&gt;8.0&lt;/span&gt;.29&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; starting as process &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token number&quot;&gt;2022&lt;/span&gt;-05-14T06:13:56.142565Z &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;Warning&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;MY-010159&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;Server&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; Setting &lt;span class=&quot;token assign-left variable&quot;&gt;lower_case_table_names&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt; because &lt;span class=&quot;token function&quot;&gt;file&lt;/span&gt; system &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; /var/lib/mysql/ is &lt;span class=&quot;token keyword&quot;&gt;case&lt;/span&gt; insensitive&lt;br /&gt;&lt;span class=&quot;token number&quot;&gt;2022&lt;/span&gt;-05-14T06:13:56.154825Z &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;System&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;MY-013576&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;InnoDB&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; InnoDB initialization has started.&lt;br /&gt;&lt;span class=&quot;token number&quot;&gt;2022&lt;/span&gt;-05-14T06:13:57.163042Z &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;System&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;MY-013577&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;InnoDB&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; InnoDB initialization has ended.&lt;br /&gt;&lt;span class=&quot;token number&quot;&gt;2022&lt;/span&gt;-05-14T06:13:57.725555Z &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;Warning&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;MY-010068&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;Server&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; CA certificate ca.pem is self signed.&lt;br /&gt;&lt;span class=&quot;token number&quot;&gt;2022&lt;/span&gt;-05-14T06:13:57.725586Z &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;System&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;MY-013602&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;Server&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; Channel mysql_main configured to support TLS. Encrypted connections are now supported &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; this channel.&lt;br /&gt;&lt;span class=&quot;token number&quot;&gt;2022&lt;/span&gt;-05-14T06:13:57.814829Z &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;System&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;MY-011323&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;Server&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; X Plugin ready &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; connections. Bind-address: &lt;span class=&quot;token string&quot;&gt;&#39;::&#39;&lt;/span&gt; port: &lt;span class=&quot;token number&quot;&gt;33060&lt;/span&gt;, socket: /var/run/mysqld/mysqlx.sock&lt;br /&gt;&lt;span class=&quot;token number&quot;&gt;2022&lt;/span&gt;-05-14T06:13:57.814890Z &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;System&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;MY-010931&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;Server&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; /usr/sbin/mysqld: ready &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; connections. Version: &lt;span class=&quot;token string&quot;&gt;&#39;8.0.29&#39;&lt;/span&gt;  socket: &lt;span class=&quot;token string&quot;&gt;&#39;/var/run/mysqld/mysqld.sock&#39;&lt;/span&gt;  port: &lt;span class=&quot;token number&quot;&gt;3306&lt;/span&gt;  MySQL Community Server - GPL.&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Basically, our MySQL server is running right now and able to accept any connections.&lt;/p&gt;
&lt;p&gt;I have written another post for running &lt;a href=&quot;https://geshan.com.np/blog/2022/02/mysql-docker-compose/#running-mysql-with-docker-compose&quot;&gt;MySQL with docker-compose&lt;/a&gt;, you can read it as well. There are other posts related to Docker as well like running &lt;a href=&quot;https://geshan.com.np/blog/2021/12/docker-postgres/&quot;&gt;Postgres with Docker&lt;/a&gt;, &lt;a href=&quot;https://geshan.com.np/blog/2020/11/nodejs-with-docker/&quot;&gt;Node.js and Docker&lt;/a&gt;, &lt;a href=&quot;https://geshan.com.np/blog/2022/01/redis-docker/&quot;&gt;Redis on Docker&lt;/a&gt; and &lt;a href=&quot;https://geshan.com.np/blog/2021/07/rabbitmq-docker-nodejs/&quot;&gt;RabbitMQ with Docker&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Now to check if the container is running or not we can use the &lt;code&gt;docker ps&lt;/code&gt; command which we will discuss next.&lt;/p&gt;
&lt;h3 id=&quot;docker-ps&quot; tabindex=&quot;-1&quot;&gt;Docker ps &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2022/05/docker-commands/#docker-ps&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The docker ps command is used to list containers. It will list all running containers and with a &lt;code&gt;-a&lt;/code&gt; flag it will list all containers,s not just the running one. If you try &lt;code&gt;docker ps&lt;/code&gt; you should be able to see something like the below:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;CONTAINER ID   IMAGE              COMMAND                  CREATED         STATUS         PORTS                               NAMES&lt;br /&gt;46a76c820507   mysql:8.0-oracle   &lt;span class=&quot;token string&quot;&gt;&quot;docker-entrypoint.s…&quot;&lt;/span&gt;   &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt; minutes ago   Up &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt; minutes   &lt;span class=&quot;token number&quot;&gt;0.0&lt;/span&gt;.0.0:3306-&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;3306&lt;/span&gt;/tcp, &lt;span class=&quot;token number&quot;&gt;33060&lt;/span&gt;/tcp   mysql8&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;At this point, we have listed our running container and can verify that it is mapping to local post 3306 and has the name we gave it of &lt;code&gt;mysql8&lt;/code&gt;. In the consequent section, we will go into the running container and execute some commands.&lt;/p&gt;
&lt;h3 id=&quot;docker-exec&quot; tabindex=&quot;-1&quot;&gt;Docker exec &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2022/05/docker-commands/#docker-exec&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;docker exec&lt;/code&gt; command is useful to run a command in a running container. Depending on what is available in the container we can go into the container with sh/bash and run other commands inside the running container.&lt;/p&gt;
&lt;p&gt;For our example, as we have a running MySQL container let’s make sure that our &lt;code&gt;testing&lt;/code&gt; database exists with the following series of commands:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;docker&lt;/span&gt; &lt;span class=&quot;token builtin class-name&quot;&gt;exec&lt;/span&gt; -it mysql8 /bin/bash&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;#once we are inside the container, we can run&lt;/span&gt;&lt;br /&gt;mysql -uroot -p&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;#type/paste the password, and once we gave the MySQL CLI running, we can execute&lt;/span&gt;&lt;br /&gt;show databases&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This will look similar to the following:&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/docker-commands/02docker-commands-exec.jpg&quot; title=&quot;Docker command - docker exec example&quot; alt=&quot;Docker command - docker exec example&quot; /&gt;
&lt;p&gt;As seen, &lt;code&gt;docker exec&lt;/code&gt; is another very useful command to go inside a docker container or just run one-off commands on a running container. It is very helpful to debug any issues in a running container by executing extra commands or checking logs inside the container. In the subsequent sections, we will explore &lt;code&gt;docker logs&lt;/code&gt; to see the logs of the running container.&lt;/p&gt;
&lt;h3 id=&quot;docker-logs&quot; tabindex=&quot;-1&quot;&gt;Docker logs &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2022/05/docker-commands/#docker-logs&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;docker logs&lt;/code&gt; command is used to fetch the logs of a container. It also has multiple parameters of which the &lt;code&gt;-f&lt;/code&gt; to follow the logs is one of the most useful ones. It can be used as follows:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;docker&lt;/span&gt; logs -f mysql8&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Which will render an output like the below:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token number&quot;&gt;2022&lt;/span&gt;-05-14 &lt;span class=&quot;token number&quot;&gt;11&lt;/span&gt;:37:39+00:00 &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;Note&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;Entrypoint&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;: Entrypoint script &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; MySQL Server &lt;span class=&quot;token number&quot;&gt;8.0&lt;/span&gt;.29-1.el8 started.&lt;br /&gt;&lt;span class=&quot;token number&quot;&gt;2022&lt;/span&gt;-05-14 &lt;span class=&quot;token number&quot;&gt;11&lt;/span&gt;:37:39+00:00 &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;Note&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;Entrypoint&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;: Switching to dedicated user &lt;span class=&quot;token string&quot;&gt;&#39;mysql&#39;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token number&quot;&gt;2022&lt;/span&gt;-05-14 &lt;span class=&quot;token number&quot;&gt;11&lt;/span&gt;:37:39+00:00 &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;Note&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;Entrypoint&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;: Entrypoint script &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; MySQL Server &lt;span class=&quot;token number&quot;&gt;8.0&lt;/span&gt;.29-1.el8 started.&lt;br /&gt;&lt;span class=&quot;token number&quot;&gt;2022&lt;/span&gt;-05-14 &lt;span class=&quot;token number&quot;&gt;11&lt;/span&gt;:37:39+00:00 &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;Note&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;Entrypoint&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;: Initializing database files&lt;br /&gt;&lt;span class=&quot;token number&quot;&gt;2022&lt;/span&gt;-05-14T11:37:39.274964Z &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;System&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;MY-013169&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;Server&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; /usr/sbin/mysqld &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;mysqld &lt;span class=&quot;token number&quot;&gt;8.0&lt;/span&gt;.29&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; initializing of server &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; progress as process &lt;span class=&quot;token number&quot;&gt;44&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token number&quot;&gt;2022&lt;/span&gt;-05-14T11:37:39.281699Z &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;System&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;MY-013576&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;InnoDB&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; InnoDB initialization has started.&lt;br /&gt;&lt;span class=&quot;token number&quot;&gt;2022&lt;/span&gt;-05-14T11:37:39.382089Z &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;System&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;MY-013577&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;InnoDB&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; InnoDB initialization has ended.&lt;br /&gt;&lt;span class=&quot;token number&quot;&gt;2022&lt;/span&gt;-05-14T11:37:39.772787Z &lt;span class=&quot;token number&quot;&gt;6&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;Warning&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;MY-010453&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;Server&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; root@localhost is created with an empty password &lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt; Please consider switching off the --initialize-insecure option.&lt;br /&gt;&lt;span class=&quot;token number&quot;&gt;2022&lt;/span&gt;-05-14 &lt;span class=&quot;token number&quot;&gt;11&lt;/span&gt;:37:41+00:00 &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;Note&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;Entrypoint&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;: Database files initialized&lt;br /&gt;&lt;span class=&quot;token number&quot;&gt;2022&lt;/span&gt;-05-14 &lt;span class=&quot;token number&quot;&gt;11&lt;/span&gt;:37:41+00:00 &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;Note&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;Entrypoint&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;: Starting temporary server&lt;br /&gt;mysqld will log errors to /var/lib/mysql/1e296cc4efac.err&lt;br /&gt;mysqld is running as pid &lt;span class=&quot;token number&quot;&gt;95&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token number&quot;&gt;2022&lt;/span&gt;-05-14 &lt;span class=&quot;token number&quot;&gt;11&lt;/span&gt;:37:41+00:00 &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;Note&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;Entrypoint&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;: Temporary server started.&lt;br /&gt;&lt;span class=&quot;token string&quot;&gt;&#39;/var/lib/mysql/mysql.sock&#39;&lt;/span&gt; -&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;/var/run/mysqld/mysqld.sock&#39;&lt;/span&gt;&lt;br /&gt;Warning: Unable to load &lt;span class=&quot;token string&quot;&gt;&#39;/usr/share/zoneinfo/iso3166.tab&#39;&lt;/span&gt; as &lt;span class=&quot;token function&quot;&gt;time&lt;/span&gt; zone. Skipping it.&lt;br /&gt;Warning: Unable to load &lt;span class=&quot;token string&quot;&gt;&#39;/usr/share/zoneinfo/leapseconds&#39;&lt;/span&gt; as &lt;span class=&quot;token function&quot;&gt;time&lt;/span&gt; zone. Skipping it.&lt;br /&gt;Warning: Unable to load &lt;span class=&quot;token string&quot;&gt;&#39;/usr/share/zoneinfo/tzdata.zi&#39;&lt;/span&gt; as &lt;span class=&quot;token function&quot;&gt;time&lt;/span&gt; zone. Skipping it.&lt;br /&gt;Warning: Unable to load &lt;span class=&quot;token string&quot;&gt;&#39;/usr/share/zoneinfo/zone.tab&#39;&lt;/span&gt; as &lt;span class=&quot;token function&quot;&gt;time&lt;/span&gt; zone. Skipping it.&lt;br /&gt;Warning: Unable to load &lt;span class=&quot;token string&quot;&gt;&#39;/usr/share/zoneinfo/zone1970.tab&#39;&lt;/span&gt; as &lt;span class=&quot;token function&quot;&gt;time&lt;/span&gt; zone. Skipping it.&lt;br /&gt;&lt;span class=&quot;token number&quot;&gt;2022&lt;/span&gt;-05-14 &lt;span class=&quot;token number&quot;&gt;11&lt;/span&gt;:37:43+00:00 &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;Note&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;Entrypoint&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;: Creating database testing&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token number&quot;&gt;2022&lt;/span&gt;-05-14 &lt;span class=&quot;token number&quot;&gt;11&lt;/span&gt;:37:43+00:00 &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;Note&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;Entrypoint&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;: Stopping temporary server&lt;br /&gt;&lt;span class=&quot;token number&quot;&gt;2022&lt;/span&gt;-05-14 &lt;span class=&quot;token number&quot;&gt;11&lt;/span&gt;:37:44+00:00 &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;Note&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;Entrypoint&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;: Temporary server stopped&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token number&quot;&gt;2022&lt;/span&gt;-05-14 &lt;span class=&quot;token number&quot;&gt;11&lt;/span&gt;:37:44+00:00 &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;Note&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;Entrypoint&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;: MySQL init process done. Ready &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; start up.&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token number&quot;&gt;2022&lt;/span&gt;-05-14T11:37:44.586231Z &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;System&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;MY-010116&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;Server&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; /usr/sbin/mysqld &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;mysqld &lt;span class=&quot;token number&quot;&gt;8.0&lt;/span&gt;.29&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; starting as process &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token number&quot;&gt;2022&lt;/span&gt;-05-14T11:37:44.589830Z &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;System&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;MY-013576&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;InnoDB&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; InnoDB initialization has started.&lt;br /&gt;&lt;span class=&quot;token number&quot;&gt;2022&lt;/span&gt;-05-14T11:37:44.631698Z &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;System&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;MY-013577&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;InnoDB&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; InnoDB initialization has ended.&lt;br /&gt;&lt;span class=&quot;token number&quot;&gt;2022&lt;/span&gt;-05-14T11:37:44.709052Z &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;Warning&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;MY-010068&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;Server&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; CA certificate ca.pem is self signed.&lt;br /&gt;&lt;span class=&quot;token number&quot;&gt;2022&lt;/span&gt;-05-14T11:37:44.709084Z &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;System&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;MY-013602&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;Server&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; Channel mysql_main configured to support TLS. Encrypted connections are now supported &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; this channel.&lt;br /&gt;&lt;span class=&quot;token number&quot;&gt;2022&lt;/span&gt;-05-14T11:37:44.718522Z &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;System&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;MY-010931&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;Server&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; /usr/sbin/mysqld: ready &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; connections. Version: &lt;span class=&quot;token string&quot;&gt;&#39;8.0.29&#39;&lt;/span&gt;  socket: &lt;span class=&quot;token string&quot;&gt;&#39;/var/run/mysqld/mysqld.sock&#39;&lt;/span&gt;  port: &lt;span class=&quot;token number&quot;&gt;3306&lt;/span&gt;  MySQL Community Server - GPL.&lt;br /&gt;&lt;span class=&quot;token number&quot;&gt;2022&lt;/span&gt;-05-14T11:37:44.718526Z &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;System&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;MY-011323&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;Server&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; X Plugin ready &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; connections. Bind-address: &lt;span class=&quot;token string&quot;&gt;&#39;::&#39;&lt;/span&gt; port: &lt;span class=&quot;token number&quot;&gt;33060&lt;/span&gt;, socket: /var/run/mysqld/mysqlx.sock&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This command is very useful when our container is running in detached mode to view its logs. The &lt;code&gt;docker logs&lt;/code&gt; command comes in very handy for webservers or application servers where logs are piped to the stdout and gives us valuable insight into the running application. Next up we will stop and kill our running container.&lt;/p&gt;
&lt;h3 id=&quot;docker-stop&quot; tabindex=&quot;-1&quot;&gt;Docker stop &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2022/05/docker-commands/#docker-stop&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;docker stop&lt;/code&gt; command is used to stop one or more running containers. We will use this command to stop our &lt;code&gt;mysql8&lt;/code&gt; container. We can pass the &lt;code&gt;-t&lt;/code&gt; flag to wait for the container to stop for given number of seconds like:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;docker&lt;/span&gt; stop -t &lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt; mysql8&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If the &lt;code&gt;-t 5&lt;/code&gt; parameter is not passed, the docker stop command will wait for 10 seconds by default. It will output the name of the container. A container can also be stopped by passing the container id not only the name. After the container is stopped if we do a &lt;code&gt;docker ps&lt;/code&gt; we will not see our &lt;code&gt;mysql8&lt;/code&gt; container running anymore.&lt;/p&gt;
&lt;p&gt;So you have docker kill too?&lt;/p&gt;
&lt;h3 id=&quot;docker-kill&quot; tabindex=&quot;-1&quot;&gt;Docker kill &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2022/05/docker-commands/#docker-kill&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Similar to docker stop, there is the &lt;code&gt;docker kill&lt;/code&gt; command that is used to &lt;code&gt;kill&lt;/code&gt; one or more running containers. We can kill the running container named &lt;code&gt;mysql8&lt;/code&gt; with:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;docker&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;kill&lt;/span&gt; mysql8&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This command will kill the container. You might be wondering what is the difference between stop and kill then right? That will be answered next:&lt;/p&gt;
&lt;h4 id=&quot;difference-between-docker-stop-and-kill&quot; tabindex=&quot;-1&quot;&gt;Difference between docker stop and kill &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2022/05/docker-commands/#difference-between-docker-stop-and-kill&quot;&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;The difference between docker stop and docker kill is that docker stop issues a SIGTERM so &lt;a href=&quot;https://www.ibm.com/docs/en/aix/7.2?topic=management-process-termination&quot;&gt;waits&lt;/a&gt; for the container to clean up before killing it. Whereas &lt;code&gt;docker kill&lt;/code&gt; will issue a SIGKILL which will not be as polite and directly kill the container. To know other minute differences between the two, follow this &lt;a href=&quot;https://www.designcise.com/web/tutorial/whats-the-difference-between-docker-stop-and-docker-kill-commands&quot;&gt;post&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&quot;docker-cp&quot; tabindex=&quot;-1&quot;&gt;Docker cp &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2022/05/docker-commands/#docker-cp&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;docker cp&lt;/code&gt; is a handy command but a lesser-known one. It is used to copy files/folders between a container and the host’s local file system. One use-case I have used recently is to copy the &lt;code&gt;node_modules&lt;/code&gt; from the container in the build phase in the CI pipeline and reuse it in the test phase on the host. It easily saved 30+ seconds of &lt;code&gt;npm install&lt;/code&gt; time. Below are a couple of examples to copy a file from host to container and vice versa.&lt;/p&gt;
&lt;h4 id=&quot;copy-file-from-host-to-the-container&quot; tabindex=&quot;-1&quot;&gt;Copy file from host to the container &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2022/05/docker-commands/#copy-file-from-host-to-the-container&quot;&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Let’s say we want to copy a SQL file called test.sql into the running MySQL container named &lt;code&gt;mysql8&lt;/code&gt;, we can do it with:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;docker&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;cp&lt;/span&gt; ./test.sql mysql8:/tmp&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To verify the file is there we can execute:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;docker&lt;/span&gt; &lt;span class=&quot;token builtin class-name&quot;&gt;exec&lt;/span&gt; -it mysql8 &lt;span class=&quot;token function&quot;&gt;ls&lt;/span&gt; -al /tmp&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It will show something like the below:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;total &lt;span class=&quot;token number&quot;&gt;12&lt;/span&gt;&lt;br /&gt;drwxrwxrwt &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; root root  &lt;span class=&quot;token number&quot;&gt;4096&lt;/span&gt; May &lt;span class=&quot;token number&quot;&gt;14&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;12&lt;/span&gt;:14 &lt;span class=&quot;token builtin class-name&quot;&gt;.&lt;/span&gt;&lt;br /&gt;drwxr-xr-x &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; root root  &lt;span class=&quot;token number&quot;&gt;4096&lt;/span&gt; May &lt;span class=&quot;token number&quot;&gt;14&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;12&lt;/span&gt;:14 &lt;span class=&quot;token punctuation&quot;&gt;..&lt;/span&gt;&lt;br /&gt;-rw-r--r-- &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;  &lt;span class=&quot;token number&quot;&gt;501&lt;/span&gt; games   &lt;span class=&quot;token number&quot;&gt;19&lt;/span&gt; May &lt;span class=&quot;token number&quot;&gt;14&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;12&lt;/span&gt;:13 test.sql&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&quot;copy-file-from-container-to-host&quot; tabindex=&quot;-1&quot;&gt;Copy file from container to host &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2022/05/docker-commands/#copy-file-from-container-to-host&quot;&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Now we will try to copy the same file from the container to the host with a different filename by executing:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;docker&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;cp&lt;/span&gt; mysql8:/tmp/test.sql ./test2.sql&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If we do a &lt;code&gt;ls -al | grep test2&lt;/code&gt; on that folder in the host we will see the file has been copied from the container to the host folder. The &lt;code&gt;docker cp&lt;/code&gt; command can be useful to copy a file from or to the container on the fly without the need to rebuild the image again.&lt;/p&gt;
&lt;p&gt;In addition to the above 10+ command, there are many other useful docker commands. Some of these are listed in the next part.&lt;/p&gt;
&lt;h2 id=&quot;other-useful-docker-commands&quot; tabindex=&quot;-1&quot;&gt;Other useful docker commands &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2022/05/docker-commands/#other-useful-docker-commands&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Surely, there are many handy docker commands that can help you get things done. Some of them are &lt;a href=&quot;https://docs.docker.com/engine/reference/commandline/info/&quot;&gt;info&lt;/a&gt;, &lt;a href=&quot;https://docs.docker.com/engine/reference/commandline/inspect/&quot;&gt;inspect&lt;/a&gt;, &lt;a href=&quot;https://docs.docker.com/engine/reference/commandline/history/&quot;&gt;history&lt;/a&gt;, &lt;a href=&quot;https://docs.docker.com/engine/reference/commandline/network/&quot;&gt;network&lt;/a&gt;, &lt;a href=&quot;https://docs.docker.com/engine/reference/commandline/restart/&quot;&gt;restart&lt;/a&gt;, &lt;a href=&quot;https://docs.docker.com/engine/reference/commandline/top/&quot;&gt;top&lt;/a&gt;, and &lt;a href=&quot;https://docs.docker.com/engine/reference/commandline/build/&quot;&gt;build&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;You can learn about how to &lt;a href=&quot;https://geshan.com.np/blog/2020/10/docker-build-example-faster-docker-build/&quot;&gt;build docker images faster&lt;/a&gt; to save time on building Docker images with BUILDKIT and better docker layer caching. Similarly, &lt;a href=&quot;https://geshan.com.np/blog/2019/11/how-to-use-docker-multi-stage-build/&quot;&gt;Docker multi-stage build&lt;/a&gt; is also a super useful feature to get your docker image sizes down. And then docker-compose is another sea to swim in :).&lt;/p&gt;
&lt;h2 id=&quot;conclusion&quot; tabindex=&quot;-1&quot;&gt;Conclusion &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2022/05/docker-commands/#conclusion&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;We have seen the usage of 10 useful docker command that is needed to get an image, run it, go inside it, print some logs, and then stop/kill it. That is basically the main lifecycle of running Docker containers from images.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I hope it has helped you learn more things about Docker!&lt;/p&gt;
&lt;/blockquote&gt;
</content>
	</entry>
	
	<entry>
		<title>How to append contents to a file using Node.js</title>
		<link href="https://geshan.com.np/blog/2022/04/nodejs-append-to-file/"/>
		<updated>2022-04-26T11:57:55Z</updated>
		<id>https://geshan.com.np/blog/2022/04/nodejs-append-to-file/</id>
		<content type="html">&lt;p&gt;Node.js can be used for a multitude of things, file handling is one of them. In this post, we will learn how to append to a file using Node.js. It can be done with callback, promise (async/await) as well as in a sync way, let’s get going!&lt;/p&gt;
&lt;!-- more --&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/nodejs-append-to-file/01nodejs-append-to-file.jpg&quot; title=&quot;Append contents to a file using Node.js&quot; alt=&quot;Append contents to a file using Node.js&quot; /&gt;
&lt;h2 id=&quot;table-of-contents&quot; tabindex=&quot;-1&quot;&gt;Table of contents &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2022/04/nodejs-append-to-file/#table-of-contents&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2022/04/nodejs-append-to-file/#prerequisites&quot;&gt;Prerequisites&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2022/04/nodejs-append-to-file/#ways-to-append-to-a-file-in-node.js&quot;&gt;Ways to append to a file in Node.js&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2022/04/nodejs-append-to-file/#append-to-a-file-with-a-callback&quot;&gt;Append to a file with a callback&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2022/04/nodejs-append-to-file/#file-append-using-promise&quot;&gt;File append using Promise&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2022/04/nodejs-append-to-file/#sync-file-append-using-node.js&quot;&gt;Sync file append using Node.js&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2022/04/nodejs-append-to-file/#conclusion&quot;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;prerequisites&quot; tabindex=&quot;-1&quot;&gt;Prerequisites &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2022/04/nodejs-append-to-file/#prerequisites&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Before diving deeper into the code, below are some requirements and/or nice to have:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Having Node.js 10+ running on your machine/testing environment is required. I will be using Node 18 for the example below. You can use &lt;a href=&quot;https://geshan.com.np/blog/2020/11/nodejs-with-docker/&quot;&gt;Node.js withDocker&lt;/a&gt; for this.&lt;/li&gt;
&lt;li&gt;Any knowledge of using Node.js and its native file system (fs) module will be helpful but not required.&lt;/li&gt;
&lt;li&gt;Prior understanding of Node.js and how its event loop works would be advantageous.&lt;/li&gt;
&lt;li&gt;Knowledge of callback, promise (async-await), and sync calls in Node.js will be useful to follow along with the code examples.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The code examples are available on a public &lt;a href=&quot;https://geshan.com.np/blog/2022/04/nodejs-append-to-file/%E2%80%8B%E2%80%8Bhttps://github.com/geshan/nodejs-append-to-file&quot;&gt;GitHub repository&lt;/a&gt; for your reference. You can also check out &lt;a href=&quot;https://geshan.com.np/blog/2021/10/nodejs-read-file-line-by-line/&quot;&gt;Node.js read file line by line&lt;/a&gt; if that helps to read the file used in this tutorial. In the subsequent section, we will start getting our hands dirty with the code.&lt;/p&gt;
&lt;h2 id=&quot;ways-to-append-to-a-file-in-node.js&quot; tabindex=&quot;-1&quot;&gt;Ways to append to a file in Node.js &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2022/04/nodejs-append-to-file/#ways-to-append-to-a-file-in-node.js&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;There are multiple ways and use-cases to append a line or some data to a file using Node.js. To append to an existing or a new file with Node.js we can use the native &lt;code&gt;fs&lt;/code&gt; module, there is no need to install any NPM package. The file system module (fs for short) is used to interact with the file system modeled as per standard POSIX functions.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;fs&lt;/code&gt; module provides callback, promise based as well as some sync functions to do common and useful file operations, appending to a file is definitely one of those.&lt;/p&gt;
&lt;p&gt;We will see code examples with 3 ways to append a line to a text file in Node.js. The first one will be with a callback, then a promise-based example with async-await. Finally, we will witness a sync example, as known it is best not to use the sync example as it block the Node.js event loop until the append operation is completed.&lt;/p&gt;
&lt;p&gt;In the next section, we will look into how to append a line to an existing/newly created text file.&lt;/p&gt;
&lt;h3 id=&quot;append-to-a-file-with-a-callback&quot; tabindex=&quot;-1&quot;&gt;Append to a file with a callback &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2022/04/nodejs-append-to-file/#append-to-a-file-with-a-callback&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The first more Node.js normal way to append to a file is using a callback. It appends to a file asynchronously. If the file does not exist it will create the file and then append the string to it, a &lt;a href=&quot;https://nodejs.org/api/buffer.html&quot;&gt;Buffer&lt;/a&gt; can also be used in place of a string as data.&lt;/p&gt;
&lt;p&gt;The first parameter is the path, the second one is the data which can be a string or buffer. The default encoding is &lt;code&gt;utf8&lt;/code&gt;, if you are working with a file that uses a different encoding it can be passed in as the third parameter to the &lt;code&gt;fs.appendFile&lt;/code&gt; method. The fourth parameter is the callback function which takes in an error as the argument. You can read more about it in the official &lt;a href=&quot;https://nodejs.org/api/fs.html#fsappendfilepath-data-options-callback&quot;&gt;documentation&lt;/a&gt;. Below is an example of appending two lines where the file is also created.&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; fs &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;fs&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;fs&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;appendFile&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;file.txt&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;First line added!&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;utf-8&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token parameter&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;err&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;throw&lt;/span&gt; err&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;  console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;First line written.&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  fs&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;appendFile&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;file.txt&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;\nSecond line appended.&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token parameter&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;err&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token keyword&quot;&gt;throw&lt;/span&gt; err&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Second line appended.&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The code is pretty self-explanatory, first, we require the file system - &lt;code&gt;fs&lt;/code&gt; module. Then we use the &lt;code&gt;fs.appendFile&lt;/code&gt; method with a callback passing the file path, the test to be added, the encoding as &lt;code&gt;utf8&lt;/code&gt; and finally the callback function.&lt;/p&gt;
&lt;p&gt;If there is an error we throw the error up, else we log that the first line has been written. Inside the callback, we call the &lt;code&gt;fs.appendFile&lt;/code&gt; again to add a second line and essentialy repeat the process. This is a small example of the &lt;a href=&quot;http://callbackhell.com/&quot;&gt;callback hell&lt;/a&gt; scenario, in the consequent section we will use promises and async-await to come out the callback hell.&lt;/p&gt;
&lt;p&gt;To run the above file saved as &lt;code&gt;callback.js&lt;/code&gt; we can run the following command:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;rm&lt;/span&gt; -f file.txt &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;node&lt;/span&gt; callback.js&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;When we execute the above command and see the contents of the file we will see something like the below:&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/nodejs-append-to-file/02nodejs-append-to-file-callback.jpg&quot; title=&quot;Append contents to a file using Node.js with callbacks fs.apppendFile&quot; alt=&quot;Append contents to a file using Node.js with callbacks fs.apppendFile&quot; /&gt;
&lt;p&gt;As seen above, the file has two lines and they are appended with Node.js correctly. In the proceeding section, we will see the same task being done with Promises and async-await.&lt;/p&gt;
&lt;h3 id=&quot;file-append-using-promise&quot; tabindex=&quot;-1&quot;&gt;File append using Promise &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2022/04/nodejs-append-to-file/#file-append-using-promise&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The above task of appending 2 lines to an existing/new text file with Node.js can be done much easier and in a pseudo-synchronous way using promises. Luckily, the native &lt;code&gt;fs&lt;/code&gt; module comes with a promise interface too. If the promise interface was not available we could have used &lt;a href=&quot;https://nodejs.org/dist/latest-v8.x/docs/api/util.html#util_util_promisify_original&quot;&gt;util.promisify&lt;/a&gt; as well but that won’t be needed.&lt;/p&gt;
&lt;p&gt;Below is the code for appending to a file with Node.js using promises:&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; fsPromises &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;fs/promises&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; fileName &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;file-promise.txt&#39;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; fsPromises&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;appendFile&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;fileName&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;First line added!&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;utf-8&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; fsPromises&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;appendFile&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;fileName&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;\nSecond line appended.&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;utf-8&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Added 2 lines to file.&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;catch&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;err&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Error appending data to file&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; err&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In this snippet, we first require the &lt;code&gt;fs/promises&lt;/code&gt; native module. Then we use an async Immediately Invoked Function Expression (IIFE) to use the async-await syntax for the promisified appendFile. Then in the try block, we append the first and the second line similar to the previous example by calling &lt;code&gt;await fsPromises.appendFile&lt;/code&gt; which takes 3 parameters.&lt;/p&gt;
&lt;p&gt;The first one is the path, the second one is the string or a buffer to append to the file and the third one can be an options object or a string to specify the encoding. We are using &lt;code&gt;utf-8&lt;/code&gt; as the encoding. As this is a promise, the callback function is not required which simplifies the code as seen above.&lt;/p&gt;
&lt;p&gt;We can run the above file saved as &lt;code&gt;promise.js&lt;/code&gt; with the following command:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;rm&lt;/span&gt; -f file-promise.txt &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;node&lt;/span&gt; promise.js&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That will yield output like the below when we check the contents of the file:&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/nodejs-append-to-file/03nodejs-append-to-file-promise.jpg&quot; title=&quot;Append contents to a file using Node.js with Promise and async-await&quot; alt=&quot;Append contents to a file using Node.js with Promise and async-await&quot; /&gt;
&lt;p&gt;The promise-based API is possibly the efficient and easy-to-write way to append contents to a file using Node.js. Next up, we will see a sync append to file example.&lt;/p&gt;
&lt;h3 id=&quot;sync-file-append-using-node.js&quot; tabindex=&quot;-1&quot;&gt;Sync file append using Node.js &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2022/04/nodejs-append-to-file/#sync-file-append-using-node.js&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The last example to append to a file with Node.js is with the &lt;code&gt;appendFileSync&lt;/code&gt; method available in the native file system (fs) module. As the name suggests, this is a &lt;code&gt;sync&lt;/code&gt; operation that blocks the &lt;a href=&quot;https://nodejs.org/en/docs/guides/event-loop-timers-and-nexttick/#what-is-the-event-loop&quot;&gt;event loop&lt;/a&gt; until the operation is completed.&lt;/p&gt;
&lt;p&gt;Even though the code looks simpler, the sync way of appending to a file with Node.js is not the best solution. It will be inefficient especially with larger files and larger content to be appended. Anyhow, below is a code example to append to a file with Node.js in a sync way:&lt;/p&gt;
&lt;pre class=&quot;language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; fs &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;fs&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; fileName &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;file-sync.txt&#39;&lt;/span&gt;&lt;br /&gt;  fs&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;appendFileSync&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;fileName&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;First line added!&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;utf-8&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  fs&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;appendFileSync&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;fileName&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;\nSecond line appended.&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;utf-8&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Added 2 lines to file in sync mode.&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;catch&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;err&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Error appending data to file in sync mode&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; err&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Similar to the promises and async-await example, we require the &lt;code&gt;fs&lt;/code&gt; native module first. Then we use a try-catch block without any async function. After that, we call the &lt;code&gt;appendFileSync&lt;/code&gt; method on the fs module and add the two lines similar to the above two examples.&lt;/p&gt;
&lt;p&gt;The parameters remain the same, file path, then the content that can be a string or buffer and the options obejct/encoding as a string. Even in this example, we use the string &lt;code&gt;utf-8&lt;/code&gt; for encoding. Then we have a &lt;code&gt;catch&lt;/code&gt; part that logs if there is any error.&lt;/p&gt;
&lt;p&gt;If we execute the above file saved as &lt;code&gt;sync.js&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;rm&lt;/span&gt; -f file-sync.txt &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;node&lt;/span&gt; sync.js&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then it will show the following output:&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/nodejs-append-to-file/04nodejs-append-to-file-sync.jpg&quot; title=&quot;Append contents to a file using Node.js in a sync way&quot; alt=&quot;Append contents to a file using Node.js in a sync way&quot; /&gt;
&lt;p&gt;If you want to write or append multiple times better use a stream. An example of using stream can be seen in the &lt;a href=&quot;https://geshan.com.np/blog/2021/11/nodejs-read-write-csv/#write-csv-in-node.js-with-fast-csv&quot;&gt;Node.js CSV&lt;/a&gt; post.&lt;/p&gt;
&lt;h2 id=&quot;conclusion&quot; tabindex=&quot;-1&quot;&gt;Conclusion &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2022/04/nodejs-append-to-file/#conclusion&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;We have seen how to append to a file with Node.js in 3 different ways, a callback, a promise with async-await syntax, and a sync way. As mentioned above all code examples are available as a &lt;a href=&quot;https://github.com/geshan/nodejs-append-to-file&quot;&gt;GitHub&lt;/a&gt; repo. I hope it has helped you learn something new about Node.js and file handling.&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>Using Node.js readline to create a basic CLI app with Async await example</title>
		<link href="https://geshan.com.np/blog/2022/03/nodejs-readline/"/>
		<updated>2022-03-25T11:47:55Z</updated>
		<id>https://geshan.com.np/blog/2022/03/nodejs-readline/</id>
		<content type="html">&lt;p&gt;Node.js can be used for multiple purposes, creating a Command Line Interface (CLI) app is one of them. With the Node.js Readline native module, we can create CLI apps. In this post, we will learn how to create a basic Node.js CLI app using the latest Readline on Node 17 with promises and async/await. Let’s get started!&lt;/p&gt;
&lt;!-- more --&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/nodejs-readline/01nodejs-readline.jpg&quot; title=&quot;Using Node.js readline to create simple CLI app&quot; alt=&quot;Using Node.js readline to create simple CLI app&quot; /&gt;
&lt;h2 id=&quot;table-of-contents&quot; tabindex=&quot;-1&quot;&gt;Table of contents &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2022/03/nodejs-readline/#table-of-contents&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2022/03/nodejs-readline/#prerequisites&quot;&gt;Prerequisites&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2022/03/nodejs-readline/#basic-example-of-node.js-readline&quot;&gt;Basic example of Node.js readline&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2022/03/nodejs-readline/#readline-example-with-timeout&quot;&gt;Readline example with timeout&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2022/03/nodejs-readline/#conclusion&quot;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;prerequisites&quot; tabindex=&quot;-1&quot;&gt;Prerequisites &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2022/03/nodejs-readline/#prerequisites&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;If you want to build on a full-on CLI application it might be better to use something like &lt;a href=&quot;https://oclif.io/&quot;&gt;Oclif&lt;/a&gt; or &lt;a href=&quot;https://github.com/tj/commander.js&quot;&gt;commander.js&lt;/a&gt;. For smaller CLI apps that don’t need external NPM dependencies Node.js Readline module would suffice. Below are the prerequisites for this tutorial on how to create a simple Node.js CLI app using readline native module:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;You will need Node.js v17+ working on your machine and basic knowledge of Node.js would be helpful. This tutorial will only use a native module with Common JS (CJS) so NPM knowledge is optional.&lt;/li&gt;
&lt;li&gt;A general understanding of promises and async-await in JavaScript/Node.js would come in handy.&lt;/li&gt;
&lt;li&gt;Any prior knowledge of building even a basic CLI app would be beneficial but not essential.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Given that we have mentioned the required things, in the next section we will start diving into the code.&lt;/p&gt;
&lt;h2 id=&quot;basic-example-of-node.js-readline&quot; tabindex=&quot;-1&quot;&gt;Basic example of Node.js readline &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2022/03/nodejs-readline/#basic-example-of-node.js-readline&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Before we go into an example of Node.js readline with more things, we will first look into a basic example. This simple example will use the latest &lt;code&gt;readline/promises&lt;/code&gt; native package only available from &lt;a href=&quot;https://nodejs.org/docs/latest-v17.x/api/readline.html&quot;&gt;Node 17&lt;/a&gt; and above. Given Node 17 is the currently active version and Node 18 will be the latest LTS from mid-Apr 2022, this should be a relevant example apt with the present time and very useful in the future too.&lt;/p&gt;
&lt;p&gt;The example is very simple it asks the user the value of &lt;code&gt;4x4&lt;/code&gt; if the user enters &lt;code&gt;16&lt;/code&gt; it says it is &lt;code&gt;correct&lt;/code&gt; else it says it is &lt;code&gt;incorrect and try again&lt;/code&gt;. Below is the code basic example of Node.js readline native module with promises, async-await, and process module.&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; readline &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;readline/promises&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;stdin&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; input&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;stdout&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; output &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;process&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; rl &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; readline&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;createInterface&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; input&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; output &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; answer &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; rl&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;question&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;What is 4x4 equals? &#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; correctOrNot &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; answer&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;trim&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;16&#39;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;correct!&#39;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;incorrect. Try again.&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;answer&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;trim&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt; is &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;correctOrNot&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;catch&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;err&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;    &lt;br /&gt;    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;Error: &lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; err&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;finally&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    rl&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;  process&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;exit&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let’s go through the above code in a bit more detail now. First, we require the &lt;code&gt;readline/promises&lt;/code&gt; package which is part of the native Node.js readline module. Subsequently, we require stdin and stdout as &lt;code&gt;input&lt;/code&gt; and &lt;code&gt;output&lt;/code&gt; respectively.&lt;/p&gt;
&lt;p&gt;After that, as there is no top level async await in &lt;code&gt;.js&lt;/code&gt; file we use an async Immediately Invoked Function Expression (&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/IIFE&quot;&gt;IIFE&lt;/a&gt;) to be able to call await easily. Inside the IIFE we declare a readline interface to take input from stdin and show output on stdout.&lt;br /&gt;
Then, inside the try we declare a new constant called &lt;code&gt;answer&lt;/code&gt; that waits for the answer to the question &lt;code&gt;What is 4x4 equal?&lt;/code&gt; until it gets an answer. As soon as the user types in an answer it is set to the cont &lt;code&gt;answer&lt;/code&gt;. After that it compares if the answer is &lt;code&gt;16&lt;/code&gt;, if it is 16 it sets &lt;code&gt;correctOrNot&lt;/code&gt; to &lt;code&gt;correct!&lt;/code&gt; else &lt;code&gt;incorrect, Try again.&lt;/code&gt;. Then it logs the answer as correct or not.&lt;/p&gt;
&lt;p&gt;Towards the end, if there is an error it is caught in the &lt;code&gt;catch&lt;/code&gt; section and logged. Similarly, the readline interface is closed in the &lt;code&gt;finally&lt;/code&gt; section. Last we exit out of the process with the &lt;code&gt;process.exit(1)&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The code can be seen in the &lt;a href=&quot;https://github.com/geshan/nodejs-readline/pull/4/files&quot;&gt;pull reques&lt;/a&gt;t too. If you are looking for an ESM style import syntax version of the above example, please have a look at this &lt;a href=&quot;https://github.com/geshan/nodejs-readline/blob/master/readline-basic.mjs&quot;&gt;file&lt;/a&gt; with top-level async-await.&lt;/p&gt;
&lt;p&gt;In the next section, we will look at a similar example with timeout added to it where the answer is expected within X seconds from the user. Let’s see how that is done.&lt;/p&gt;
&lt;h2 id=&quot;readline-example-with-timeout&quot; tabindex=&quot;-1&quot;&gt;Readline example with timeout &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2022/03/nodejs-readline/#readline-example-with-timeout&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The above basic example is good for simple tasks. Let’s say if we need to give the user a specific time for instance 5 seconds before the user can answer &lt;code&gt;4x4&lt;/code&gt;, we can do it easily using &lt;code&gt;AbortController&lt;/code&gt;. Below is an example of the same single question waiting for an answer but it will stop if the answer is not provided in 5 seconds:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; readline &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;readline/promises&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;stdin&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; input&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;stdout&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; output &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;process&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; ac &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;AbortController&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; signal &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; ac&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;signal&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; rl &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; readline&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;createInterface&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; input&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; output &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; timeoutInSeconds &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token function&quot;&gt;setTimeout&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; ac&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;abort&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; timeoutInSeconds &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; answer &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; rl&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;question&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;What is 4x4 equals? &#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; signal &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; correctOrNot &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; answer&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;trim&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;16&#39;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;correct!&#39;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;incorrect. Try again.&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;answer&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;trim&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt; is &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;correctOrNot&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;catch&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;err&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; message &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Error: &#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;err&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;code &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;ABORT_ERR&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;      message &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;You took too long. Try again within &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;timeoutInSeconds&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt; seconds.&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;message&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; err&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;code &lt;span class=&quot;token operator&quot;&gt;!==&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;ABORT_ERR&#39;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt; err &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;finally&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    rl&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;  process&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;exit&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The main changes in this example which adds another layer of timeout feature on the above basic example of Node.js readline are as follows.&lt;/p&gt;
&lt;p&gt;On line 3 we instantiate the Abort Controller. The &lt;a href=&quot;https://nodejs.org/docs/latest-v17.x/api/globals.html#class-abortcontroller&quot;&gt;Abort Controller&lt;/a&gt; as per the official documentation is “A utility class used to signal cancelation in selected promise-based APIs”. This fits our use-case well, as we are trying to stop the script if the user is not able to answer within 5 seconds. Next up, in line 4 we use the &lt;code&gt;signal&lt;/code&gt; variable which is &lt;a href=&quot;https://nodejs.org/docs/latest-v17.x/api/globals.html#abortcontrollersignal&quot;&gt;part&lt;/a&gt; of the native Abort controller.&lt;/p&gt;
&lt;p&gt;On line 8 we define a timeout of 5 seconds and attached it to &lt;code&gt;ac.abort()&lt;/code&gt; call with a setTimeout. This will call abort after 5 seconds of inactivity, given signal is used on line 19 in the &lt;code&gt;rl.question&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Most things remain the same as the above example, the change is in the catch part. Here we check if the code of the error thrown is &lt;code&gt;ABORT_ERR&lt;/code&gt;, in that case, we change the message to show using console the log to be the timeout message. While logging the error object if the code is not &lt;code&gt;ABORT_ERR&lt;/code&gt; we log the whole error object else we log nothing. Other parts of the code stay the same as the above simple example. The above example with timeout can be referenced as a GitHub &lt;a href=&quot;https://github.com/geshan/nodejs-readline/blob/master/readline.js&quot;&gt;file&lt;/a&gt; too.&lt;/p&gt;
&lt;p&gt;Node.js readline can also be used to &lt;a href=&quot;https://geshan.com.np/blog/2021/10/nodejs-read-file-line-by-line/&quot;&gt;read file line by line with Node.js&lt;/a&gt; but the above usage seems better suited.&lt;/p&gt;
&lt;h2 id=&quot;conclusion&quot; tabindex=&quot;-1&quot;&gt;Conclusion &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2022/03/nodejs-readline/#conclusion&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;We saw a basic usage of the Node.js readline module with the new and easy-to-use Promise interface. As mentioned above for smaller Node.js CLI apps the readline native module might be enough but if you are thinking of bigger CLI apps it would be better to use Commander.js or Oclif.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I hope you have learned the basics of using Node.js readline in this step-by-step tutorial. Keep coding!&lt;/p&gt;
&lt;/blockquote&gt;
</content>
	</entry>
	
	<entry>
		<title>How to use MySQL with Docker and Docker compose a beginners guide</title>
		<link href="https://geshan.com.np/blog/2022/02/mysql-docker-compose/"/>
		<updated>2022-02-19T11:27:55Z</updated>
		<id>https://geshan.com.np/blog/2022/02/mysql-docker-compose/</id>
		<content type="html">&lt;p&gt;MySQL is one of the &lt;a href=&quot;https://db-engines.com/en/system/MySQL&quot;&gt;most popular&lt;/a&gt; relational databases of all time. Using MySQL with Docker and docker-compose makes it very easy and fast to test out any changes in any application using MySQL as the database. In this tutorial, we will detail how to use MySQL with Docker and docker-compose step-by-step keeping things easy to comprehend. Let’s get rolling!&lt;/p&gt;
&lt;!-- more --&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/mysql-docker-compose/01mysql-docker-compose.jpg&quot; title=&quot;Use MySQL with Docker and docker-compose easily&quot; alt=&quot;Use MySQL with Docker and docker-compose easily&quot; /&gt;
&lt;h2 id=&quot;table-of-contents&quot; tabindex=&quot;-1&quot;&gt;Table of contents &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2022/02/mysql-docker-compose/#table-of-contents&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2022/02/mysql-docker-compose/#why-use-mysql-with-docker-for-local-development&quot;&gt;Why use MySQL with Docker for local development&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2022/02/mysql-docker-compose/#prerequisites&quot;&gt;Prerequisites&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2022/02/mysql-docker-compose/#run-mysql-with-docker&quot;&gt;Run MySQL with Docker&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2022/02/mysql-docker-compose/#running-mysql-with-docker-compose&quot;&gt;Running MySQL with docker-compose&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2022/02/mysql-docker-compose/#adding-mysql-to-and-existing-node.js-app-using-docker-compose&quot;&gt;Adding MySQL to and existing Node.js app using docker-compose&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2022/02/mysql-docker-compose/#conclusion&quot;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;why-use-mysql-with-docker-for-local-development&quot; tabindex=&quot;-1&quot;&gt;Why use MySQL with Docker for local development &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2022/02/mysql-docker-compose/#why-use-mysql-with-docker-for-local-development&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;There are multiple great reasons to use any database including MySQL with Docker for local development, some of them are as follows:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Using any version of MySQL like 5.6, 5.7, or 8 as per project or any other reason is very easy.&lt;/li&gt;
&lt;li&gt;Usually with docker, if it runs on your machine it will run on another software engineer’s machine, on a staging environment, and on production too, given some compatibility is maintained.&lt;/li&gt;
&lt;li&gt;A new team member can be productive in hours, not days given docker and other tools are set up in an efficient way.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;To know the above reasons in a bit more detail please do read the &lt;a href=&quot;https://geshan.com.np/blog/2018/10/why-use-docker-3-reasons-from-a-development-perspective/&quot;&gt;why use docker&lt;/a&gt; post.&lt;br /&gt;
In the next section, we will list out some good to have things prior to jumping into the code to run MySQL with Docker.&lt;/p&gt;
&lt;h2 id=&quot;prerequisites&quot; tabindex=&quot;-1&quot;&gt;Prerequisites &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2022/02/mysql-docker-compose/#prerequisites&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Before we get our hands dirty with some code and CLI commands, below are some good to have prerequisites:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Basic knowledge of Docker and related commands like docker build, run, execute, etc will be useful for this guide. In the examples, we will use Docker version 20.10.10, build b485636 on a Mac.&lt;/li&gt;
&lt;li&gt;Any prior information about Docker-compose will be very useful, we will use docker-compose version 1.29.2, build 5becea4c in the examples.&lt;/li&gt;
&lt;li&gt;A general understanding of how relational databases work, specifically MySQL will be advantageous.&lt;/li&gt;
&lt;li&gt;For this tutorial, we will use an existing API with &lt;a href=&quot;https://geshan.com.np/blog/2020/11/nodejs-mysql-tutorial/&quot;&gt;Node.js and MySQL&lt;/a&gt; which will replace the remote MySQL with a local MySQL running with Docker and Docker Compose.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Now as you are aware of the prerequisites, we can dive deeper into the CLI commands and any related code.&lt;/p&gt;
&lt;h2 id=&quot;run-mysql-with-docker&quot; tabindex=&quot;-1&quot;&gt;Run MySQL with Docker &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2022/02/mysql-docker-compose/#run-mysql-with-docker&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;For this beginners’ guide, we will use the official MySQL Docker image from &lt;a href=&quot;https://hub.docker.com/_/mysql&quot;&gt;DockerHub&lt;/a&gt;. The official MySQL Docker image does not have an Alpine Linux version, still, the Debian version is also 147 MB which is not too big for a docker image.&lt;/p&gt;
&lt;p&gt;To run the MySQL 8.0 container using the official image, simply run the following command:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;mkdir&lt;/span&gt; /tmp/mysql-data&lt;br /&gt;&lt;span class=&quot;token function&quot;&gt;docker&lt;/span&gt; run --name basic-mysql --rm -v /tmp/mysql-data:/var/lib/mysql -e &lt;span class=&quot;token assign-left variable&quot;&gt;MYSQL_ROOT_PASSWORD&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;ANSKk08aPEDbFjDO -e &lt;span class=&quot;token assign-left variable&quot;&gt;MYSQL_DATABASE&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;testing -p &lt;span class=&quot;token number&quot;&gt;3306&lt;/span&gt;:3306 -it mysql:8.0&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let’s analyze the command we just ran to run MySQL with docker. First, we created a directory called &lt;code&gt;mysql-data&lt;/code&gt; in &lt;code&gt;/tmp&lt;/code&gt; to store the data of MySQL. Then we ran a &lt;code&gt;docker run&lt;/code&gt; command with:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;--name&lt;/code&gt; to name the container &lt;code&gt;basic-mysql&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;--rn&lt;/code&gt; to remove the container when it is stopped&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-v /tmp/mysql-data:/var/lib/mysql&lt;/code&gt; is added to retain the data when the container restarts, it will vanish when the host &lt;a href=&quot;https://www.fosslinux.com/41739/linux-tmp-directory-everything-you-need-to-know.htm&quot;&gt;machine restarts&lt;/a&gt; as it is in &lt;code&gt;/tmp&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-e MYSQL_ROOT_PASSWORD=ANSKk08aPEDbFjDO -e MYSQL_DATABASE=testing&lt;/code&gt; for setting the root user’s password and initializing a database named &lt;code&gt;testing&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-p 3306:3306&lt;/code&gt; maps host port 3306 to container port 3306, the port 3306 is MySQL’s default port.&lt;/li&gt;
&lt;li&gt;&lt;code&gt; -it mysql:8.0&lt;/code&gt; - -it will show all logs and we are using the official MySQL image version 8.0 which will run the Debian flavor.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;It will show and output simialr to below:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token number&quot;&gt;2022&lt;/span&gt;-02-19 &lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt;:31:54+00:00 &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;Note&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;Entrypoint&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;: Entrypoint script &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; MySQL Server &lt;span class=&quot;token number&quot;&gt;8.0&lt;/span&gt;.27-1debian10 started.&lt;br /&gt;&lt;span class=&quot;token number&quot;&gt;2022&lt;/span&gt;-02-19 &lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt;:31:54+00:00 &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;Note&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;Entrypoint&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;: Switching to dedicated user &lt;span class=&quot;token string&quot;&gt;&#39;mysql&#39;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token number&quot;&gt;2022&lt;/span&gt;-02-19 &lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt;:31:54+00:00 &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;Note&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;Entrypoint&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;: Entrypoint script &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; MySQL Server &lt;span class=&quot;token number&quot;&gt;8.0&lt;/span&gt;.27-1debian10 started.&lt;br /&gt;&lt;span class=&quot;token number&quot;&gt;2022&lt;/span&gt;-02-19 &lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt;:31:54+00:00 &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;Note&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;Entrypoint&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;: Initializing database files&lt;br /&gt;&lt;span class=&quot;token number&quot;&gt;2022&lt;/span&gt;-02-19T10:31:54.932929Z &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;System&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;MY-013169&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;Server&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; /usr/sbin/mysqld &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;mysqld &lt;span class=&quot;token number&quot;&gt;8.0&lt;/span&gt;.27&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; initializing of server &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; progress as process &lt;span class=&quot;token number&quot;&gt;44&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token number&quot;&gt;2022&lt;/span&gt;-02-19T10:31:54.942400Z &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;Warning&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;MY-010159&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;Server&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; Setting &lt;span class=&quot;token assign-left variable&quot;&gt;lower_case_table_names&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt; because &lt;span class=&quot;token function&quot;&gt;file&lt;/span&gt; system &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; /var/lib/mysql/ is &lt;span class=&quot;token keyword&quot;&gt;case&lt;/span&gt; insensitive&lt;br /&gt;&lt;span class=&quot;token number&quot;&gt;2022&lt;/span&gt;-02-19T10:31:54.952407Z &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;System&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;MY-013576&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;InnoDB&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; InnoDB initialization has started.&lt;br /&gt;&lt;span class=&quot;token number&quot;&gt;2022&lt;/span&gt;-02-19T10:31:57.114688Z &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;System&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;MY-013577&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;InnoDB&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; InnoDB initialization has ended.&lt;br /&gt;&lt;span class=&quot;token number&quot;&gt;2022&lt;/span&gt;-02-19T10:31:58.994205Z &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;Warning&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;MY-013746&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;Server&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; A deprecated TLS version TLSv1 is enabled &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; channel mysql_main&lt;br /&gt;&lt;span class=&quot;token number&quot;&gt;2022&lt;/span&gt;-02-19T10:31:58.994241Z &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;Warning&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;MY-013746&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;Server&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; A deprecated TLS version TLSv1.1 is enabled &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; channel mysql_main&lt;br /&gt;&lt;span class=&quot;token number&quot;&gt;2022&lt;/span&gt;-02-19T10:31:59.204723Z &lt;span class=&quot;token number&quot;&gt;6&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;Warning&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;MY-010453&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;Server&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; root@localhost is created with an empty password &lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt; Please consider switching off the --initialize-insecure option.&lt;br /&gt;&lt;span class=&quot;token number&quot;&gt;2022&lt;/span&gt;-02-19 &lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt;:32:03+00:00 &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;Note&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;Entrypoint&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;: Database files initialized&lt;br /&gt;&lt;span class=&quot;token number&quot;&gt;2022&lt;/span&gt;-02-19 &lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt;:32:03+00:00 &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;Note&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;Entrypoint&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;: Starting temporary server&lt;br /&gt;mysqld will log errors to /var/lib/mysql/568272f57c6b.err&lt;br /&gt;mysqld is running as pid &lt;span class=&quot;token number&quot;&gt;95&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token number&quot;&gt;2022&lt;/span&gt;-02-19 &lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt;:32:04+00:00 &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;Note&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;Entrypoint&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;: Temporary server started.&lt;br /&gt;Warning: Unable to load &lt;span class=&quot;token string&quot;&gt;&#39;/usr/share/zoneinfo/iso3166.tab&#39;&lt;/span&gt; as &lt;span class=&quot;token function&quot;&gt;time&lt;/span&gt; zone. Skipping it.&lt;br /&gt;Warning: Unable to load &lt;span class=&quot;token string&quot;&gt;&#39;/usr/share/zoneinfo/leap-seconds.list&#39;&lt;/span&gt; as &lt;span class=&quot;token function&quot;&gt;time&lt;/span&gt; zone. Skipping it.&lt;br /&gt;Warning: Unable to load &lt;span class=&quot;token string&quot;&gt;&#39;/usr/share/zoneinfo/zone.tab&#39;&lt;/span&gt; as &lt;span class=&quot;token function&quot;&gt;time&lt;/span&gt; zone. Skipping it.&lt;br /&gt;Warning: Unable to load &lt;span class=&quot;token string&quot;&gt;&#39;/usr/share/zoneinfo/zone1970.tab&#39;&lt;/span&gt; as &lt;span class=&quot;token function&quot;&gt;time&lt;/span&gt; zone. Skipping it.&lt;br /&gt;&lt;span class=&quot;token number&quot;&gt;2022&lt;/span&gt;-02-19 &lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt;:32:08+00:00 &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;Note&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;Entrypoint&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;: Creating database testing&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token number&quot;&gt;2022&lt;/span&gt;-02-19 &lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt;:32:08+00:00 &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;Note&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;Entrypoint&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;: Stopping temporary server&lt;br /&gt;&lt;span class=&quot;token number&quot;&gt;2022&lt;/span&gt;-02-19 &lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt;:32:10+00:00 &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;Note&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;Entrypoint&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;: Temporary server stopped&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token number&quot;&gt;2022&lt;/span&gt;-02-19 &lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt;:32:10+00:00 &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;Note&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;Entrypoint&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;: MySQL init process done. Ready &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; start up.&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token number&quot;&gt;2022&lt;/span&gt;-02-19T10:32:10.353185Z &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;System&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;MY-010116&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;Server&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; /usr/sbin/mysqld &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;mysqld &lt;span class=&quot;token number&quot;&gt;8.0&lt;/span&gt;.27&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; starting as process &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token number&quot;&gt;2022&lt;/span&gt;-02-19T10:32:10.361054Z &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;Warning&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;MY-010159&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;Server&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; Setting &lt;span class=&quot;token assign-left variable&quot;&gt;lower_case_table_names&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt; because &lt;span class=&quot;token function&quot;&gt;file&lt;/span&gt; system &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; /var/lib/mysql/ is &lt;span class=&quot;token keyword&quot;&gt;case&lt;/span&gt; insensitive&lt;br /&gt;&lt;span class=&quot;token number&quot;&gt;2022&lt;/span&gt;-02-19T10:32:10.379917Z &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;System&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;MY-013576&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;InnoDB&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; InnoDB initialization has started.&lt;br /&gt;&lt;span class=&quot;token number&quot;&gt;2022&lt;/span&gt;-02-19T10:32:11.007492Z &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;System&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;MY-013577&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;InnoDB&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; InnoDB initialization has ended.&lt;br /&gt;&lt;span class=&quot;token number&quot;&gt;2022&lt;/span&gt;-02-19T10:32:11.362057Z &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;Warning&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;MY-013746&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;Server&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; A deprecated TLS version TLSv1 is enabled &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; channel mysql_main&lt;br /&gt;&lt;span class=&quot;token number&quot;&gt;2022&lt;/span&gt;-02-19T10:32:11.362123Z &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;Warning&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;MY-013746&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;Server&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; A deprecated TLS version TLSv1.1 is enabled &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; channel mysql_main&lt;br /&gt;&lt;span class=&quot;token number&quot;&gt;2022&lt;/span&gt;-02-19T10:32:11.366535Z &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;Warning&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;MY-010068&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;Server&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; CA certificate ca.pem is self signed.&lt;br /&gt;&lt;span class=&quot;token number&quot;&gt;2022&lt;/span&gt;-02-19T10:32:11.366644Z &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;System&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;MY-013602&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;Server&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; Channel mysql_main configured to support TLS. Encrypted connections are now supported &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; this channel.&lt;br /&gt;&lt;span class=&quot;token number&quot;&gt;2022&lt;/span&gt;-02-19T10:32:11.372769Z &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;Warning&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;MY-011810&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;Server&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; Insecure configuration &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; --pid-file: Location &lt;span class=&quot;token string&quot;&gt;&#39;/var/run/mysqld&#39;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; the path is accessible to all OS users. Consider choosing a different directory.&lt;br /&gt;&lt;span class=&quot;token number&quot;&gt;2022&lt;/span&gt;-02-19T10:32:11.435797Z &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;System&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;MY-011323&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;Server&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; X Plugin ready &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; connections. Bind-address: &lt;span class=&quot;token string&quot;&gt;&#39;::&#39;&lt;/span&gt; port: &lt;span class=&quot;token number&quot;&gt;33060&lt;/span&gt;, socket: /var/run/mysqld/mysqlx.sock&lt;br /&gt;&lt;span class=&quot;token number&quot;&gt;2022&lt;/span&gt;-02-19T10:32:11.435995Z &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;System&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;MY-010931&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;Server&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; /usr/sbin/mysqld: ready &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; connections. Version: &lt;span class=&quot;token string&quot;&gt;&#39;8.0.27&#39;&lt;/span&gt;  socket: &lt;span class=&quot;token string&quot;&gt;&#39;/var/run/mysqld/mysqld.sock&#39;&lt;/span&gt;  port: &lt;span class=&quot;token number&quot;&gt;3306&lt;/span&gt;  MySQL Community Server - GPL.&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As the MySQL server is running we can execute the MySQL command inside the container with:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;docker&lt;/span&gt; &lt;span class=&quot;token builtin class-name&quot;&gt;exec&lt;/span&gt; -it basic-mysql /bin/bash&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;#once inside the container &lt;/span&gt;&lt;br /&gt;mysql -uroot -p&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;#put/paste the password, and once inside MySQL CLI run&lt;/span&gt;&lt;br /&gt;show databases&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It will look like the below:&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/mysql-docker-compose/02mysql-docker.jpg&quot; title=&quot;Use MySQL with Docker going inside the container&quot; alt=&quot;Use MySQL with Docker going inside the container&quot; /&gt;
&lt;p&gt;We can stop the container with &lt;code&gt;docker stop basic-mysql&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Even though that wasn’t too hard I would not consider it easy as well as the command’s parameters were not simple to remember. Another aspect is we ran MySQL in isolation, there is no link between the Quotes API Node.js application and the MySQL container.  This is where the declarative nature of docker-compose comes in very handy as we will see in the next section.&lt;/p&gt;
&lt;h2 id=&quot;running-mysql-with-docker-compose&quot; tabindex=&quot;-1&quot;&gt;Running MySQL with docker-compose &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2022/02/mysql-docker-compose/#running-mysql-with-docker-compose&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;To run the same MySQL 8.0 with docker-compose we will create a new docker-compose-mysql-only.yml file, with the following contents:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;version: &lt;span class=&quot;token string&quot;&gt;&#39;3.8&#39;&lt;/span&gt;&lt;br /&gt;services:&lt;br /&gt;  db:&lt;br /&gt;    image: mysql:8.0&lt;br /&gt;    cap_add:&lt;br /&gt;      - SYS_NICE&lt;br /&gt;    restart: always&lt;br /&gt;    environment:&lt;br /&gt;      - &lt;span class=&quot;token assign-left variable&quot;&gt;MYSQL_DATABASE&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;quotes&lt;br /&gt;      - &lt;span class=&quot;token assign-left variable&quot;&gt;MYSQL_ROOT_PASSWORD&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;mauFJcuf5dhRMQrjj&lt;br /&gt;    ports:&lt;br /&gt;      - &lt;span class=&quot;token string&quot;&gt;&#39;3306:3306&#39;&lt;/span&gt;&lt;br /&gt;    volumes:&lt;br /&gt;      - db:/var/lib/mysql&lt;br /&gt;      - ./db/init.sql:/docker-entrypoint-initdb.d/init.sql&lt;br /&gt;volumes:&lt;br /&gt;  db:&lt;br /&gt;    driver: &lt;span class=&quot;token builtin class-name&quot;&gt;local&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The above docker-compose file has the following things to comprehend:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;It uses the docker-compose file &lt;a href=&quot;https://docs.docker.com/compose/compose-file/compose-file-v3/&quot;&gt;version 3.8&lt;/a&gt;, one of the latest ones.&lt;/li&gt;
&lt;li&gt;Consequently, we define&lt;code&gt; db&lt;/code&gt; as a service, each &lt;a href=&quot;https://docs.docker.com/compose/compose-file/compose-file-v3/#service-configuration-reference&quot;&gt;service&lt;/a&gt; will be equivalent to a new docker run command&lt;/li&gt;
&lt;li&gt;Subsequently, we point docker-compose to use the official MySQL 8.0 image for this DB service.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;cap_add&lt;/code&gt; set to &lt;code&gt;SYS_NICE&lt;/code&gt; &lt;a href=&quot;https://stackoverflow.com/a/55706057&quot;&gt;suppresses&lt;/a&gt; some not useful error messages.&lt;/li&gt;
&lt;li&gt;Next up we ask docker-compose to always restart this container if it fails.&lt;/li&gt;
&lt;li&gt;After that we add 2 environment variables for the MySQL database and the root user’s password. As per need, we can add another user to give it less privilege with other env vars.&lt;/li&gt;
&lt;li&gt;Then, we map the host port &lt;code&gt;3306&lt;/code&gt; to the container port &lt;code&gt;3306&lt;/code&gt; as the MySQL server is running on container port &lt;code&gt;3306&lt;/code&gt;. Depending on the preference the host port may be changed.&lt;/li&gt;
&lt;li&gt;Then we add 2 volumes, first one is the DB volume mapped to the below volumes &lt;code&gt;db&lt;/code&gt;. Which basically tells docker and docker-compose to manage the volume for us. Next, we add an &lt;code&gt;init.sql&lt;/code&gt; script which will &lt;a href=&quot;https://github.com/docker-library/docs/tree/master/mysql#initializing-a-fresh-instance&quot;&gt;initialize&lt;/a&gt; our &lt;code&gt;quotes&lt;/code&gt; database with the given SQL file.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;We can start the MySQL container this time with docker-compose using:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;docker-compose&lt;/span&gt; -f docker-compose-mysql-only.yml up&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It will show an output like below:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;Starting nodejs-mysql_db_1 &lt;span class=&quot;token punctuation&quot;&gt;..&lt;/span&gt;. &lt;span class=&quot;token keyword&quot;&gt;done&lt;/span&gt;&lt;br /&gt;Attaching to nodejs-mysql_db_1&lt;br /&gt;db_1  &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2022&lt;/span&gt;-02-19 &lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt;:55:55+00:00 &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;Note&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;Entrypoint&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;: Entrypoint script &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; MySQL Server &lt;span class=&quot;token number&quot;&gt;8.0&lt;/span&gt;.27-1debian10 started.&lt;br /&gt;db_1  &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2022&lt;/span&gt;-02-19 &lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt;:55:56+00:00 &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;Note&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;Entrypoint&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;: Switching to dedicated user &lt;span class=&quot;token string&quot;&gt;&#39;mysql&#39;&lt;/span&gt;&lt;br /&gt;db_1  &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2022&lt;/span&gt;-02-19 &lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt;:55:56+00:00 &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;Note&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;Entrypoint&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;: Entrypoint script &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; MySQL Server &lt;span class=&quot;token number&quot;&gt;8.0&lt;/span&gt;.27-1debian10 started.&lt;br /&gt;db_1  &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2022&lt;/span&gt;-02-19T10:55:56.381394Z &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;System&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;MY-010116&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;Server&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; /usr/sbin/mysqld &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;mysqld &lt;span class=&quot;token number&quot;&gt;8.0&lt;/span&gt;.27&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; starting as process &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;br /&gt;db_1  &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2022&lt;/span&gt;-02-19T10:55:56.392419Z &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;System&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;MY-013576&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;InnoDB&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; InnoDB initialization has started.&lt;br /&gt;db_1  &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2022&lt;/span&gt;-02-19T10:55:56.878693Z &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;System&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;MY-013577&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;InnoDB&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; InnoDB initialization has ended.&lt;br /&gt;db_1  &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2022&lt;/span&gt;-02-19T10:55:57.258522Z &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;System&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;MY-010229&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;Server&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; Starting XA crash recovery&lt;span class=&quot;token punctuation&quot;&gt;..&lt;/span&gt;.&lt;br /&gt;db_1  &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2022&lt;/span&gt;-02-19T10:55:57.268530Z &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;System&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;MY-010232&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;Server&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; XA crash recovery finished.&lt;br /&gt;db_1  &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2022&lt;/span&gt;-02-19T10:55:57.305749Z &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;Warning&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;MY-013746&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;Server&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; A deprecated TLS version TLSv1 is enabled &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; channel mysql_main&lt;br /&gt;db_1  &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2022&lt;/span&gt;-02-19T10:55:57.305945Z &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;Warning&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;MY-013746&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;Server&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; A deprecated TLS version TLSv1.1 is enabled &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; channel mysql_main&lt;br /&gt;db_1  &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2022&lt;/span&gt;-02-19T10:55:57.309232Z &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;Warning&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;MY-010068&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;Server&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; CA certificate ca.pem is self signed.&lt;br /&gt;db_1  &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2022&lt;/span&gt;-02-19T10:55:57.309330Z &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;System&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;MY-013602&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;Server&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; Channel mysql_main configured to support TLS. Encrypted connections are now supported &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; this channel.&lt;br /&gt;db_1  &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2022&lt;/span&gt;-02-19T10:55:57.313177Z &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;Warning&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;MY-011810&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;Server&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; Insecure configuration &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; --pid-file: Location &lt;span class=&quot;token string&quot;&gt;&#39;/var/run/mysqld&#39;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; the path is accessible to all OS users. Consider choosing a different directory.&lt;br /&gt;db_1  &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2022&lt;/span&gt;-02-19T10:55:57.374334Z &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;System&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;MY-011323&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;Server&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; X Plugin ready &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; connections. Bind-address: &lt;span class=&quot;token string&quot;&gt;&#39;::&#39;&lt;/span&gt; port: &lt;span class=&quot;token number&quot;&gt;33060&lt;/span&gt;, socket: /var/run/mysqld/mysqlx.sock&lt;br /&gt;db_1  &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2022&lt;/span&gt;-02-19T10:55:57.374405Z &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;System&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;MY-010931&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;Server&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; /usr/sbin/mysqld: ready &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; connections. Version: &lt;span class=&quot;token string&quot;&gt;&#39;8.0.27&#39;&lt;/span&gt;  socket: &lt;span class=&quot;token string&quot;&gt;&#39;/var/run/mysqld/mysqld.sock&#39;&lt;/span&gt;  port: &lt;span class=&quot;token number&quot;&gt;3306&lt;/span&gt;  MySQL Community Server - GPL.&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The output is similar but this time being declarative with docker-compose, running MySQL inside a docker container was a much easier command.&lt;br /&gt;
For your reference, the &lt;a href=&quot;https://github.com/geshan/nodejs-mysql/pull/10/files&quot;&gt;PR&lt;/a&gt; to add this file is also available. Next up we will link up the MySQL container with our existing Node.js app.&lt;/p&gt;
&lt;h2 id=&quot;adding-mysql-to-and-existing-node.js-app-using-docker-compose&quot; tabindex=&quot;-1&quot;&gt;Adding MySQL to and existing Node.js app using docker-compose &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2022/02/mysql-docker-compose/#adding-mysql-to-and-existing-node.js-app-using-docker-compose&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;At this point, we have run MySQL with just docker and then with docker-compose which was much easier than the previous long command. Still, one piece of the puzzle is missing, the piece to link the MySQL container with an application. In our case, it will be the Node.js MySQL API for Quotes.&lt;/p&gt;
&lt;p&gt;For this beginner’s tutorial we will add a new &lt;code&gt;docker-compose file&lt;/code&gt; with the following contents:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;version: &lt;span class=&quot;token string&quot;&gt;&#39;3.8&#39;&lt;/span&gt;&lt;br /&gt;services:&lt;br /&gt;  db:&lt;br /&gt;    image: mysql:8.0&lt;br /&gt;    cap_add:&lt;br /&gt;      - SYS_NICE&lt;br /&gt;    restart: always&lt;br /&gt;    environment:&lt;br /&gt;      - &lt;span class=&quot;token assign-left variable&quot;&gt;MYSQL_DATABASE&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;quotes&lt;br /&gt;      - &lt;span class=&quot;token assign-left variable&quot;&gt;MYSQL_ROOT_PASSWORD&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;mauFJcuf5dhRMQrjj&lt;br /&gt;    ports:&lt;br /&gt;      - &lt;span class=&quot;token string&quot;&gt;&#39;3306:3306&#39;&lt;/span&gt;&lt;br /&gt;    volumes:&lt;br /&gt;      - db:/var/lib/mysql&lt;br /&gt;      - ./db/init.sql:/docker-entrypoint-initdb.d/init.sql&lt;br /&gt;  api:&lt;br /&gt;    container_name: quotes-api&lt;br /&gt;    build:&lt;br /&gt;      context: ./&lt;br /&gt;      target: production&lt;br /&gt;    image: quotes-api&lt;br /&gt;    depends_on:&lt;br /&gt;      - db&lt;br /&gt;    ports:&lt;br /&gt;      - &lt;span class=&quot;token number&quot;&gt;3000&lt;/span&gt;:3000&lt;br /&gt;    environment:&lt;br /&gt;      NODE_ENV: production&lt;br /&gt;      DB_HOST: db&lt;br /&gt;      DB_PORT: &lt;span class=&quot;token number&quot;&gt;3306&lt;/span&gt;&lt;br /&gt;      DB_USER: root&lt;br /&gt;      DB_PASSWORD: mauFJcuf5dhRMQrjj&lt;br /&gt;      DB_NAME: quotes&lt;br /&gt;    links:&lt;br /&gt;      - db&lt;br /&gt;    volumes:&lt;br /&gt;      - ./:/src&lt;br /&gt;volumes:&lt;br /&gt;  db:&lt;br /&gt;    driver: &lt;span class=&quot;token builtin class-name&quot;&gt;local&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This docker-compose.yml file looks like a longer version of the above file. The main differences include:&lt;/p&gt;
&lt;p&gt;Adding the API service which uses the &lt;code&gt;Dockerfile&lt;/code&gt; included in the project. We will build the &lt;code&gt;API&lt;/code&gt; service with the target production. As per your interest, you can read more about &lt;a href=&quot;https://geshan.com.np/blog/2019/11/how-to-use-docker-multi-stage-build/&quot;&gt;docker multi-stage builds&lt;/a&gt; which explains the use of build target.&lt;/p&gt;
&lt;p&gt;Next up, we indicate to docker-compose that the API depends on the DB container. After that, we map the host port &lt;code&gt;3000&lt;/code&gt; to the container port &lt;code&gt;3000&lt;/code&gt; as the Express.js app with Node.js runs on port &lt;code&gt;3000&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Subsequently, we set all the needed environment variables to that the Node.js app connects to to the MySQL database running inside the container without problems. After that, we map the local file in &lt;code&gt;./&lt;/code&gt; to &lt;code&gt;./src&lt;/code&gt; in the container so that all the file changes are reflected inside the container. Next, we link both containers so that the API container can communicate with the DB container.&lt;/p&gt;
&lt;p&gt;This &lt;code&gt;docker-compose.yml&lt;/code&gt; file is available as a &lt;a href=&quot;https://github.com/geshan/nodejs-mysql/pull/12/files#diff-e45e45baeda1c1e73482975a664062aa56f20c03dd9d64a827aba57775bed0d3&quot;&gt;pull request&lt;/a&gt; for your reference.&lt;/p&gt;
&lt;p&gt;When we run the application with &lt;code&gt;docker-compose up&lt;/code&gt; we will see output like the below:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;Starting nodejs-mysql_db_1 &lt;span class=&quot;token punctuation&quot;&gt;..&lt;/span&gt;. &lt;span class=&quot;token keyword&quot;&gt;done&lt;/span&gt;&lt;br /&gt;Starting quotes-api        &lt;span class=&quot;token punctuation&quot;&gt;..&lt;/span&gt;. &lt;span class=&quot;token keyword&quot;&gt;done&lt;/span&gt;&lt;br /&gt;Attaching to nodejs-mysql_db_1, quotes-api&lt;br /&gt;db_1   &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2022&lt;/span&gt;-02-19 &lt;span class=&quot;token number&quot;&gt;11&lt;/span&gt;:08:36+00:00 &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;Note&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;Entrypoint&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;: Entrypoint script &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; MySQL Server &lt;span class=&quot;token number&quot;&gt;8.0&lt;/span&gt;.27-1debian10 started.&lt;br /&gt;db_1   &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2022&lt;/span&gt;-02-19 &lt;span class=&quot;token number&quot;&gt;11&lt;/span&gt;:08:36+00:00 &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;Note&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;Entrypoint&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;: Switching to dedicated user &lt;span class=&quot;token string&quot;&gt;&#39;mysql&#39;&lt;/span&gt;&lt;br /&gt;db_1   &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2022&lt;/span&gt;-02-19 &lt;span class=&quot;token number&quot;&gt;11&lt;/span&gt;:08:36+00:00 &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;Note&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;Entrypoint&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;: Entrypoint script &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; MySQL Server &lt;span class=&quot;token number&quot;&gt;8.0&lt;/span&gt;.27-1debian10 started.&lt;br /&gt;db_1   &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2022&lt;/span&gt;-02-19T11:08:36.469670Z &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;System&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;MY-010116&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;Server&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; /usr/sbin/mysqld &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;mysqld &lt;span class=&quot;token number&quot;&gt;8.0&lt;/span&gt;.27&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; starting as process &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;br /&gt;db_1   &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2022&lt;/span&gt;-02-19T11:08:36.478201Z &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;System&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;MY-013576&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;InnoDB&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; InnoDB initialization has started.&lt;br /&gt;db_1   &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2022&lt;/span&gt;-02-19T11:08:36.830802Z &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;System&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;MY-013577&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;InnoDB&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; InnoDB initialization has ended.&lt;br /&gt;db_1   &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2022&lt;/span&gt;-02-19T11:08:37.004513Z &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;System&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;MY-010229&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;Server&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; Starting XA crash recovery&lt;span class=&quot;token punctuation&quot;&gt;..&lt;/span&gt;.&lt;br /&gt;db_1   &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2022&lt;/span&gt;-02-19T11:08:37.015831Z &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;System&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;MY-010232&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;Server&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; XA crash recovery finished.&lt;br /&gt;db_1   &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2022&lt;/span&gt;-02-19T11:08:37.063455Z &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;Warning&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;MY-013746&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;Server&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; A deprecated TLS version TLSv1 is enabled &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; channel mysql_main&lt;br /&gt;db_1   &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2022&lt;/span&gt;-02-19T11:08:37.063521Z &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;Warning&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;MY-013746&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;Server&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; A deprecated TLS version TLSv1.1 is enabled &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; channel mysql_main&lt;br /&gt;db_1   &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2022&lt;/span&gt;-02-19T11:08:37.064770Z &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;Warning&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;MY-010068&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;Server&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; CA certificate ca.pem is self signed.&lt;br /&gt;db_1   &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2022&lt;/span&gt;-02-19T11:08:37.064845Z &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;System&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;MY-013602&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;Server&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; Channel mysql_main configured to support TLS. Encrypted connections are now supported &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; this channel.&lt;br /&gt;db_1   &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2022&lt;/span&gt;-02-19T11:08:37.068935Z &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;Warning&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;MY-011810&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;Server&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; Insecure configuration &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; --pid-file: Location &lt;span class=&quot;token string&quot;&gt;&#39;/var/run/mysqld&#39;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; the path is accessible to all OS users. Consider choosing a different directory.&lt;br /&gt;db_1   &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2022&lt;/span&gt;-02-19T11:08:37.109788Z &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;System&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;MY-011323&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;Server&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; X Plugin ready &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; connections. Bind-address: &lt;span class=&quot;token string&quot;&gt;&#39;::&#39;&lt;/span&gt; port: &lt;span class=&quot;token number&quot;&gt;33060&lt;/span&gt;, socket: /var/run/mysqld/mysqlx.sock&lt;br /&gt;db_1   &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2022&lt;/span&gt;-02-19T11:08:37.109836Z &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;System&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;MY-010931&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;Server&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; /usr/sbin/mysqld: ready &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; connections. Version: &lt;span class=&quot;token string&quot;&gt;&#39;8.0.27&#39;&lt;/span&gt;  socket: &lt;span class=&quot;token string&quot;&gt;&#39;/var/run/mysqld/mysqld.sock&#39;&lt;/span&gt;  port: &lt;span class=&quot;token number&quot;&gt;3306&lt;/span&gt;  MySQL Community Server - GPL.&lt;br /&gt;quotes-api &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;br /&gt;quotes-api &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; nodejs-mysql@0.0.0 start /src&lt;br /&gt;quotes-api &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;node&lt;/span&gt; ./bin/www&lt;br /&gt;quotes-api &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If we hit the browser with &lt;code&gt;http://localhost:3000/quotes&lt;/code&gt; we can see something like the following:&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/mysql-docker-compose/03mysql-docker-nodejs.jpg&quot; title=&quot;Use MySQL with Docker with an existing Node.js application&quot; alt=&quot;Use MySQL with Docker with an existing Node.js application&quot; /&gt;
&lt;p&gt;Great! Our Node.js Express Quotes API is communicating properly with the local MySQL running inside the docker container and connected with docker-compose. As the data was put from the &lt;code&gt;init.sql&lt;/code&gt; script the quotes are available in the API response.&lt;/p&gt;
&lt;p&gt;Check out this step-by-step tutorial if you want to run &lt;a href=&quot;https://geshan.com.np/blog/2021/12/docker-postgres/&quot;&gt;Postgres with Docker&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;conclusion&quot; tabindex=&quot;-1&quot;&gt;Conclusion &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2022/02/mysql-docker-compose/#conclusion&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In this guide, we saw how to run MySQL with docker run, then docker-compose, and finally linked up with a Node.js application step-by-step.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I hope this tutorial has helped you understand how to run MySQL with Docker and docker-compose.&lt;/p&gt;
&lt;/blockquote&gt;
</content>
	</entry>
	
	<entry>
		<title>3 efficient ways to generate UUID in Node.js</title>
		<link href="https://geshan.com.np/blog/2022/01/nodejs-uuid/"/>
		<updated>2022-01-09T11:57:55Z</updated>
		<id>https://geshan.com.np/blog/2022/01/nodejs-uuid/</id>
		<content type="html">&lt;p&gt;Universally Unique Identifier (UUID) is very useful. In Node.js there are many ways to generate a UUID. One of them is with a native module and others are using NPM packages. UUID can be very useful as reliable unique identifiers. In this post, you will learn how to generate a UUID using Node.js and briefly understand when and why to use them. Let’s get started!&lt;/p&gt;
&lt;!-- more --&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/nodejs-uuid/01nodejs-uuid.jpg&quot; title=&quot;How to generate UUID with Node.js&quot; alt=&quot;How to generate UUID with Node.js&quot; /&gt;
&lt;h2 id=&quot;table-of-contents&quot; tabindex=&quot;-1&quot;&gt;Table of contents &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2022/01/nodejs-uuid/#table-of-contents&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2022/01/nodejs-uuid/#prerequisites&quot;&gt;Prerequisites&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2022/01/nodejs-uuid/#when-to-use-nodejs-uuid&quot;&gt;When to use Node.js UUID&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2022/01/nodejs-uuid/#get-your-competitor%E2%80%99s-order-volume-example&quot;&gt;Get your competitor’s order volume example&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2022/01/nodejs-uuid/#hide-your-autoincrement-id&quot;&gt;Hide your autoincrement ID&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2022/01/nodejs-uuid/#methods-to-generate-uuid-in-node.js&quot;&gt;Methods to generate UUID in Node.js&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2022/01/nodejs-uuid/#nodejs-uuid-with-crypto-module&quot;&gt;Node.js UUID with Crypto module&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2022/01/nodejs-uuid/#uuid-npm-package&quot;&gt;UUID NPM Package&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2022/01/nodejs-uuid/#nano-id-to-generate-uuid-using-node.js&quot;&gt;Nano ID to generate UUID using Node.js&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2022/01/nodejs-uuid/#quick-comparison&quot;&gt;Quick comparison&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2022/01/nodejs-uuid/#conclusion&quot;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;prerequisites&quot; tabindex=&quot;-1&quot;&gt;Prerequisites &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2022/01/nodejs-uuid/#prerequisites&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Prior to jumping into the code, below are some of the things best to have in order to run the code examples in the later sections.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;You will need Node.js working on your machine and some knowledge of how to work with Node.js is essential. The latest LTS version of Node.js is expected which is 16 at the time of writing this.&lt;/li&gt;
&lt;li&gt;Able to use NPM to install some NPM modules would be very helpful&lt;/li&gt;
&lt;li&gt;Any prior knowledge of unique IDs and their usage will be beneficial but not essential.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Given we have that mentioned, in the next section we will look into why and when to use a UUID.&lt;/p&gt;
&lt;h2 id=&quot;when-to-use-node.js-uuid&quot; tabindex=&quot;-1&quot;&gt;When to use Node.js UUID &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2022/01/nodejs-uuid/#when-to-use-node.js-uuid&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;UUID is a great way to hide sequential database IDs. They can also be used to act as a hash which can be decoded back to an integer or other identifier. A sequential auto-increment ID can reveal much more than you intended. There are other great usages of UUID but hiding the autoincrement ID stands out in my opinion.&lt;/p&gt;
&lt;h3 id=&quot;get-your-competitor%E2%80%99s-order-volume-example&quot; tabindex=&quot;-1&quot;&gt;Get your competitor’s order volume example &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2022/01/nodejs-uuid/#get-your-competitor%E2%80%99s-order-volume-example&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;For example, you have an e-commerce website and you have a fierce competitor. You have found out that the order ID used by your competitor is an autoincrement integer primary key. Now to know the order volume of your competitor all you need to do is order on the first day of the month and the last day of the month.&lt;/p&gt;
&lt;p&gt;If the order ID on the first day of the month is 100020 and the order ID on the last day of the month is 111050. You can quickly do the math that your competitor has (111050-100020) 11030 orders in 30 days. Averaging at 367.66 orders per day, you can easily do the math for each week.&lt;/p&gt;
&lt;p&gt;Just with the order id which is an autoincrement integer your competitor, possibly unknowingly is giving out a vital business metric to anyone who can do some due diligence. That is why exposing auto-increment IDs is bad. The same example can be applied for customer ID or shipment ID or any other integer identifier that increments by 1.&lt;/p&gt;
&lt;h3 id=&quot;hide-your-autoincrement-id&quot; tabindex=&quot;-1&quot;&gt;Hide your autoincrement ID &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2022/01/nodejs-uuid/#hide-your-autoincrement-id&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Baseline, whenever you need to hide your autoincerment ID it is best to use a random number or pattern that is hard if not impossible to guess. Or you can opt to use an UUID. If you want to read more about UUID feel free to read the wiki page which explains &lt;a href=&quot;https://en.wikipedia.org/wiki/Universally_unique_identifier#Version_4_(random)&quot;&gt;UUID4&lt;/a&gt; too.&lt;/p&gt;
&lt;p&gt;If you are interested in doing other things with Node.js, please do browse &lt;a href=&quot;https://geshan.com.np/blog/2021/10/nodejs-read-file-line-by-line/&quot;&gt;reading file line by line with Node.js&lt;/a&gt;. Using &lt;a href=&quot;https://geshan.com.np/blog/2021/02/nodemon/&quot;&gt;nodemon&lt;/a&gt; with these code examples will help too.&lt;/p&gt;
&lt;p&gt;In the consequent part, you will learn 3 methods to generate a UUD in Node.js regardless of any framework you use.&lt;/p&gt;
&lt;h2 id=&quot;methods-to-generate-uuid-in-node.js&quot; tabindex=&quot;-1&quot;&gt;Methods to generate UUID in Node.js &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2022/01/nodejs-uuid/#methods-to-generate-uuid-in-node.js&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;There are multiple ways to generate at UUID in Node.js. We will discuss one native way to do it and two NPM packages that can do it. There are of course a &lt;a href=&quot;https://www.npmjs.com/search?q=uuid&quot;&gt;lot of&lt;/a&gt; other NPM packages that can perform that task but we will see code examples of the 2 most popular options.&lt;/p&gt;
&lt;h3 id=&quot;node.js-uuid-with-crypto-module&quot; tabindex=&quot;-1&quot;&gt;Node.js UUID with Crypto module &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2022/01/nodejs-uuid/#node.js-uuid-with-crypto-module&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;crypto&lt;/code&gt; module was added from Node.js 14.17.0. It provides cryptographic functionally for multiple methods and algorithms like OpenSSL’s hash, HMAC, cipher. It also provides a method called &lt;a href=&quot;https://nodejs.org/docs/latest-v14.x/api/crypto.html#crypto_crypto_randomuuid_options&quot;&gt;randomUUID&lt;/a&gt; to generate UUID in Node.js without instaling any new NPM module.&lt;/p&gt;
&lt;p&gt;The method takes an options object that can have a &lt;code&gt;disableEntropyCache&lt;/code&gt; boolean value that defaults to values. When it is set to &lt;code&gt;true&lt;/code&gt; it doesn’t use the cache on the UUID generation. Below is a code example of Cryto module’s randomUUID function:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; crypto &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;crypto&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;crypto&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;randomUUID&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can run the above command in a file named &lt;code&gt;uuid-crypto.js&lt;/code&gt; with &lt;code&gt;node uuid-crypto.js&lt;/code&gt; which will give an output like below:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;node&lt;/span&gt; uuid-crypto.js &lt;br /&gt;00a6fa25-df29-4701-9077-557932591766&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As this is a native module, we did not need any package.json file or npm commands. This can also be easily run on the CLI with &lt;code&gt;node -i&lt;/code&gt; like the following:&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/nodejs-uuid/02nodejs-uuid-crypto.jpg&quot; title=&quot;Generate UUID with Node.js native crypto module&quot; alt=&quot;Generate UUID with Node.js native crypto module&quot; /&gt;
&lt;p&gt;In the consequent part, you will learn how to use the UUID npm package to generate a UUID in Node.js.&lt;/p&gt;
&lt;h3 id=&quot;uuid-npm-package&quot; tabindex=&quot;-1&quot;&gt;UUID NPM Package &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2022/01/nodejs-uuid/#uuid-npm-package&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;In addition to the native crypto module, you can surely use other NPM packages. The most popular NPM package to generate UUID is &lt;a href=&quot;https://github.com/uuidjs/uuid&quot;&gt;uuid&lt;/a&gt;. Of course, an NPM package will be needed if your application is in Node version 14.16 or below. UUID can be used in Node.js 10 and 12 too. It also supports UUID versions 1,3,4 and 5.&lt;/p&gt;
&lt;p&gt;To install the UUID npm package, you can run &lt;code&gt;npm install —save uuid&lt;/code&gt; given your project is set up with NPM and has the package.json and relevant lock file. You can quickly try out the UUIDs generated by this package with the code below named in a file &lt;code&gt;uuid-uuid.js&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; uuid &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;uuid&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;Here is a test v1 uuid: &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;uuid&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;v1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;Here is a test v4 uuid: &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;uuid&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;v4&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;When you run the file on the CLI with &lt;code&gt;node uuid-uuid.js&lt;/code&gt; you will get an output similar to the below:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;node&lt;/span&gt; uuid-uuid.js&lt;br /&gt;Here is a &lt;span class=&quot;token builtin class-name&quot;&gt;test&lt;/span&gt; v1 uuid: 60b40630-713c-11ec-8cff-7f82f42f57ce&lt;br /&gt;Here is a &lt;span class=&quot;token builtin class-name&quot;&gt;test&lt;/span&gt; v4 uuid: aceaa425-7769-4ad7-af6b-422d25f23be9&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That we pretty easy right? And you can choose which version of UUID you want to use. Version 1 is timestamp-based and version 4 is random.&lt;/p&gt;
&lt;p&gt;Consequently, we will use the Nono ID NPM package to generate UUID with Node.js.&lt;/p&gt;
&lt;h2 id=&quot;nano-id-to-generate-uuid-using-node.js&quot; tabindex=&quot;-1&quot;&gt;Nano ID to generate UUID using Node.js &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2022/01/nodejs-uuid/#nano-id-to-generate-uuid-using-node.js&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/ai/nanoid&quot;&gt;Nono ID&lt;/a&gt; is another popular NPM package used to generate UUID in Node.js. It brands itself as “A tiny, secure, URL-friendly, unique string ID generator for JavaScript.”. It is supposedly 2 times faster than UUID and smaller. It is also ported to 20 programming languages.&lt;/p&gt;
&lt;p&gt;Similar to installing any other NPM package you can install Nano ID by executing &lt;code&gt;npm install --save nanoid&lt;/code&gt;. Below is the code example of generating a couple of UUIDs with Node.js using the Nano ID package:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; Nanoid &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;nanoid&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; NanoidAsync &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;nanoid/async&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;UUID with Nano ID sync: &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;Nanoid&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;nanoid&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; nanoId &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; NanoidAsync&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;nanoid&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;UUID with Nano ID async: &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;nanoId&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The first example is using the Nano ID packing in a sync way and the second one uses it in an Async way. Using ES6 import might have made it a bit easier to read, you can check out the ES6 import based examples on the Nano ID Github &lt;a href=&quot;https://github.com/ai/nanoid#api&quot;&gt;readme&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Given the file is saved as &lt;code&gt;uuid-nanoid.js&lt;/code&gt;, you can run the above example with &lt;code&gt;node uuid-nanoid.js&lt;/code&gt; which will yield an output similar to the following:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;node&lt;/span&gt; uuid-nanoid.js&lt;br /&gt;UUID with Nano ID sync: yWuImr95L9rj0y74itnSC&lt;br /&gt;UUID with Nano ID async: UyK6T7_ENrr7JKrwz3s37&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As known, the random UUIDs will surely be different for you than the example I have posted above. Both the above NPM modules can be used in the browser too.&lt;/p&gt;
&lt;p&gt;All the above code examples can be found in this &lt;a href=&quot;https://github.com/geshan/nodejs-uuid&quot;&gt;GiHhub repository&lt;/a&gt; for your reference.&lt;/p&gt;
&lt;p&gt;In the subsequent sections, we will look at a fast popularity comparison between the above two and other NPM modules that can generate UUID in Node.js.&lt;/p&gt;
&lt;h2 id=&quot;quick-comparison&quot; tabindex=&quot;-1&quot;&gt;Quick comparison &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2022/01/nodejs-uuid/#quick-comparison&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;There are surely other NPM packages to generate UUID. Below is a quick comparison from &lt;a href=&quot;https://www.npmtrends.com/cuid-vs-nanoid-vs-uuid-vs-uuid-js-vs-uuid4-vs-shortid&quot;&gt;NPMTrends&lt;/a&gt; for &lt;a href=&quot;https://npmjs.com/package/uuid&quot;&gt;UUID&lt;/a&gt;, &lt;a href=&quot;https://npmjs.com/package/nanoid&quot;&gt;Nano ID&lt;/a&gt;, &lt;a href=&quot;https://npmjs.com/package/cuid&quot;&gt;cuid&lt;/a&gt;, &lt;a href=&quot;https://npmjs.com/package/shortid&quot;&gt;shortid&lt;/a&gt;, &lt;a href=&quot;https://npmjs.com/package/uuid-js&quot;&gt;uuid-js&lt;/a&gt; and &lt;a href=&quot;https://npmjs.com/package/uuid4&quot;&gt;uuid4&lt;/a&gt;:&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/nodejs-uuid/03nodejs-uuid-npmtrends.jpg&quot; title=&quot;Comparision of Node.js UUID related NPM modules on NPM Trends&quot; alt=&quot;Comparision of Node.js UUID related NPM modules on NPM Trends&quot; /&gt;
&lt;p&gt;As seen above, UUID is by far the most popular one with over 50 million weekly downloads. The second most downloaded NPM package is Nano ID with 15 million weekly downloads. Time to wrap up!&lt;/p&gt;
&lt;h2 id=&quot;conclusion&quot; tabindex=&quot;-1&quot;&gt;Conclusion &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2022/01/nodejs-uuid/#conclusion&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;With this post, you have learned how to generate a UUID in Node.js using either the native crypto module or a couple of popular NPM packages. Other NPM package options were also briefly listed and compared to choose one that fits your needs.&lt;/p&gt;
&lt;p&gt;The main question here is not which package or library to use.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The vital question to answer here is when and why to use UUIDs in your applications built with Node.js which the prior &lt;a href=&quot;https://geshan.com.np/blog/2022/01/nodejs-uuid/#get-your-competitor%E2%80%99s-order-volume-example&quot;&gt;section&lt;/a&gt; answers properly with an apt example.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I hope you have learned a useful way to obscure important information that needs to be exposed and identified uniquely.&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>Using Redis with docker and docker-compose for local development a step-by-step tutorial</title>
		<link href="https://geshan.com.np/blog/2022/01/redis-docker/"/>
		<updated>2022-01-02T11:47:55Z</updated>
		<id>https://geshan.com.np/blog/2022/01/redis-docker/</id>
		<content type="html">&lt;p&gt;Redis is an open-source in-memory datastore used as a database, cache, and even a message broker. Redis can be used easily with docker and docker-compose for local development as a cache to a web application. In this post, we will set up Redis with docker and docker-compose, where Redis will be used as a cache for a Node.js/Express.js REST API with PostgreSQL as the main database, let’s get started!&lt;/p&gt;
&lt;!-- more --&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/redis-docker/01redis-docker.jpg&quot; title=&quot;Use Redis with Docker and docker-compose easily&quot; alt=&quot;Use Redis with Docker and docker-compose easily&quot; /&gt;
&lt;h2 id=&quot;table-of-contents&quot; tabindex=&quot;-1&quot;&gt;Table of contents &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2022/01/redis-docker/#table-of-contents&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2022/01/redis-docker/#prerequisites&quot;&gt;Prerequisites&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2022/01/redis-docker/#redis-and-docker&quot;&gt;Redis and Docker&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2022/01/redis-docker/#redis-with-docker-compose&quot;&gt;Redis with Docker-compose&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2022/01/redis-docker/#add-redis-to-an-existing-nodejs-application&quot;&gt;Add Redis to an existing Node.js application&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2022/01/redis-docker/#conclusion&quot;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;prerequisites&quot; tabindex=&quot;-1&quot;&gt;Prerequisites &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2022/01/redis-docker/#prerequisites&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Before we start looking at the code, below are some good to have preconditions:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;A general knowledge of how Docker works would be advantageous.&lt;/li&gt;
&lt;li&gt;It is expected to have followed the &lt;a href=&quot;https://geshan.com.np/blog/2021/01/nodejs-postgresql-tutorial/&quot;&gt;Node.js Postgres tutorial&lt;/a&gt; with quotes APIs.&lt;/li&gt;
&lt;li&gt;Going through the &lt;a href=&quot;https://geshan.com.np/blog/2021/05/nodejs-redis/&quot;&gt;Node.js Redis&lt;/a&gt; post would be very beneficial.&lt;/li&gt;
&lt;li&gt;Any working knowledge of Redis, its command line, and some basic commands like KEYS, MGET would be helpful.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Given that is mentioned, now we can proceed to run Redis with just Docker first.&lt;/p&gt;
&lt;h2 id=&quot;redis-and-docker&quot; tabindex=&quot;-1&quot;&gt;Redis and Docker &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2022/01/redis-docker/#redis-and-docker&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Redis, as mentioned, can be used as a cache too. For this post, we will use Redis as an in-memory cache in place of getting the data from a Postgres database. To do this, we will use the &lt;a href=&quot;https://hub.docker.com/_/redis&quot;&gt;official Redis docker image&lt;/a&gt; from Dockerhub. To run the Redis 6.2 version on an Alpine container we will run the following command:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;docker&lt;/span&gt; run --rm --name test-redis redis:6.2-alpine redis-server --loglevel warning&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The above command will start a container named &lt;code&gt;test-redis&lt;/code&gt; for the given image version of 6.2-alpine` with the loglevel of warning. It will give the following output:&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/redis-docker/02redis-docker.jpg&quot; title=&quot;Run Redis with just Docker&quot; alt=&quot;Run Redis with just Docker&quot; /&gt;
&lt;p&gt;To run some Redis commands inside the container, we can run &lt;code&gt;docker exec -it test-redis redis-cli&lt;/code&gt; which will run the redis-cli in the running container. We can try out some redis commands like below to see things are working:&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/redis-docker/03redis-cli.jpg&quot; title=&quot;Execute Redis CLI inside Redis Docker container&quot; alt=&quot;Execute Redis CLI inside Redis Docker container&quot; /&gt;
&lt;p&gt;As seen above we could set some value with the key &lt;code&gt;test&lt;/code&gt; and get it back. As there are no volumes set or any commands given to persist the keys and values will be lost when the container stops. Next up we will look into running the same version of Redis with docker-compose.&lt;/p&gt;
&lt;h2 id=&quot;redis-with-docker-compose&quot; tabindex=&quot;-1&quot;&gt;Redis with Docker-compose &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2022/01/redis-docker/#redis-with-docker-compose&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;To run Redis with Docker-compose including persistence and authentication we will use the docker-compose file named  &lt;code&gt;docker-compose-redis-only.yml&lt;/code&gt; as seen below:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;version: &lt;span class=&quot;token string&quot;&gt;&#39;3.8&#39;&lt;/span&gt;&lt;br /&gt;services:&lt;br /&gt;  cache:&lt;br /&gt;    image: redis:6.2-alpine&lt;br /&gt;    restart: always&lt;br /&gt;    ports:&lt;br /&gt;      - &lt;span class=&quot;token string&quot;&gt;&#39;6379:6379&#39;&lt;/span&gt;&lt;br /&gt;    command: redis-server --save &lt;span class=&quot;token number&quot;&gt;20&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; --loglevel warning --requirepass eYVX7EwVmmxKPCDmwMtyKVge8oLd2t81&lt;br /&gt;    volumes: &lt;br /&gt;      - cache:/data&lt;br /&gt;volumes:&lt;br /&gt;  cache:&lt;br /&gt;    driver: &lt;span class=&quot;token builtin class-name&quot;&gt;local&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here in the above docker-compose file, we have defined a service called cache. The cache service will pull the &lt;code&gt;redis:6.2.alpine&lt;/code&gt; image from Dockerhub. It is set to restart always, if the docker container fails for some reason it will restart. Then, we map the container port &lt;code&gt;6379&lt;/code&gt; to the local port &lt;code&gt;6379&lt;/code&gt;. If we aim to run multiple verisons of Redis, we can choose a random port.&lt;/p&gt;
&lt;p&gt;Consequently, we use a custom &lt;code&gt;redis-server&lt;/code&gt; command with &lt;code&gt;--save 20 1&lt;/code&gt; which instructs the server to save 1 or more writes every 20 seconds to disk in case the server restarts. We are using the &lt;code&gt;--requirepass&lt;/code&gt; parameter to add authentication with the password to read/write data on the Redis server. As we know if this was a production-grade application the password won’t be exposed out. This is being done here because it is only intended for development purposes.&lt;/p&gt;
&lt;p&gt;Subsequently, we use a volume for the &lt;code&gt;/data&lt;/code&gt; where any writes will be persisted. It is mapped to a volume called &lt;code&gt;cache&lt;/code&gt;. This volume is managed as a local driver, you can read more about &lt;a href=&quot;https://docs.docker.com/storage/volumes/#use-a-volume-driver&quot;&gt;Docker volume driver&lt;/a&gt; if you want.&lt;/p&gt;
&lt;p&gt;If we run a docker-compose up with the above file using &lt;code&gt;​​docker-compose -f docker-compose-redis-only.yml up&lt;/code&gt; it will give an output like below:&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/redis-docker/04redis-docker-compose.jpg&quot; title=&quot;Run only Redis with docker-compose - output&quot; alt=&quot;Run only Redis with docker-compose - output&quot; /&gt;
&lt;p&gt;This container is running similarly to the above one. The two main differences here are the volume is being mounted to persist the saved data over restarts of the container and the password is supplied for authentication. In the following section, we will add Redis to an existing application that has a PostgreSQL database and a Node.js API using that database.&lt;/p&gt;
&lt;h2 id=&quot;add-redis-to-an-existing-node.js-application&quot; tabindex=&quot;-1&quot;&gt;Add Redis to an existing Node.js application &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2022/01/redis-docker/#add-redis-to-an-existing-node.js-application&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;As an example for this guide we are using the &lt;a href=&quot;https://github.com/geshan/nodejs-posgresql&quot;&gt;Quotes API&lt;/a&gt; application built with &lt;a href=&quot;https://geshan.com.np/blog/2021/01/nodejs-postgresql-tutorial/&quot;&gt;Node.js and Postgres&lt;/a&gt;. We will introduce the Redis service in the existing docker-compose file as follows:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;version: &lt;span class=&quot;token string&quot;&gt;&#39;3.8&#39;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;services:&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;  db:&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    image: postgres:14.1-alpine&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    restart: always&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    environment:&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;      - &lt;span class=&quot;token assign-left variable&quot;&gt;POSTGRES_USER&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;postgres&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;      - &lt;span class=&quot;token assign-left variable&quot;&gt;POSTGRES_PASSWORD&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;postgres&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    ports:&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;      - &lt;span class=&quot;token string&quot;&gt;&#39;5432:5432&#39;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    volumes: &lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;      - db:/var/lib/postgresql/data&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;      - ./db/init.sql:/docker-entrypoint-initdb.d/create_tables.sql&lt;/span&gt;&lt;br /&gt;&lt;mark class=&quot;highlight-line highlight-line-active&quot;&gt;  cache:&lt;/mark&gt;&lt;br /&gt;&lt;mark class=&quot;highlight-line highlight-line-active&quot;&gt;    image: redis:6.2-alpine&lt;/mark&gt;&lt;br /&gt;&lt;mark class=&quot;highlight-line highlight-line-active&quot;&gt;    restart: always&lt;/mark&gt;&lt;br /&gt;&lt;mark class=&quot;highlight-line highlight-line-active&quot;&gt;    ports:&lt;/mark&gt;&lt;br /&gt;&lt;mark class=&quot;highlight-line highlight-line-active&quot;&gt;      - &lt;span class=&quot;token string&quot;&gt;&#39;6379:6379&#39;&lt;/span&gt;&lt;/mark&gt;&lt;br /&gt;&lt;mark class=&quot;highlight-line highlight-line-active&quot;&gt;    command: redis-server --save &lt;span class=&quot;token number&quot;&gt;20&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; --loglevel warning --requirepass eYVX7EwVmmxKPCDmwMtyKVge8oLd2t81&lt;/mark&gt;&lt;br /&gt;&lt;mark class=&quot;highlight-line highlight-line-active&quot;&gt;    volumes: &lt;/mark&gt;&lt;br /&gt;&lt;mark class=&quot;highlight-line highlight-line-active&quot;&gt;      - cache:/data&lt;/mark&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;  api:&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    container_name: quotes-api&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    build:&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;      context: ./&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;      target: production&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    image: quotes-api&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    depends_on:&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;      - db&lt;/span&gt;&lt;br /&gt;&lt;mark class=&quot;highlight-line highlight-line-active&quot;&gt;      - cache&lt;/mark&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    ports:&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;      - &lt;span class=&quot;token number&quot;&gt;3000&lt;/span&gt;:3000&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    environment:&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;      NODE_ENV: production&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;      DB_HOST: db&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;      DB_PORT: &lt;span class=&quot;token number&quot;&gt;5432&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;      DB_USER: postgres&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;      DB_PASSWORD: postgres&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;      DB_NAME: postgres&lt;/span&gt;&lt;br /&gt;&lt;mark class=&quot;highlight-line highlight-line-active&quot;&gt;      REDIS_HOST: cache&lt;/mark&gt;&lt;br /&gt;&lt;mark class=&quot;highlight-line highlight-line-active&quot;&gt;      REDIS_PORT: &lt;span class=&quot;token number&quot;&gt;6379&lt;/span&gt;&lt;/mark&gt;&lt;br /&gt;&lt;mark class=&quot;highlight-line highlight-line-active&quot;&gt;      REDIS_PASSWORD: eYVX7EwVmmxKPCDmwMtyKVge8oLd2t81&lt;/mark&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    links:&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;      - db&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;      - cache&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    volumes:&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;      - ./:/src&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;volumes:&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;  db:&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    driver: &lt;span class=&quot;token builtin class-name&quot;&gt;local&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;  cache:&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    driver: &lt;span class=&quot;token builtin class-name&quot;&gt;local&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This file is similar to the above docker-compose file. The main changes here are the &lt;code&gt;api&lt;/code&gt; service now also depends on the &lt;code&gt;cache&lt;/code&gt; service which is our Redis server. In addition to that, in the API service, we are passing the Redis related credentials as extra environment variables like &lt;code&gt;REDIS_HOST&lt;/code&gt;, &lt;code&gt;REDIS_PORT&lt;/code&gt;, and &lt;code&gt;REDIS_PASSWORD&lt;/code&gt;. These parts have been highlighted in the above file.&lt;/p&gt;
&lt;p&gt;When we do a regular &lt;code&gt;docker-compose up&lt;/code&gt; with this docker-compose.yml file it will yield the output similar to the below:&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/redis-docker/05redis-docker-compose-up.jpg&quot; title=&quot;Run Redis with docker-compose including Node.js and Postgres - output&quot; alt=&quot;Run Redis with docker-compose including Node.js and Postgres - output&quot; /&gt;
&lt;p&gt;Depending on if the Postgres container has data it will behave a bit differently. Now if we hit &lt;code&gt;http://localhost:3000/quotes/author/chris&lt;/code&gt; it will show the following output:&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/redis-docker/06app-output.jpg&quot; title=&quot;Node.js and Postgres API output with docker Redis&quot; alt=&quot;Node.js and Postgres API output with docker Redis&quot; /&gt;
&lt;p&gt;Refresh this page 2-3 times and go back to the docker-compose console tab, we should see something similar to the below:&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/redis-docker/07redis-docker-fast-response.jpg&quot; title=&quot;Much faster response times with Redis Docker&quot; alt=&quot;Much faster response times with Redis Docker&quot; /&gt;
&lt;p&gt;As we can see above the first hit went to the database and it took 328.118 ms to get the quotes for the author &lt;code&gt;Chris&lt;/code&gt;. All subsequent requests got the request from the Redis cache and it was super fast, responding between 5.7 to 3.48 ms. As the cached content is there for 10 minutes, if we run the &lt;code&gt;redis-cli&lt;/code&gt; inside the container with the following command:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;docker&lt;/span&gt; &lt;span class=&quot;token builtin class-name&quot;&gt;exec&lt;/span&gt; -it nodejs-posgresql_cache_1 redis-cli -a eYVX7EwVmmxKPCDmwMtyKVge8oLd2t81&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then we can see the content of the cached key and its value with: &lt;code&gt;KEYS *&lt;/code&gt; to list all keys. To list the value of the found key we can use &lt;code&gt;MGET quotes_author_chris_1&lt;/code&gt; it will show us the contents of that particular key as seen below:&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/redis-docker/08redis-docker-contents.jpg&quot; title=&quot;Contents of the Redis Docker caching API response&quot; alt=&quot;Contents of the Redis Docker caching API response&quot; /&gt;
&lt;p&gt;The PostgreSQL query cache will make things faster for consequent calls but if there are lots (thousands or millions) of rows on the database then the query cache won’t work that great. That is where a key-value cache stored on memory like Redis would be a great performance boost as you can see above. The change done for this tutorial is available as a &lt;a href=&quot;https://github.com/geshan/nodejs-posgresql/pull/27&quot;&gt;pull request&lt;/a&gt; for your reference.&lt;/p&gt;
&lt;h2 id=&quot;conclusion&quot; tabindex=&quot;-1&quot;&gt;Conclusion &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2022/01/redis-docker/#conclusion&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;We saw how to use Redis with docker and the with docker-compose. We also added Redis as a cache to an existing Node.js API and witnessed the performance benefits.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I hope this helps you understand how to use Redis in any application with docker and docker-compose without any hassle.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Keep caching!&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>2021 year in review: Recap of blogging, an interview, talks, and other things</title>
		<link href="https://geshan.com.np/blog/2021/12/recap-2021/"/>
		<updated>2021-12-27T11:57:52Z</updated>
		<id>https://geshan.com.np/blog/2021/12/recap-2021/</id>
		<content type="html">&lt;p&gt;Like 2020, the year 2021 was also eclipsed by COVID-19. Still there are some things I have achieved and smashed through a couple of goals. This will be the third installemnt of me writing a recap of the year that was, after 2019 and 2020. In this post, I am going to detail some professional and technical things I have done this year, let’s get rolling!&lt;/p&gt;
&lt;!-- more --&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/recap-2021/01recap-2021.jpg&quot; title=&quot;Quick recap of year 2021 for me and this blog&quot; alt=&quot;Quick recap of year 2021 for me and this blog&quot; /&gt;
&lt;h2 id=&quot;table-of-contents&quot; tabindex=&quot;-1&quot;&gt;Table of contents &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/12/recap-2021/#table-of-contents&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/12/recap-2021/#highlights&quot;&gt;Highlights&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/12/recap-2021/#featured---interview-for-a-podcast&quot;&gt;Featured - Interview for a podcast&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/12/recap-2021/#blogging-and-writing-in-2021&quot;&gt;Blogging and writing in 2021&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/12/recap-2021/#breakdown-by-month&quot;&gt;Breakdown by month&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/12/recap-2021/#most-viewed-blog-posts-of-2021&quot;&gt;Most viewed blog posts of 2021&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/12/recap-2021/#blog-traffic-goes-up&quot;&gt;Blog traffic goes up&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/12/recap-2021/#other-publications&quot;&gt;Other publications&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/12/recap-2021/#talks&quot;&gt;Talks&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/12/recap-2021/#podcast-episodes&quot;&gt;Podcast episodes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/12/recap-2021/#craft-your-tech-resume&quot;&gt;Craft your tech resume&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/12/recap-2021/#misc&quot;&gt;Misc&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/12/recap-2021/#conclusion&quot;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;highlights&quot; tabindex=&quot;-1&quot;&gt;Highlights &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/12/recap-2021/#highlights&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Below are the highlights of the year 2021 from a technical and professional point of view:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;I was &lt;a href=&quot;https://www.youtube.com/watch?v=uoGzK0K9ILE&quot;&gt;interviewed for the TechKraft podcast&lt;/a&gt; in Jul by Ravi Mandal.&lt;/li&gt;
&lt;li&gt;Successfully published 24+1 (this review) post on this blog. The traffic of this blog was 2.5x higher in terms of page views and it got 3 times more users this year compared to 2020, thanks to my ruthless focus on SEO.&lt;/li&gt;
&lt;li&gt;My blog posts were published in multiple other publications like Logrokcet blog, Honey Badger blog, Flagsmith and one in App Signal too.&lt;/li&gt;
&lt;li&gt;Finally I started a tech newsletter from Nov and recently crossposted on Linkedin newsletter&lt;/li&gt;
&lt;li&gt;This year I did at least 2 virtual talks one about crafting your tech resume and other about podcast episodes to listen to as a software engineer.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In the next section we can revisit how my interview went.&lt;/p&gt;
&lt;h2 id=&quot;featured---interview-for-a-podcast&quot; tabindex=&quot;-1&quot;&gt;Featured - Interview for a podcast &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/12/recap-2021/#featured---interview-for-a-podcast&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This year I was interviewed exactly once, ok there were other podcast invites but I didn’t do it for some reasons. I was approached by &lt;a href=&quot;https://np.linkedin.com/in/ravimandal&quot;&gt;Ravi Mandal&lt;/a&gt; from TechKraft for the &lt;a href=&quot;https://anchor.fm/thetechkraftpodcast/&quot;&gt;TechKraft podcast&lt;/a&gt;.&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/recap-2021/02techkraft-geshan.jpg&quot; title=&quot;Me being interviewed by Ravi for the TechKraft podcast in Jul 2021&quot; alt=&quot;Me being interviewed by Ravi for the TechKraft podcast in Jul 2021&quot; /&gt;
&lt;p&gt;It was a fun interview to be honest and Ravi did a great job as an interviewer.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;We discussed various thing related to software engineering, from code reviews, microservices, feature flags to manager is a career change and mentoring.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Below is the video form of it:&lt;/p&gt;
&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/uoGzK0K9ILE&quot; title=&quot;YouTube video player&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;p&gt;If you want to listen to the &lt;a href=&quot;https://anchor.fm/thetechkraftpodcast/episodes/7-Core-Software-Engineering-and-Career-Path-e14pcv6&quot;&gt;audio version&lt;/a&gt; of this podcast it is available as follows:&lt;/p&gt;
&lt;iframe src=&quot;https://anchor.fm/thetechkraftpodcast/embed/episodes/7-Core-Software-Engineering-and-Career-Path-e14pcv6/a-a66af2t&quot; height=&quot;102px&quot; width=&quot;400px&quot; frameborder=&quot;0&quot; scrolling=&quot;no&quot;&gt;&lt;/iframe&gt;
&lt;p&gt;Next up, we will discuss the blogging and writing I did this year.&lt;/p&gt;
&lt;h2 id=&quot;blogging-and-writing-in-2021&quot; tabindex=&quot;-1&quot;&gt;Blogging and writing in 2021 &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/12/recap-2021/#blogging-and-writing-in-2021&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This year I have hit the target I set for the number of blog posts I would like to write for my blog.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I have written 24 blog posts and with this review post it makes it 25 :).&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I have written things about &lt;a href=&quot;https://geshan.com.np/blog/categories/javascript/&quot;&gt;JavaScript&lt;/a&gt;, &lt;a href=&quot;https://geshan.com.np/blog/categories/nodejs/&quot;&gt;Node.js&lt;/a&gt;, Kubernetes, Rabbit MQ, tech career advice, &lt;a href=&quot;https://geshan.com.np/blog/2021/04/sofware-deployment-tools/&quot;&gt;deployment tools&lt;/a&gt;, logging, etc. Next up let’s see how many posts did I actually publish each month this year.&lt;/p&gt;
&lt;h3 id=&quot;breakdown-by-month&quot; tabindex=&quot;-1&quot;&gt;Breakdown by month &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/12/recap-2021/#breakdown-by-month&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Below is a breakdown of posts on this blog by each month of 2021:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Jan - 5&lt;/li&gt;
&lt;li&gt;Feb - 3&lt;/li&gt;
&lt;li&gt;Mar - 2&lt;/li&gt;
&lt;li&gt;Apr - 2&lt;/li&gt;
&lt;li&gt;May - 2&lt;/li&gt;
&lt;li&gt;Jun - 1&lt;/li&gt;
&lt;li&gt;Jul - 2&lt;/li&gt;
&lt;li&gt;Aug - 0&lt;/li&gt;
&lt;li&gt;Sep - 1&lt;/li&gt;
&lt;li&gt;Oct - 2&lt;/li&gt;
&lt;li&gt;Nov - 2&lt;/li&gt;
&lt;li&gt;Dec - 2&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;It would have been good to be consistent with 2 blog posts each month and possible one every 2 weeks. Stll 24 blog posts is not an easy feat, next up we will look at the most popular posts of 2021 written and published in 2021.&lt;/p&gt;
&lt;h3 id=&quot;most-viewed-blog-posts-of-2021&quot; tabindex=&quot;-1&quot;&gt;Most viewed blog posts of 2021 &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/12/recap-2021/#most-viewed-blog-posts-of-2021&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;We can see the list of top 5 blog posts in terms of page views in 2021 as follows:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/01/free-nodejs-hosting/&quot;&gt;3 free Node.js hosting services you should be using today (with step-by-step deployment examples)&lt;/a&gt; - Jan 2021&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/01/nodejs-logging-library/&quot;&gt;5 Node.js Logging libraries compared for you to make the optimal choice&lt;/a&gt; - Jan 2021&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/01/nodejs-postgresql-tutorial/&quot;&gt;Node.js Postgresql tutorial: Build a simple REST API with Express step-by-step&lt;/a&gt; - Jan 2021&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/07/rabbitmq-docker-nodejs/&quot;&gt;How to use RabbitMQ and Node.js with Docker and Docker-compose&lt;/a&gt; - Jul 2021&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/02/kubernetes-cron-job/&quot;&gt;Kubernetes cron jobs: a hands-on guide to optimally configured crons&lt;/a&gt; - Feb 2021&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Looks like the posts in Jan-2021 have worked pretty well in terms of popularity. Consequently, we will discuss a bit about how the traffic of this blog increased by 2.5x in 2021.&lt;/p&gt;
&lt;h3 id=&quot;blog-traffic-goes-up&quot; tabindex=&quot;-1&quot;&gt;Blog traffic goes up &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/12/recap-2021/#blog-traffic-goes-up&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;From Oct 2020 I focused ruthlessly on Search Engine Optimization (SEO) for this blog. Basically the main switch was to write for things people searched for than things I wanted to write about.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;This changed the course of how traffic landed on this blog, in 2021 my blog witnessed a 531% increment in search engine traffic which made the audience size 3x compared to 2020.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Below is a quick comparison of traffic acquisition for 2020 and 2021.&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/recap-2021/03blog-traffic.jpg&quot; title=&quot;Blog traffic shot up 3x in 2021 thanks to SEO&quot; alt=&quot;Blog traffic shot up 3x in 2021 thanks to SEO&quot; /&gt;
&lt;p&gt;From a page view point of view, in 2021 the blog had 2.5 times more page views compared to 2020 for the same number of 24 posts for both years. This is already hitting a cealing in my opinion.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Compared to last year, the blog climbed from position 725,243 in Dec-2020 to 205,041 in Dec-2021 on Alexa.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;It can be seen below.&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/recap-2021/04blog-on-alexa.jpg&quot; title=&quot;Blog ranking on Alexa.com for Dec 2021&quot; alt=&quot;Blog ranking on Alexa.com for Dec 2021&quot; /&gt;
&lt;p&gt;Sadly, Alexa is shutting down in May 2022 so I will need to look at similar web rankings from this year. It is at 515,013 now in Dec-2021 on &lt;a href=&quot;https://www.similarweb.com/website/geshan.com.np/&quot;&gt;Similar web&lt;/a&gt;:&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/recap-2021/05blog-on-similarweb.jpg&quot; title=&quot;Blog ranking on Similar Web for Dec 2021&quot; alt=&quot;Blog ranking on Similar Web for Dec 2021&quot; /&gt;
&lt;p&gt;In the following section we will discuss what other publications and blogs I have written posts for this year.&lt;/p&gt;
&lt;h3 id=&quot;other-publications&quot; tabindex=&quot;-1&quot;&gt;Other publications &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/12/recap-2021/#other-publications&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;In addition to writing for my own blog, I have also written posts for other publications this year. All of these pieced have been original work than crossposts of my personal blog’s posts. Below is a quick view of the publications and blogs I have written for in 2021:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://blog.logrocket.com/author/geshanmanandhar/&quot;&gt;LogRocket Blog&lt;/a&gt; - 12 posts on various topics like Node.js, Kubernetes, React, etc. 1 more coming in 2022.&lt;/li&gt;
&lt;li&gt;Flagsmith - 6 posts mainly about &lt;a href=&quot;https://flagsmith.com/blog/nodejs-feature-flags/&quot;&gt;feature flags&lt;/a&gt; and &lt;a href=&quot;https://flagsmith.com/blog/git-branching-and-feature-flags/&quot;&gt;git branching&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Honey badger - 2 posts both on running &lt;a href=&quot;https://www.honeybadger.io/blog/rails-on-kubernetes/&quot;&gt;Ruby on Rails on Kubernetes&lt;/a&gt; in &lt;a href=&quot;https://www.honeybadger.io/blog/rails-kubernetes-cluster-2/&quot;&gt;2 parts&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://blog.appsignal.com/authors/geshan-manandhar&quot;&gt;App signal&lt;/a&gt; - 1 post on &lt;a href=&quot;https://blog.appsignal.com/2021/07/21/how-to-get-started-with-prisma-orm-for-nodejs-and-postgresql.html&quot;&gt;Node.js and Prisma ORM with PostgreSQL database&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I was cross posting till Mar 2021 on Medium publications like on better programming I posted about &lt;a href=&quot;https://betterprogramming.pub/javascript-memoization-dca99a5614fe&quot;&gt;Javascript memoization&lt;/a&gt;. For Javascript in plain english I cross posted about &lt;a href=&quot;https://javascript.plainenglish.io/software-resilience-723934d8b4c1&quot;&gt;software resilience&lt;/a&gt; amongst other things. For DailyJS I wrote about &lt;a href=&quot;https://medium.com/dailyjs/how-to-use-docker-with-node-js-a-step-by-step-tutorial-including-docker-compose-ac238c9e7778&quot;&gt;Docker and Node.js&lt;/a&gt;. I cross posted on &lt;a href=&quot;http://dev.to/&quot;&gt;Dev.to&lt;/a&gt; too.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;All in all I have written a total of 50+ blog posts this year. Basically I have been a content machine producing almost 1 post each week thanks to work from home and lockdowns.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Next up, we will discuss about a couple of talk I could do this year.&lt;/p&gt;
&lt;h2 id=&quot;talks&quot; tabindex=&quot;-1&quot;&gt;Talks &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/12/recap-2021/#talks&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I did not do any in-person talks this year too. But, I carried out at least 2 talks one of them was for the learning day at the place I work for Podcast Episodes to listen to. The other one was for the students of Dented Code to help them craft a great tech resume.&lt;/p&gt;
&lt;h3 id=&quot;podcast-episodes&quot; tabindex=&quot;-1&quot;&gt;Podcast episodes &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/12/recap-2021/#podcast-episodes&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;These were my podcast episodes recommendations for every software engineer packaged as a talk:&lt;/p&gt;
&lt;script async=&quot;&quot; class=&quot;speakerdeck-embed&quot; data-id=&quot;5312063e06664976850cce36671e26f8&quot; data-ratio=&quot;1.77777777777778&quot; src=&quot;https://speakerdeck.com/assets/embed.js&quot;&gt;&lt;/script&gt;
&lt;p&gt;The slides can be viewed on &lt;a href=&quot;https://docs.google.com/presentation/d/1RpTQeUVwiLD1Q8cVBlnp0KpmbXh4lt5XZbVDQ355nz4/edit?usp=sharing&quot;&gt;Google Slides&lt;/a&gt; too where all the links will work :).&lt;/p&gt;
&lt;h3 id=&quot;craft-your-tech-resume&quot; tabindex=&quot;-1&quot;&gt;Craft your tech resume &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/12/recap-2021/#craft-your-tech-resume&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Below are the slides from my talk about “how to craft your tech resume”:&lt;/p&gt;
&lt;script async=&quot;&quot; class=&quot;speakerdeck-embed&quot; data-id=&quot;a216367420e54617b49b2ea0696c266b&quot; data-ratio=&quot;1.77777777777778&quot; src=&quot;https://speakerdeck.com/assets/embed.js&quot;&gt;&lt;/script&gt;
&lt;p&gt;Thanks to Prem for the invite to do this talk. You can view the slides on &lt;a href=&quot;https://docs.google.com/presentation/d/15gc1BlisJOgxqA1jUsQ1A4NDw1mV7HTBh9M1-lHZ-q4/edit?usp=sharing&quot;&gt;Google Slides&lt;/a&gt; too. The image of the zoom meeting for the talk which also had a QnA after the talk is seen as follows:&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/recap-2021/06resume-talk.jpg&quot; title=&quot;Zoom screenshot of the talk on how to craft your tech resume&quot; alt=&quot;Zoom screenshot of the talk on how to craft your tech resume&quot; /&gt;
&lt;p&gt;In the following section we will look into miscellaneous things I did this year.&lt;/p&gt;
&lt;h2 id=&quot;misc&quot; tabindex=&quot;-1&quot;&gt;Misc &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/12/recap-2021/#misc&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;All other things I did this year which are worth mentioned are as follows in no particular order:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;This year too I completed Hacktoberfest in October&lt;/li&gt;
&lt;li&gt;It has been one year plus of the &lt;a href=&quot;https://geshan.com.np/blog/2020/11/how-to-take-social-media-break/&quot;&gt;social meda break&lt;/a&gt; I took and it is going good.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://app.autechjobs.ml/&quot;&gt;AU Tech Jobs&lt;/a&gt;, our side project from last year is still alive and going generally Ok. The [mini startup]/blog/2021/06/life-changing-side-project/) that changed some lives for sure.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://newsletter.geshan.com.np/&quot;&gt;Geshan’s Blog newsletter&lt;/a&gt; was started on Nov 2021 and already has some followers. Please do subscribe it will be cross-posted to &lt;a href=&quot;https://www.linkedin.com/newsletters/geshan-s-blog-newsletter-6877926693164724224/&quot;&gt;Linkedin Newsletter&lt;/a&gt; too (has 1K+ followers there)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;conclusion&quot; tabindex=&quot;-1&quot;&gt;Conclusion &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/12/recap-2021/#conclusion&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Possibly I have missed some things. I hope 2022 will be a better year for all of us. Keep supporting me and this blog, cheers!&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>Postgres with Docker and Docker compose a step-by-step guide for beginners</title>
		<link href="https://geshan.com.np/blog/2021/12/docker-postgres/"/>
		<updated>2021-12-25T11:37:55Z</updated>
		<id>https://geshan.com.np/blog/2021/12/docker-postgres/</id>
		<content type="html">&lt;p&gt;Docker has shot up in &lt;a href=&quot;https://trends.google.com/trends/explore?date=2015-01-01%202021-12-25&amp;amp;q=%2Fm%2F0wkcjgj&quot;&gt;popularity over the years&lt;/a&gt;. Postgres (a.k.a PostgreSQL) is an open-source, standards-compliant, and object-relational database been developed for more than 30 years now. This official &lt;a href=&quot;https://www.postgresql.org/about/featurematrix/&quot;&gt;feature matrix&lt;/a&gt; shows the wealth of features Postgres has.&lt;/p&gt;
&lt;p&gt;Running Postgres with Docker and docker-compose makes it very easy to run and maintain especially in a development environment. In this post, we will look into how to run and use Postgres with Docker and Docker compose step-by-step keeping things simple and easy. Let’s get started!&lt;/p&gt;
&lt;!-- more --&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/docker-postgres/01docker-postgres.jpg&quot; title=&quot;Use Postgres with Docker and docker-compose easily&quot; alt=&quot;Use Postgres with Docker and docker-compose easily&quot; /&gt;
&lt;h2 id=&quot;table-of-contents&quot; tabindex=&quot;-1&quot;&gt;Table of contents &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/12/docker-postgres/#table-of-contents&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/12/docker-postgres/#why-use-postgres-with-docker-for-local-development&quot;&gt;Why use Postgres with docker for local development&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/12/docker-postgres/#prerequisites&quot;&gt;Prerequisites&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/12/docker-postgres/#postgres-with-docker&quot;&gt;Postgres with Docker&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/12/docker-postgres/#postgresql-with-docker-compose&quot;&gt;PostgreSQL with docker-compose&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/12/docker-postgres/#adding-postgres-with-docker-to-an-existing-nodejs-project&quot;&gt;Adding Postgres with Docker to an existing Node.js project&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/12/docker-postgres/#conclusion&quot;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;why-use-postgres-with-docker-for-local-development&quot; tabindex=&quot;-1&quot;&gt;Why use Postgres with docker for local development &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/12/docker-postgres/#why-use-postgres-with-docker-for-local-development&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;There are many good reasons to use any database like Postgres with Docker for local development, below are some good reasons:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Using multiple versions of PostgreSQL as per project or any other need is very easy.&lt;/li&gt;
&lt;li&gt;Generally with docker if it runs on your machine it will run for your friend, on a staging environment and production environment given the version compatibility is maintained.&lt;/li&gt;
&lt;li&gt;When a new team member joins, the new member can get started in hours, it does not take days to be productive.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;You can read more about this on &lt;a href=&quot;https://geshan.com.np/blog/2018/10/why-use-docker-3-reasons-from-a-development-perspective/&quot;&gt;why to use docker&lt;/a&gt;. In the following section, we will look into some good to have things before diving into the commands to run Postgres with Docker.&lt;/p&gt;
&lt;h2 id=&quot;prerequisites&quot; tabindex=&quot;-1&quot;&gt;Prerequisites &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/12/docker-postgres/#prerequisites&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Before we dive into some CLI commands and a bit of code below are some prerequisites best to have:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Basic knowledge of Docker will be helpful like executing commands like docker run, execute, etc. For this tutorial, docker version 20.10.10 will be used in a Mac.&lt;/li&gt;
&lt;li&gt;Any prior grasp on Docker compose would be useful but not necessary. For this guide, we will use the docker-compose version 1.29.1 on a Mac.&lt;/li&gt;
&lt;li&gt;An intermediate understanding of how relational databases work, especially PostgreSQL would be highly beneficial.&lt;/li&gt;
&lt;li&gt;We will use an existing application/API with &lt;a href=&quot;https://geshan.com.np/blog/2021/01/nodejs-postgresql-tutorial/&quot;&gt;Node.js and Postgres&lt;/a&gt; replacing a remote Postgres with a local one running with Docker and Docker compose, so it would be advisable to read the previous post about it.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Given the prerequisites have been mentioned we can move forward to the next section where we will run some docker commands. Get those itchy fingers ready now.&lt;/p&gt;
&lt;h2 id=&quot;postgres-with-docker&quot; tabindex=&quot;-1&quot;&gt;Postgres with Docker &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/12/docker-postgres/#postgres-with-docker&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;For this post, we will use the official Postgres docker alpine image from &lt;a href=&quot;https://hub.docker.com/_/postgres&quot;&gt;DockerHub&lt;/a&gt;. We will be using the latest version 14.1 of PostgreSQL.&lt;/p&gt;
&lt;p&gt;The default bullseye version of Postgres docker image is 130 MB whereas the alpine one for the same version is 78 MB which is a lot smaller.&lt;/p&gt;
&lt;p&gt;To simply run the container using the Postgres 14.1 alpine image we can execute the following command:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;docker&lt;/span&gt; run --name basic-postgres --rm -e &lt;span class=&quot;token assign-left variable&quot;&gt;POSTGRES_USER&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;postgres -e &lt;span class=&quot;token assign-left variable&quot;&gt;POSTGRES_PASSWORD&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;4y7sV96vA9wv46VR -e &lt;span class=&quot;token assign-left variable&quot;&gt;PGDATA&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;/var/lib/postgresql/data/pgdata -v /tmp:/var/lib/postgresql/data -p &lt;span class=&quot;token number&quot;&gt;5432&lt;/span&gt;:5432 -it postgres:14.1-alpine&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let’s evaluate what the above command does. It tries to run a container from the posgres:14.1-alpine image which will be pulled in from Dockerhub by default if it does not exist.&lt;/p&gt;
&lt;p&gt;First, the name &lt;code&gt;basic-posgres&lt;/code&gt; is given to the running container, and &lt;code&gt;--rm&lt;/code&gt; will clean up the container and remove the file system when the container exits. Some environment variables have been added to make things easier.&lt;/p&gt;
&lt;p&gt;The last 3 parameters are interesting, &lt;code&gt;-v&lt;/code&gt; adds a volume to store data, for this example, it has been mapped to &lt;code&gt;/tmp&lt;/code&gt; so all data will be lost when the machine restarts. Next, we use the &lt;code&gt;-p&lt;/code&gt; parameter to map the host port 5432 to the container port 5432.&lt;/p&gt;
&lt;p&gt;The last parameter to the command is &lt;code&gt;-it&lt;/code&gt; to have the tty available. When we run the command we will see an output like the below:&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/docker-postgres/02docker-run-postgres.jpg&quot; title=&quot;Run PostgreSQL with just docker run&quot; alt=&quot;Run PostgreSQL with just docker run&quot; /&gt;
&lt;p&gt;The container is running and ready to accept connections, if we run the following command we can go inside the container and run the &lt;code&gt;psql&lt;/code&gt; command to see the &lt;code&gt;postgres&lt;/code&gt; database which is the same as the username supplied in the event variable.&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;docker&lt;/span&gt; &lt;span class=&quot;token builtin class-name&quot;&gt;exec&lt;/span&gt; -it basic-postgres /bin/sh&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After we are inside the container we can run &lt;code&gt;psql --username postgres&lt;/code&gt; to access the Postgres CLI. To list the databases we can run &lt;code&gt;\l&lt;/code&gt; inside the psql CLI to list the databases and see the Postgres database as seen below:&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/docker-postgres/03docker-exec-postgres.jpg&quot; title=&quot;Docker exec in Postgres and list the databases&quot; alt=&quot;Docker exec in Postgres and list the databases&quot; /&gt;
&lt;p&gt;As seen in the above picture &lt;code&gt;\q&lt;/code&gt; will quit the psql CLI and exit the container’s shell we have ran &lt;code&gt;exit&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;If we go back to the running container and hit &lt;code&gt;Ctrl+C&lt;/code&gt; it will stop the container as well as clean it up as we have used the &lt;code&gt;--rm&lt;/code&gt; parameter when we ran it.&lt;/p&gt;
&lt;p&gt;This is a way to run Postgres with docker but as we have seen it is not easy to remember the 10 liner command and all the needed parameters.&lt;/p&gt;
&lt;p&gt;Also, we have not specified any link between the database and our application. This is where the docker-compose file and &lt;a href=&quot;https://docs.docker.com/compose/&quot;&gt;docker-compose&lt;/a&gt; command comes in very handy as seen in the next section.&lt;/p&gt;
&lt;h2 id=&quot;postgresql-with-docker-compose&quot; tabindex=&quot;-1&quot;&gt;PostgreSQL with docker-compose &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/12/docker-postgres/#postgresql-with-docker-compose&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;To run the same Postgres 14.1-alpine with docker-compose we will create a &lt;code&gt;docker-compose-pg-only.yml&lt;/code&gt; file with the following contents:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;version: &lt;span class=&quot;token string&quot;&gt;&#39;3.8&#39;&lt;/span&gt;&lt;br /&gt;services:&lt;br /&gt;  db:&lt;br /&gt;    image: postgres:14.1-alpine&lt;br /&gt;    restart: always&lt;br /&gt;    environment:&lt;br /&gt;      - &lt;span class=&quot;token assign-left variable&quot;&gt;POSTGRES_USER&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;postgres&lt;br /&gt;      - &lt;span class=&quot;token assign-left variable&quot;&gt;POSTGRES_PASSWORD&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;postgres&lt;br /&gt;    ports:&lt;br /&gt;      - &lt;span class=&quot;token string&quot;&gt;&#39;5432:5432&#39;&lt;/span&gt;&lt;br /&gt;    volumes: &lt;br /&gt;      - db:/var/lib/postgresql/data&lt;br /&gt;volumes:&lt;br /&gt;  db:&lt;br /&gt;    driver: &lt;span class=&quot;token builtin class-name&quot;&gt;local&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The docker-compose file has the following things to consider:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;It uses the docker-compose file &lt;a href=&quot;https://docs.docker.com/compose/compose-file/compose-file-v3/&quot;&gt;version 3.8&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Next up, we define &lt;code&gt;db&lt;/code&gt; as a &lt;a href=&quot;https://docs.docker.com/compose/compose-file/compose-file-v3/#service-configuration-reference&quot;&gt;service&lt;/a&gt;, each service will equate to a new &lt;code&gt;docker run&lt;/code&gt; command&lt;/li&gt;
&lt;li&gt;We are asking docker-compose for the service to be an image of Postgres version 14.1 alpine which will always restart if the container stops automatically.&lt;/li&gt;
&lt;li&gt;Consequently we define two environment variables to send in the Postgres user and password. Keep in mind, as the database is not sent by default for the official image it will use the username as the database name.&lt;/li&gt;
&lt;li&gt;Subsequently we map the host/machine port &lt;code&gt;5432&lt;/code&gt; with the container port &lt;code&gt;5432&lt;/code&gt; as Postgres runs in that port in the container.&lt;/li&gt;
&lt;li&gt;After that we ask docker-compose to manage the &lt;a href=&quot;https://docs.docker.com/compose/compose-file/compose-file-v3/#volumes&quot;&gt;volume&lt;/a&gt; in a name called &lt;code&gt;db&lt;/code&gt; which is further added to be a local driver. So when the container is restarted the data will be available from docker managed volume. To see the contents of the volume we can run &lt;code&gt;docker volume ls&lt;/code&gt; and inspect the volume attached to our Postgres container.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;After that explanation, to start the containers we will run &lt;code&gt;docker-compose -f docker-compose-pg-only.yml up&lt;/code&gt; which will show an output like below:&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/docker-postgres/04docker-compose-up-postgres-only.jpg&quot; title=&quot;Output of docker-compose up for Postgres container&quot; alt=&quot;Output of docker-compose up for Postgres container&quot; /&gt;
&lt;p&gt;So the Postgres database is running and this time it was a one-line command, not a long command to get it running as all the needed parameters were in the docker-compose file.&lt;/p&gt;
&lt;p&gt;At this point, the Postgres in the container will behave similarly to a local Postgres instance as we have mapped the port &lt;code&gt;5432&lt;/code&gt; to the local port &lt;code&gt;5432&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Next up, we will see how we modify the docker-compose file to fit in an existing project.&lt;/p&gt;
&lt;h2 id=&quot;adding-postgres-with-docker-to-an-existing-node.js-project&quot; tabindex=&quot;-1&quot;&gt;Adding Postgres with Docker to an existing Node.js project &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/12/docker-postgres/#adding-postgres-with-docker-to-an-existing-node.js-project&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Given we have seen PostgreSQL run with docker-compose, now we will integrate it with a running Node.js API project. A full step-by-step tutorial of how this Quotes API project is built with &lt;a href=&quot;https://geshan.com.np/blog/2021/01/nodejs-postgresql-tutorial/&quot;&gt;Node.js and Postgres&lt;/a&gt; is available for your reference. For this guide we will add a &lt;code&gt;docker-compose.yml&lt;/code&gt; file with the following contents:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;version: &lt;span class=&quot;token string&quot;&gt;&#39;3.8&#39;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;services:&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;  db:&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    image: postgres:14.1-alpine&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    restart: always&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    environment:&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;      - &lt;span class=&quot;token assign-left variable&quot;&gt;POSTGRES_USER&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;postgres&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;      - &lt;span class=&quot;token assign-left variable&quot;&gt;POSTGRES_PASSWORD&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;postgres&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    ports:&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;      - &lt;span class=&quot;token string&quot;&gt;&#39;5432:5432&#39;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    volumes: &lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;      - db:/var/lib/postgresql/data&lt;/span&gt;&lt;br /&gt;&lt;mark class=&quot;highlight-line highlight-line-active&quot;&gt;      - ./db/init.sql:/docker-entrypoint-initdb.d/create_tables.sql&lt;/mark&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;  api:&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    container_name: quotes-api&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    build:&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;      context: ./&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;      target: production&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    image: quotes-api&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    depends_on:&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;      - db&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    ports:&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;      - &lt;span class=&quot;token number&quot;&gt;3000&lt;/span&gt;:3000&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    environment:&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;      NODE_ENV: production&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;      DB_HOST: db&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;      DB_PORT: &lt;span class=&quot;token number&quot;&gt;5432&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;      DB_USER: postgres&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;      DB_PASSWORD: postgres&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;      DB_NAME: postgres&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    links:&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;      - db&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    volumes:&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;      - &lt;span class=&quot;token string&quot;&gt;&#39;./:/src&#39;&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;volumes:&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;  db:&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;highlight-line&quot;&gt;    driver: &lt;span class=&quot;token builtin class-name&quot;&gt;local&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This file looks somewhat similar to the above docker-compose file but below are the main differences.&lt;/p&gt;
&lt;p&gt;The first one is, here we use &lt;code&gt;- ./db/init.sql:/docker-entrypoint-initdb.d/create_tables.sql&lt;/code&gt; on line number 13. We are doing this to create the &lt;code&gt;quotes&lt;/code&gt; table and fill up the data as seen in this &lt;a href=&quot;https://github.com/geshan/nodejs-posgresql/blob/master/db/init.sql&quot;&gt;SQL file&lt;/a&gt;. This is the way to run &lt;a href=&quot;https://github.com/docker-library/docs/tree/master/postgres#initialization-scripts&quot;&gt;initialization scripts&lt;/a&gt; for Postgres with docker. This is an idempotent operation, if the data directory is filled up the &lt;code&gt;init.sql&lt;/code&gt; file won&#39;t be executed again to prevent data overriding. If we want to force override the data we will need to delete the docker volume after a &lt;code&gt;docker volume inspect&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Next, we define a new service called &lt;code&gt;api&lt;/code&gt; which builds the local &lt;code&gt;Dockerfile&lt;/code&gt; with target &lt;code&gt;production&lt;/code&gt; and names it &lt;code&gt;quotes-api&lt;/code&gt;. After that, it has a &lt;code&gt;depends_on&lt;/code&gt; definition on the &lt;code&gt;db&lt;/code&gt; container which is our Postgres container.&lt;/p&gt;
&lt;p&gt;Subsequently, it maps the host port 3000 to the exposed container port 3000 where the Node.js Express API server is running. In the environment variables, it defines &lt;code&gt;db&lt;/code&gt; as the host which maps to the above Postgres container and uses the same credentials as provided in the above definition. It &lt;a href=&quot;https://docs.docker.com/compose/compose-file/compose-file-v3/#links&quot;&gt;links&lt;/a&gt; to the Postgres container defined before the API service.&lt;/p&gt;
&lt;p&gt;Finally, it maps all the local files to the &lt;code&gt;/src&lt;/code&gt; of the container to make things run with Node.js.&lt;/p&gt;
&lt;p&gt;This file is available on &lt;a href=&quot;https://github.com/geshan/nodejs-posgresql/pull/25/files#diff-e45e45baeda1c1e73482975a664062aa56f20c03dd9d64a827aba57775bed0d3R1&quot;&gt;GitHub&lt;/a&gt; too for your reference.&lt;/p&gt;
&lt;p&gt;When we run docker-compose up on the root of this project we can see the following output:&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/docker-postgres/05docker-compose-up-postgres-and-nodejs.jpg&quot; title=&quot;Output of docker-compose up for Postgres and Node.js Express containers&quot; alt=&quot;Output of docker-compose up for Postgres and Node.js Express containers&quot; /&gt;
&lt;p&gt;As the webserver is mapped to the local port 3000, we can see the output as below when hitting &lt;code&gt;http://locahost:3000/quotes&lt;/code&gt; on any browser:&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/docker-postgres/06quotes-api-working-with-dockerized-postgres.jpg&quot; title=&quot;Quotes API working with Dockerized Node.js and PostgreSQL using docker-compose&quot; alt=&quot;Quotes API working with Dockerized Node.js and PostgreSQL using docker-compose&quot; /&gt;
&lt;p&gt;Hurray! Our Node.js Express API for Quotes is communicating correctly with the local Postgresql database as expected. If you want to quickly try the &lt;code&gt;docker-compose up&lt;/code&gt; experience clone this &lt;a href=&quot;https://github.com/geshan/nodejs-posgresql&quot;&gt;Github repository&lt;/a&gt; and try it.&lt;/p&gt;
&lt;p&gt;If &lt;a href=&quot;https://geshan.com.np/blog/2020/11/nodejs-mysql-tutorial/&quot;&gt;Node.js with MySQL&lt;/a&gt; is your flavor of choice do read this guide too. You can also try &lt;a href=&quot;https://geshan.com.np/blog/2021/10/nodejs-sqlite/&quot;&gt;Node.js with SQLite&lt;/a&gt; if that works better for you.&lt;/p&gt;
&lt;h2 id=&quot;conclusion&quot; tabindex=&quot;-1&quot;&gt;Conclusion &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/12/docker-postgres/#conclusion&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In this post, we witnessed how to run Postgres with just docker then added the docker-compose goodness to make things easier. After that, we added Postgres to an existing Node.js API to make the local development a lot easier.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I hope it makes it easier to understand how to run Postgres with Docker quickly and easily.&lt;/p&gt;
&lt;/blockquote&gt;
</content>
	</entry>
	
	<entry>
		<title>How to use JavaScript set type, a beginner&#39;s guide</title>
		<link href="https://geshan.com.np/blog/2021/12/javascript-set/"/>
		<updated>2021-12-21T10:47:45Z</updated>
		<id>https://geshan.com.np/blog/2021/12/javascript-set/</id>
		<content type="html">&lt;p&gt;JavaScript Sets are a new type of object (with ES6) that allows creating a collection of unique values. The values stored in a set can either be primitives like strings or integers or more complex types like arrays or objects. In this post, we will look into how to use Sets from a beginner’s point of view, let’s get started!&lt;/p&gt;
&lt;!-- more --&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/javascript-set/01javascript-set.jpg&quot; title=&quot;JavaScript Set a how to use it guide for beginners&quot; alt=&quot;JavaScript Set a how to use it guide for beginners&quot; /&gt;
&lt;h2 id=&quot;table-of-contents&quot; tabindex=&quot;-1&quot;&gt;Table of Contents &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/12/javascript-set/#table-of-contents&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/12/javascript-set/#table-of-contents&quot;&gt;Table of Contents&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/12/javascript-set/#what-is-a-javascript-set&quot;&gt;What is a JavaScript Set&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/12/javascript-set/#remove-duplicates-from-an-array-using-javascript-set&quot;&gt;Remove duplicates from an array using JavaScript set&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/12/javascript-set/#more-usage-of-javascript-set&quot;&gt;More usage of JavaScript Set&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/12/javascript-set/#compatibility-of-javascript-set&quot;&gt;Compatibility of JavaScript set&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/12/javascript-set/#conclusion&quot;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;what-is-a-javascript-set&quot; tabindex=&quot;-1&quot;&gt;What is a JavaScript Set &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/12/javascript-set/#what-is-a-javascript-set&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;As discussed earlier, JavaScript set is an object that only stores unique values both primitive and complex types. The uniqueness is &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set#value_equality&quot;&gt;compared&lt;/a&gt; with the &lt;code&gt;===&lt;/code&gt; operator. JavaScript set is reported to be &lt;a href=&quot;https://medium.com/@bretcameron/how-to-make-your-code-faster-using-JavaScript-sets-b432457a4a77&quot;&gt;faster&lt;/a&gt; than array’s includes method possibly because the elements in a set are unique. Let’s look at a quick and useful example of removing duplicates from an array using sets.&lt;/p&gt;
&lt;h2 id=&quot;remove-duplicates-from-an-array-using-javascript-set&quot; tabindex=&quot;-1&quot;&gt;Remove duplicates from an array using JavaScript set &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/12/javascript-set/#remove-duplicates-from-an-array-using-javascript-set&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;If there is a need to remove duplicates from an array, it can be done easily using Sets. We can deduplicate an array easily with the following ES6 code with spread operator:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; arrayWithDuplicateValues &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; uniqueValues &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Set&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;arrayWithDuplicateValues&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;uniqueValues&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The same code can be done without the use of &lt;code&gt;…&lt;/code&gt; &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax&quot;&gt;spread operator&lt;/a&gt; as follows using &lt;code&gt;Array.from&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; arrayWithDuplicateValues &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; uniqueValues &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Array&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Set&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;arrayWithDuplicateValues&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;uniqueValues&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;JavaScript Set can be used for more things too, like the one in the next section.&lt;/p&gt;
&lt;h2 id=&quot;more-usage-of-javascript-set&quot; tabindex=&quot;-1&quot;&gt;More usage of JavaScript Set &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/12/javascript-set/#more-usage-of-javascript-set&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Another interesting fact about JavaScript Set is that the items are ordered, meaning elements of&lt;br /&gt;
the set can be iterated in the insertion order. Below is another quick example:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; set01 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Set&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;this is a very long sentence&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;set01&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// has 15 unique characters including “ “ space&lt;/span&gt;&lt;br /&gt;console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;set01&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;size&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 15 - only unique characters&lt;/span&gt;&lt;br /&gt;console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;set01&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;has&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;b&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;//false&lt;/span&gt;&lt;br /&gt;console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;set01&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;has&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;a&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;//true&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;set01&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;b&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;//added to the end of the set - order maintained&lt;/span&gt;&lt;br /&gt;set01&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;has&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;b&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;// true&lt;/span&gt;&lt;br /&gt;set01&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;delete&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;b&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;set01&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;has&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;b&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;// false again&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As seen above a JavaScript Set has the &lt;code&gt;size&lt;/code&gt; attribute that has the length of the Set. Similarly, to add an element the &lt;code&gt;add&lt;/code&gt; method can be used and to check if a value is in the set the &lt;code&gt;has&lt;/code&gt; method can be utilized. The delete method can be used to delete an existing element from the set. A JavaScript Set can be iterated through as well, below are some examples:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; letter &lt;span class=&quot;token keyword&quot;&gt;of&lt;/span&gt; set01&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;br /&gt;  console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;letter&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Another way using values method on JavaScript Set is as follows:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; furnitureSet &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Set&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;table&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;chair&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;sofa&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; furnitures &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; furnitureSet&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;furnitures&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;//{ value: &#39;table&#39;, done: false }&lt;/span&gt;&lt;br /&gt;console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;furnitures&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;//{ value: &#39;chair&#39;, done: false }&lt;/span&gt;&lt;br /&gt;console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;furnitures&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;//{ value: &#39;sofa&#39;, done: false }&lt;/span&gt;&lt;br /&gt;console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;furnitures&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;done&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;//true&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The other way of showing these values without using the values method can be seen below:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; furnitureSet &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Set&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;table&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;chair&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;sofa&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;furnitureSet&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;furniture&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Furniture name: &#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; furniture&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// Furniture name:  table&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// Furniture name:  chair&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;// Furniture name:  sofa&lt;/span&gt;&lt;br /&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;That was pretty easy with a &lt;code&gt;foreach&lt;/code&gt; loop that is available on the Set object. If you are interested in other basic set operations like union, intersection, and different please do &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set#implementing_basic_set_operations&quot;&gt;read more&lt;/a&gt; about it.&lt;br /&gt;
Next, we will look into the compatibility of using JavaScript Set in the browser and Node.js.&lt;/p&gt;
&lt;h2 id=&quot;compatibility-of-javascript-set&quot; tabindex=&quot;-1&quot;&gt;Compatibility of JavaScript set &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/12/javascript-set/#compatibility-of-javascript-set&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;JavaScript Set is available on both the browser and Node.js. In Node.js it is &lt;a href=&quot;https://node.green/#ES2015-built-ins-Set&quot;&gt;available&lt;/a&gt; from version 0.12 and above. For the browser, it is generally &lt;a href=&quot;https://caniuse.com/mdn-javascript_builtins_set_set&quot;&gt;available&lt;/a&gt; on all modern browsers. It is safe to say JavaScript set can be used in both browsers and Node.js to get the maximum benefits.&lt;/p&gt;
&lt;h2 id=&quot;conclusion&quot; tabindex=&quot;-1&quot;&gt;Conclusion &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/12/javascript-set/#conclusion&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In this post, we took a quick look at how to use the JavaScript set from a beginner’s point of view. I hope it has helped you understand JavaScript (ES6) Set in a bit more detail and you will be able to use it for many things like getting unique records from a datastore after reading this. Keep learning!&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>How to read and write CSV files with Node.js</title>
		<link href="https://geshan.com.np/blog/2021/11/nodejs-read-write-csv/"/>
		<updated>2021-11-30T11:47:45Z</updated>
		<id>https://geshan.com.np/blog/2021/11/nodejs-read-write-csv/</id>
		<content type="html">&lt;p&gt;Comma-separated values more commonly known as CSV has been used for a long time as a standard text-based way to represent and transfer data. There are many ways to read and write CSV files in Node.js. In this post, we will learn how to read a CSV and write a CSV file using Node.js in an efficient way. Let’s get rolling.&lt;/p&gt;
&lt;!-- more --&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/nodejs-read-write-csv/01nodejs-read-write-csv.jpg&quot; title=&quot;How to read and write CSV files with Node.js efficiently using Fast CSV&quot; alt=&quot;How to read and write CSV files with Node.js efficiently using Fast CSV&quot; /&gt;
&lt;h2 id=&quot;table-of-contents&quot; tabindex=&quot;-1&quot;&gt;Table of contents &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/11/nodejs-read-write-csv/#table-of-contents&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/11/nodejs-read-write-csv/#more-on-csv&quot;&gt;More on CSV&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/11/nodejs-read-write-csv/#options-to-read-and-write-csv-in-node.js&quot;&gt;Options to read and write CSV in Node.js&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/11/nodejs-read-write-csv/#fast-csv-to-read-csv-files-in-node.js&quot;&gt;Fast CSV to read CSV files in Node.js&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/11/nodejs-read-write-csv/#write-csv-in-node.js-with-fast-csv&quot;&gt;Write CSV in Node.js with Fast CSV&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/11/nodejs-read-write-csv/#popular-npm-packages-for-csv&quot;&gt;Popular npm packages for CSV&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/11/nodejs-read-write-csv/#conclusion&quot;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;more-on-csv&quot; tabindex=&quot;-1&quot;&gt;More on CSV &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/11/nodejs-read-write-csv/#more-on-csv&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;A CSV file is a plain text file that contains data formatted as per the CSV &lt;a href=&quot;https://datatracker.ietf.org/doc/html/rfc4180#page-2&quot;&gt;standard&lt;/a&gt;. Every line represents a record and each field in the record is separated from the other using a special character which is comma &lt;code&gt;,&lt;/code&gt; in the case of CSV. It is easy to represent tabular data in CSV. Below is a snippet of COVID-19 vaccination data about NSW suburbs:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;State,Suburb,2019 ERP population,% Vaccinated - Dose 1,% Vaccinated - Dose 2
New South Wales,Albury,&amp;quot;52,067&amp;quot;,&amp;gt;95%,&amp;gt;95%
New South Wales,Armidale,&amp;quot;31,679&amp;quot;,92.4%,88.9%
New South Wales,Auburn,&amp;quot;86,994&amp;quot;,94.1%,91.0%
New South Wales,Bankstown,&amp;quot;147,237&amp;quot;,93.3%,89.9%
New South Wales,Bathurst,&amp;quot;39,532&amp;quot;,&amp;gt;95%,93.0%
New South Wales,Baulkham Hills,&amp;quot;124,066&amp;quot;,&amp;gt;95%,&amp;gt;95%
New South Wales,Blacktown,&amp;quot;115,631&amp;quot;,&amp;gt;95%,&amp;gt;95%
New South Wales,Blacktown - North,&amp;quot;85,385&amp;quot;,&amp;gt;95%,&amp;gt;95%
New South Wales,Blue Mountains,&amp;quot;64,747&amp;quot;,&amp;gt;95%,&amp;gt;95%
New South Wales,Botany,&amp;quot;45,823&amp;quot;,&amp;gt;95%,&amp;gt;95%
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;CSV files are used for many things, one of the prominent usages is for data import and export. Even if there is no UI created for a particular new system, data can be imported in the form of CSV mainly taken out of some spreadsheet program. This can be used as a quick start to get needed data into the system.&lt;/p&gt;
&lt;p&gt;Similarly, CSVs are great to export data out of some tables/reports. They act as a starting point that can be opened up in a spreadsheet program to do further data analysis. Undoubtedly, Node.js can be used to both parse and create CSV files, we will delve into the options in the following section.&lt;/p&gt;
&lt;h2 id=&quot;options-to-read-and-write-csv-in-node.js&quot; tabindex=&quot;-1&quot;&gt;Options to read and write CSV in Node.js &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/11/nodejs-read-write-csv/#options-to-read-and-write-csv-in-node.js&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;There are multiple NPM packages to read and/or write CSV files with Node.js. The most popular one is &lt;a href=&quot;https://github.com/C2FO/fast-csv&quot;&gt;Fast CSV&lt;/a&gt;, it is a mix of &lt;a href=&quot;https://c2fo.io/fast-csv/docs/parsing/getting-started&quot;&gt;fast-csv/parse&lt;/a&gt; to read CSV files and &lt;a href=&quot;https://c2fo.io/fast-csv/docs/formatting/getting-started&quot;&gt;fast-csv/format&lt;/a&gt; to format and write CSV files. Some other options include &lt;a href=&quot;https://github.com/mafintosh/csv-parser&quot;&gt;csv-parser&lt;/a&gt;, &lt;a href=&quot;https://github.com/ryu1kn/csv-writer&quot;&gt;csv-writer&lt;/a&gt;, &lt;a href=&quot;https://github.com/sindresorhus/neat-csv&quot;&gt;neat-csv&lt;/a&gt; and &lt;a href=&quot;https://github.com/adaltas/node-csv&quot;&gt;csv&lt;/a&gt; to name some. Details about the popularity in terms of download is discussed towards the end of this piece. It would be a good time to take a refresher on how to &lt;a href=&quot;https://geshan.com.np/blog/2021/10/nodejs-read-file-line-by-line/&quot;&gt;read file line by line in node.js&lt;/a&gt; if that interests you.&lt;/p&gt;
&lt;p&gt;All the code below will be run on Node 14 and it is expected that you know how to install npm packages with npm install. Let’s look at how to use Fast CSV to read an existing CSV file with Node.js next.&lt;/p&gt;
&lt;h2 id=&quot;fast-csv-to-read-csv-files-in-node.js&quot; tabindex=&quot;-1&quot;&gt;Fast CSV to read CSV files in Node.js &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/11/nodejs-read-write-csv/#fast-csv-to-read-csv-files-in-node.js&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Reading an existing CSV from the file system or a CSV uploaded by the user is quite easy. In the example below, we will see how to read a CSV file from the file system which has ~85K records of all the confirmed COVID-19 cases in Australia by suburb as seen in this &lt;a href=&quot;https://github.com/geshan/nodejs-csv-examples/blob/master/confirmed_cases_au_by_location.csv&quot;&gt;CSV file&lt;/a&gt;:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; fs &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;fs&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; path &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;path&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; parse &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;fast-csv&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; rows &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;fs&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;createReadStream&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;path&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;resolve&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;__dirname&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;confirmed_cases_au_by_location.csv&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;pipe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;parse&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;error&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token parameter&quot;&gt;error&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;error&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;data&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token parameter&quot;&gt;row&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;      console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;row&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token comment&quot;&gt;//each row can be written to db&lt;/span&gt;&lt;br /&gt;      rows&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;row&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;end&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token parameter&quot;&gt;rowCount&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;      console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;Parsed &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;rowCount&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt; rows&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;      console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;rows&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;81484&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;postcode&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// this data can be used to write to a db in bulk&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let’s analyze the code a bit now. First, we require the native fs and path modules. Then we require the &lt;code&gt;parse&lt;/code&gt; function from &lt;code&gt;fast-csv&lt;/code&gt; npm package. After that, we create an empty array called “rows” where we will put in all the rows read from the CSV file.&lt;/p&gt;
&lt;p&gt;Next up, a readable stream is created from the file and piped to the parse function with headers true. The headers true value means to parse the header information from each row. In case of any error, it is shown in the console, and on each row, we are logging the row and pushing it to the &lt;code&gt;rows&lt;/code&gt; array as well. When the reading ends, we &lt;code&gt;console.log&lt;/code&gt; the number for rows parsed and the &lt;code&gt;postcode&lt;/code&gt; from the last row. The above code can be referenced on &lt;a href=&quot;https://github.com/geshan/nodejs-csv-examples/blob/master/read-csv.js&quot;&gt;Github&lt;/a&gt; too.&lt;/p&gt;
&lt;p&gt;This data could easily be written to &lt;a href=&quot;https://geshan.com.np/blog/2020/11/nodejs-mysql-tutorial/&quot;&gt;MySQL&lt;/a&gt;, &lt;a href=&quot;https://geshan.com.np/blog/2021/01/nodejs-postgresql-tutorial/&quot;&gt;PostgreSQL&lt;/a&gt;, or &lt;a href=&quot;https://geshan.com.np/blog/2021/10/nodejs-sqlite/&quot;&gt;SQLite&lt;/a&gt; database using Node.js. We can run the above script with &lt;code&gt;time node read-csv.js&lt;/code&gt; which will end with the following output:&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/nodejs-read-write-csv/02nodejs-read-csv.jpg&quot; title=&quot;Read CSV file with Node.js using Fast CSV&quot; alt=&quot;Read CSV file with Node.js using Fast CSV&quot; /&gt;
&lt;p&gt;As seen above the script took only 1.87 seconds to read 81485 rows and print them on the screen too. Consequently, we will look at how to write a CSV file with Fast CSV.&lt;/p&gt;
&lt;h2 id=&quot;write-csv-in-node.js-with-fast-csv&quot; tabindex=&quot;-1&quot;&gt;Write CSV in Node.js with Fast CSV &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/11/nodejs-read-write-csv/#write-csv-in-node.js-with-fast-csv&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;To write a CSV file using Fast CSV we will use the &lt;code&gt;format&lt;/code&gt; package included in the Fast CSV npm module. Below is a quick example where we write 80K random rows to a test CSV file which could also have been data pulled in from a database:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; fs &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;fs&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; format &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;@fast-csv/format&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; fileName &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;randoms.csv&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; csvFile &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; fs&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;createWriteStream&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;fileName&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; randoms &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; min &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; max &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;90000&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; noOfRows &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;80000&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; stream &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;headers&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;stream&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;pipe&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;csvFile&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;i&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;noOfRows&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  randoms&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;br /&gt;    &lt;span class=&quot;token literal-property property&quot;&gt;characters&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; Math&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;random&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;36&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;substr&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;br /&gt;    &lt;span class=&quot;token literal-property property&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; Math&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;floor&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Math&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;random&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;max &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; min &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; min&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  stream&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;randoms&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;randoms&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;79999&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;number&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;//with randoms array, all data could have been written at the end too&lt;/span&gt;&lt;br /&gt;stream&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;fileName&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt; written with stream and &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;noOfRows&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt; rows&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Upon checking the code further, we can find out what is being done. First, the native file system (fs) module is required. Then, the format method from &lt;code&gt;fast-csv/format&lt;/code&gt; is also included. Subsequently, we define two variables one for the filename and the other one is a writable stream that points to a CSV file.&lt;/p&gt;
&lt;p&gt;Consequently, we define some more constants that will help us generate a random array of objects with 80K random strings and numbers as seen in the above loop. Before generating the number we pipe the CSV stream to the csvFile which means each time we write anything to the CSV stream it will also be written to the file.&lt;/p&gt;
&lt;p&gt;Finally, we console log the random number from the last row and end the stream. Then we also console log the filename and number of rows the example CSV file has. The above file is also available on &lt;a href=&quot;https://github.com/geshan/nodejs-csv-examples/blob/master/write-csv.js&quot;&gt;Github&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;When we run the above script with &lt;code&gt;time node write-csv.js&lt;/code&gt; it renders the following output:&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/nodejs-read-write-csv/03nodejs-write-csv.jpg&quot; title=&quot;Write CSV file with Node.js using Fast CSV&quot; alt=&quot;Write CSV file with Node.js using Fast CSV&quot; /&gt;
&lt;p&gt;As seen above, the script took only 0.52 seconds to write a CSV file with 80K rows with randomly generated values. It was fast also because of the use of streams.&lt;/p&gt;
&lt;p&gt;All the above code is available as a public &lt;a href=&quot;https://github.com/geshan/nodejs-csv-examples&quot;&gt;GitHub repository&lt;/a&gt; for your reference.&lt;/p&gt;
&lt;h2 id=&quot;popular-npm-packages-for-csv&quot; tabindex=&quot;-1&quot;&gt;Popular npm packages for CSV &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/11/nodejs-read-write-csv/#popular-npm-packages-for-csv&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Fast CSV is surely not the only package to parse and write CSVs, there are other packages too. A quick comparison on &lt;a href=&quot;https://www.npmtrends.com/csv-parser-vs-csv-writer-vs-fast-csv-vs-neat-csv-vs-csv&quot;&gt;NPM trends&lt;/a&gt; for 5 popular CSV packages show the following results:&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/nodejs-read-write-csv/04nodejs-csv-libs-compare.jpg&quot; title=&quot;Compare popular Node.js CSV packages on NPM Trends&quot; alt=&quot;Compare popular Node.js CSV packages on NPM Trends&quot; /&gt;
&lt;p&gt;Fast CSV has more than 900K downloads a week that is one of the most popular options to work with CSV in Node.js. &lt;a href=&quot;https://github.com/adaltas/node-csv&quot;&gt;CSV parse&lt;/a&gt; which is not compared here has more than 1.8 million downloads a week, still, it is not super easy to use as Fast CSV but surely has a host of other features. The choice of the right package can be left on the needs of the project.&lt;/p&gt;
&lt;h2 id=&quot;conclusion&quot; tabindex=&quot;-1&quot;&gt;Conclusion &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/11/nodejs-read-write-csv/#conclusion&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;We have seen how to read and write CSV files using Node.js with the Fast CSV npm module. With less than 50 lines of code in total, we were able to read and write relatively big CSV files using Node.js in under 2 seconds which is pretty good.&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>The difference in mindset needed for a stable software product vs a new feature/project</title>
		<link href="https://geshan.com.np/blog/2021/11/software-engineer-mindset/"/>
		<updated>2021-11-27T11:37:45Z</updated>
		<id>https://geshan.com.np/blog/2021/11/software-engineer-mindset/</id>
		<content type="html">&lt;p&gt;If you have worked in building software for some years, possibly more than once the work has been either &amp;quot;some changes&amp;quot; on an existing project or a completely new greenfield project. Already working a.k.a brownfield products have users using it whereas new projects don&#39;t have the volume of users till it goes fully on production in some way. In this post, we will evaluate the differences in the mindset software engineers need to have for a stable software product vs a new greenfield project. Let&#39;s get started!&lt;/p&gt;
&lt;!-- more --&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/software-engineer-mindset/01software-engineer-mindset.jpg&quot; title=&quot;Software engineer mindset differences needed for working on a stable software product vs a new feature/project&quot; alt=&quot;Software engineer mindset differences needed for working on a stable software product vs a new feature/project&quot; /&gt;
&lt;h2 id=&quot;table-of-contents&quot; tabindex=&quot;-1&quot;&gt;Table of contents &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/11/software-engineer-mindset/#table-of-contents&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/11/software-engineer-mindset/#what-is-a-stable-software-product&quot;&gt;What is a stable software product?&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/11/software-engineer-mindset/#example-stable-product&quot;&gt;Example stable product&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/11/software-engineer-mindset/#feature-completeness-is-a-must-for-a-stable-product&quot;&gt;Feature completeness is a must for a stable product&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/11/software-engineer-mindset/#qualities-of-a-new-software-project&quot;&gt;Qualities of a new software project&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/11/software-engineer-mindset/#example-new-feature&quot;&gt;Example new feature&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/11/software-engineer-mindset/#fail-fast-and-iterate-is-the-key-to-success-in-a-new-project&quot;&gt;Fail fast and iterate is the key to success in a new project&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/11/software-engineer-mindset/#conclusion&quot;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;what-is-a-stable-software-product%3F&quot; tabindex=&quot;-1&quot;&gt;What is a stable software product? &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/11/software-engineer-mindset/#what-is-a-stable-software-product%3F&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Before we go deeper into the mental makeup for a stable software product let&#39;s define what we mean by that. A stable software product is a form of software that has multiple concurrent users and could be made up of numerous subsystems working together. Some of these subsystems can be old but they serve the purpose and make the business money. For example, the public-facing website of an established e-commerce retailer is surely a stable software product. The customers interact with it each day and some customers buy things using it daily. If there is any bug on the critical path of buying a product it would generally be solved within hours if not days.&lt;/p&gt;
&lt;p&gt;Depending on the technical decisions and architecture there will be an API used by the mobile applications for our popular e-commerce retailer. We can also assume that at any given time even in the wee hours around a hundred people are using the website and mobile apps. The business receives thousands of orders a day.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;To get a thousand orders per day with a modest &lt;a href=&quot;https://www.invespcro.com/blog/the-average-website-conversion-rate-by-industry/&quot;&gt;conversion rate&lt;/a&gt; of 2.5% the retailer would need at least 40000 visitors. That is 27.77 (40000/1440) visitors each minute.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;example-stable-product&quot; tabindex=&quot;-1&quot;&gt;Example stable product &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/11/software-engineer-mindset/#example-stable-product&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;As an example let&#39;s pick pricing on a size level for products. Let&#39;s assume our amazing e-tailer sold all the sizes of the same product for the same price. Now they want to add Beauty products to the catalog assortment. With beauty products like fragrance, a 30 ml bottle can sell for $75 and a 50 ml bottle can sell at $95, as seen below:&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/software-engineer-mindset/02size-level-pricing.jpg&quot; title=&quot;Example of pricing for a product dependent on the sizes&quot; alt=&quot;Example of pricing for a product dependent on the sizes&quot; /&gt;
&lt;p&gt;Any change on such a high-stakes system will need a different software engineer mindset than a new greenfield project that has not proven the product-market fit yet. Next, we will discuss the mental process needed while working for a stable money-earning product.&lt;/p&gt;
&lt;h3 id=&quot;feature-completeness-is-a-must-for-a-stable-product&quot; tabindex=&quot;-1&quot;&gt;Feature completeness is a must for a stable product &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/11/software-engineer-mindset/#feature-completeness-is-a-must-for-a-stable-product&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;For an existing product, the main expectation will be feature completeness. As the change will be surely used by 1000s of customers when completed it has to be feature complete. What to do surely rests on the product owner&#39;s shoulders, still with proper iteration planning it can be done well.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;In the above price range on size example, it is directly related to the critical path. Any change released to customers not only has to be feature complete it has to be very well tested too.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;It needs to be built in a way where the feature can handle the current load of 1000s of orders per day equating to 100K requests per day.&lt;/p&gt;
&lt;p&gt;Of course, such changes can also be released gradually and incrementally with the use of feature flags. The main ethos here is to avoid risk when needed and test the software very well before it goes out to customers.&lt;/p&gt;
&lt;h2 id=&quot;qualities-of-a-new-software-project&quot; tabindex=&quot;-1&quot;&gt;Qualities of a new software project &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/11/software-engineer-mindset/#qualities-of-a-new-software-project&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Let&#39;s define what a new greenfield software project is. A new software project would not have been released to customers yet and the new feature is under active development. The business has some assumptions on how the customers will react and receive this new feature but there isn’t any actual customer usage data to verify the assumption.&lt;/p&gt;
&lt;h3 id=&quot;example-new-feature&quot; tabindex=&quot;-1&quot;&gt;Example new feature &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/11/software-engineer-mindset/#example-new-feature&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;In the same e-commerce retailer, a decision has been made to introduce a shipping fee subscription option for customers. With this subscription say for $120 a year the customer never needs to pay the shipping fee for any orders placed in that period.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Even though it is a customer-facing feature the error budget is higher than checkout and a certain amount of tech debt is expected.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The tech debt is a result of trying to release the subscription feature faster but with plans to do it in a better way after the idea has been tested and validated.&lt;/p&gt;
&lt;p&gt;This project can be done in multiple ways. One of them can be to build a new &lt;a href=&quot;https://geshan.com.np/blog/2018/10/dont-code-your-microservice-like-a-monolith/&quot;&gt;microservice&lt;/a&gt; to handle the subscription for the shipping fee. Let&#39;s suppose it was built as a new &lt;a href=&quot;https://geshan.com.np/blog/2018/10/moving-from-a-and-b-to-~150-microservices/&quot;&gt;subscription microservice&lt;/a&gt;. So it has a completely new codebase and it is more like a customer experiment to see if the business can get 100 paying customers within a given timeframe. An example screenshot is below:&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/software-engineer-mindset/03shipping-fee-subscription.jpg&quot; title=&quot;Example of shipping fee subscription for an e-commerce retailer&quot; alt=&quot;Example of shipping fee subscription for an e-commerce retailer&quot; /&gt;
&lt;p&gt;As this is a new feature, it doesn&#39;t have any customers and the team has decided to use feature flags. Any change will first be released to the team, then to the company&#39;s staff and the to 2% of customers. Only after the bugs have been smoothed out, the release would gradually climb up to 100% of customers in up to 2 weeks after the first customer release which stands on the &lt;a href=&quot;https://geshan.com.np/blog/2018/10/deployment-is-not-release/&quot;&gt;deployment is not a release&lt;/a&gt; philosophy. This type of greenfield project that validates the idea fast requires a different software engineer mindset than making the project feature complete. We discuss the mental processes in the following section.&lt;/p&gt;
&lt;h3 id=&quot;fail-fast-and-iterate-is-the-key-to-success-in-a-new-project&quot; tabindex=&quot;-1&quot;&gt;Fail fast and iterate is the key to success in a new project &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/11/software-engineer-mindset/#fail-fast-and-iterate-is-the-key-to-success-in-a-new-project&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;On the contrary to a stable project, for a new feature, fast iteration to get feedback is more important. The mindset should be more like let&#39;s get this to our customers, which could be the company&#39;s staff to start with them to get the first 100 subscribing customers to the service. Fail fast is accepted and feature completeness and rigorous testing are not expected in such projects. It is like Agile 101.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Given the error budget and release to x% of customers, the new feature can be slightly less tested than the above price range example that is on the critical path.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;As the subscription idea has not been verified some technical shortcuts can and will be taken. For example, the internal tool to view the subscriptions may not even have pagination in the first iteration and of course, it will be just usable being an internal tool. You can read more about the difference between &lt;a href=&quot;https://geshan.com.np/blog/2020/09/software-engineer-on-internal-product-vs-customer-facing-applications-/&quot;&gt;working on an internal product vs a customer-facing one&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The main goal here is to get the working software possibly a bit buggy out the customers to get to the target of getting those first 100 customers which is the fail fast and iterate faster mindset. Taking some shortcuts is allowed and expected. The software does not need to be built in a way to handle 1000s of concurrent users at first, it can be made robust and &lt;a href=&quot;https://geshan.com.np/blog/2020/12/software-scalability/&quot;&gt;scalable software&lt;/a&gt; after the idea has been validated.&lt;/p&gt;
&lt;h2 id=&quot;conclusion&quot; tabindex=&quot;-1&quot;&gt;Conclusion &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/11/software-engineer-mindset/#conclusion&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;As discussed above, we saw that for the same e-tailer a change in the critical path requires rigorous testing and a feature completeness mindset from the software engineer. Whereas in a new feature not validated by the customers the focus is on iteration and getting working software out quickly.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;As a software engineer being able to switch quickly between these two mindsets and using tools and techniques at disposal like feature flags help us shine at our work.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Software engineering is a team sport, so work cohesively with your team and communicate such factors upfront and in an easy-to-understand way to get the most out of the project with the appropriate and relevant mindset.&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>Node.js SQLite: Build a simple REST API with Express step-by-step</title>
		<link href="https://geshan.com.np/blog/2021/10/nodejs-sqlite/"/>
		<updated>2021-10-29T10:50:35Z</updated>
		<id>https://geshan.com.np/blog/2021/10/nodejs-sqlite/</id>
		<content type="html">&lt;p&gt;Node.js can be used very well with relational databases and SQLite is no exception. In this post, we will build a simple REST API for Quotes step-by-step with SQLite and Node.js using the Express Js framework step-by-step.&lt;/p&gt;
&lt;!-- more --&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/nodejs-sqlite/01nodejs-sqlite.jpg&quot; title=&quot;Build Node.js SQLite REST API with Express js&quot; alt=&quot;Build Node.js SQLite REST API with Express js&quot; /&gt;
&lt;h2 id=&quot;table-of-contents&quot; tabindex=&quot;-1&quot;&gt;Table of contents &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/10/nodejs-sqlite/#table-of-contents&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/10/nodejs-sqlite/#prerequisites&quot;&gt;Prerequisites&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/10/nodejs-sqlite/#sqlite-and-node.js&quot;&gt;SQLite and Node.js&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/10/nodejs-sqlite/#setup-sqlite-database-with-quote-table&quot;&gt;Setup SQLite database with Quote table&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/10/nodejs-sqlite/#setup-express-with-better-sqlite-3&quot;&gt;Setup Express with Better SQLite 3&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/10/nodejs-sqlite/#get-quotes-api-with-pagination&quot;&gt;Get Quotes API with pagination&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/10/nodejs-sqlite/#post-api-to-save-a-new-quote-with-node.js-sqlite&quot;&gt;Post API to save a new quote with Node.js SQLite&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/10/nodejs-sqlite/#next-steps&quot;&gt;Next steps&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/10/nodejs-sqlite/#tldr-quick-start&quot;&gt;TLDR quick start&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/10/nodejs-sqlite/#conclusion&quot;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;prerequisites&quot; tabindex=&quot;-1&quot;&gt;Prerequisites &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/10/nodejs-sqlite/#prerequisites&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Before we dive into the code, below are some good to have prerequisites:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;You have a general working knowledge of Node.js and Express Js.&lt;/li&gt;
&lt;li&gt;You have Node.js (preferably latest LTS) running on your machine or on have &lt;a href=&quot;https://geshan.com.np/blog/2020/11/nodejs-with-docker/&quot;&gt;Docker with Node.js&lt;/a&gt; running&lt;/li&gt;
&lt;li&gt;SQLite is installed and running on your system, you can get it from &lt;a href=&quot;https://www.sqlite.org/download.html&quot;&gt;here&lt;/a&gt; and try &lt;code&gt;sqlite3 --version&lt;/code&gt; after it is installed.&lt;/li&gt;
&lt;li&gt;Any prior experience with the SQLite database would be helpful but not essential.&lt;/li&gt;
&lt;li&gt;Some git experience will be good to have.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;In the next stop of this Node.js SQLite tutorial, we will set up the database.&lt;/p&gt;
&lt;h2 id=&quot;sqlite-and-node.js&quot; tabindex=&quot;-1&quot;&gt;SQLite and Node.js &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/10/nodejs-sqlite/#sqlite-and-node.js&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;There is no doubt that SQLite is the &lt;a href=&quot;https://www.sqlite.org/mostdeployed.html&quot;&gt;most deployed and used database&lt;/a&gt;, every mobile phone has it, every Mac and windows 10 machine has in addition to countless millions of other applications. Unlike other relational databases that have a server where clients connect to like MySQL or PostgreSQL, SQLite is a &lt;a href=&quot;https://www.sqlite.org/selfcontained.html&quot;&gt;self-contained&lt;/a&gt; database. It works as a stand-alone file but still packs the punch with a long list of &lt;a href=&quot;https://www.sqlite.org/fullsql.html&quot;&gt;features&lt;/a&gt;. SQLite is &lt;a href=&quot;https://www.sqlite.org/hirely.html&quot;&gt;ultra-reliable&lt;/a&gt; and &lt;a href=&quot;https://www.sqlite.org/fasterthanfs.html&quot;&gt;fast&lt;/a&gt;. It was developed to &lt;a href=&quot;https://corecursive.com/066-sqlite-with-richard-hipp/&quot;&gt;work offline in a battleship&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If SQLite is not really a client-server architecture relational database would there be any use-case for using Node.js with it? Yes, there are many, for instance, if we create an offline-first application that needs a relational database the only choice would be SQLite. Some people even run integration or end-to-end &lt;a href=&quot;https://medium.com/swlh/laravel-5-8-testing-with-sqlite-899d0fdd3494&quot;&gt;tests&lt;/a&gt; on SQLite where the main database of the application is a client server-based database. Usually, an object-relational mapper (ORM) is utilized to do this kind of seamless database swap. Another use-case can be if we are building an Electron app and need a database to support any actions offline. SQLite can even be leveraged as temporary storage to unblock the user to perform an action offline which can later be synced with another API/database when the device is back online. There can be many other usages for this demo we will build a simple Quotes API.&lt;/p&gt;
&lt;h2 id=&quot;setup-sqlite-database-with-quote-table&quot; tabindex=&quot;-1&quot;&gt;Setup SQLite database with Quote table &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/10/nodejs-sqlite/#setup-sqlite-database-with-quote-table&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;We will build a Quotes API with SQLite as our database of choice. For this, we will first create a SQLite database with:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;mkdir&lt;/span&gt; nodejs-sqlite&lt;br /&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;cd&lt;/span&gt; nodjs-sqlite&lt;br /&gt;sqlite3 quotes.db&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;First, we create a folder called &lt;code&gt;nodejs-sqlite&lt;/code&gt; then went into it. After that, we created the database with the &lt;code&gt;sqlite3&lt;/code&gt; command. It will give us a SQLite prompt like the below:&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/nodejs-sqlite/02sqlite-cli.jpg&quot; title=&quot;SQLite CLI to run SQL commands&quot; alt=&quot;SQLite CLI to run SQL commands&quot; /&gt;
&lt;p&gt;We can create the “quotes” table with the following SQL:&lt;/p&gt;
&lt;pre class=&quot;language-sql&quot;&gt;&lt;code class=&quot;language-sql&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;TABLE&lt;/span&gt; quote &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;br /&gt;  id &lt;span class=&quot;token keyword&quot;&gt;INTEGER&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;PRIMARY&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;KEY&lt;/span&gt; AUTOINCREMENT&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  quote &lt;span class=&quot;token keyword&quot;&gt;text&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;NULL&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;UNIQUE&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  author &lt;span class=&quot;token keyword&quot;&gt;text&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  created_at &lt;span class=&quot;token keyword&quot;&gt;DATETIME&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;DEFAULT&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;CURRENT_TIMESTAMP&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;NULL&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the &lt;code&gt;quote&lt;/code&gt; table is created, we will insert some quotes for later testing by executing the SQL query as seen below:&lt;/p&gt;
&lt;pre class=&quot;language-sql&quot;&gt;&lt;code class=&quot;language-sql&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;INSERT&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;INTO&lt;/span&gt; quote &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;quote&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; author&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;VALUES&lt;/span&gt; &lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;There are only two kinds of languages: the ones people complain about and the ones nobody uses.&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Bjarne Stroustrup&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Any fool can write code that a computer can understand. Good programmers write code that humans can understand.&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Martin Fowler&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;First, solve the problem. Then, write the code.&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;John Johnson&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Java is to JavaScript what car is to Carpet.&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Chris Heilmann&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Always code as if the guy who ends up maintaining your code will be a violent psychopath who knows where you live.&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;John Woods&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;I&#39;&#39;m not a great programmer; I&#39;&#39;m just a good programmer with great habits.&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Kent Beck&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Truth can only be found in one place: the code.&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Robert C. Martin&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;If you have to spend effort looking at a fragment of code and figuring out what it&#39;&#39;s doing, then you should extract it into a function and name the function after the &quot;what&quot;.&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Martin Fowler&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;The real problem is that programmers have spent far too much time worrying about efficiency in the wrong places and at the wrong times; premature optimization is the root of all evil (or at least most of it) in programming.&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Donald Knuth&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;SQL, Lisp, and Haskell are the only programming languages that I’ve seen where one spends more time thinking than typing.&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Philip Greenspun&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Deleted code is debugged code.&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Jeff Sickel&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;There are two ways of constructing a software design: One way is to make it so simple that there are obviously no deficiencies and the other way is to make it so complicated that there are no obvious deficiencies.&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;C.A.R. Hoare&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Simplicity is prerequisite for reliability.&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Edsger W. Dijkstra&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;There are only two hard things in Computer Science: cache invalidation and naming things.&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Phil Karlton&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Measuring programming progress by lines of code is like measuring aircraft building progress by weight.&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Bill Gates&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Controlling complexity is the essence of computer programming.&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Brian Kernighan&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;The only way to learn a new programming language is by writing programs in it.&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Dennis Ritchie&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After inserting the 17 rows, if we run `SELECT * FROM quote” we will see an output as follows:&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/nodejs-sqlite/03quotes-on-sqlite.jpg&quot; title=&quot;Quotes on SQLite database table with SQL select&quot; alt=&quot;Quotes on SQLite database table with SQL select&quot; /&gt;
&lt;p&gt;Next up, we will set up Express.js to show the quotes pulled in from the database we just created.&lt;/p&gt;
&lt;h2 id=&quot;setup-express-with-better-sqlite-3&quot; tabindex=&quot;-1&quot;&gt;Setup Express with Better SQLite 3 &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/10/nodejs-sqlite/#setup-express-with-better-sqlite-3&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;There are multiple ways to set up Express js, we will use NPM to set up express. To setup express, we will run the following commands in the same directory that has the &lt;code&gt;quotes.db&lt;/code&gt; file:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;npm&lt;/span&gt; init -y&lt;br /&gt;&lt;span class=&quot;token function&quot;&gt;npm&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;install&lt;/span&gt; express better-sqlite3&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The first command will set up the npm project with the default setting. It will also create the package.json file. The second command will install “express” and “better-sqlite3” NPM packages that we need to create our Quotes API.&lt;/p&gt;
&lt;h2 id=&quot;get-quotes-api-with-pagination&quot; tabindex=&quot;-1&quot;&gt;Get Quotes API with pagination &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/10/nodejs-sqlite/#get-quotes-api-with-pagination&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;To add the GET Quotes API, we will add an &lt;code&gt;index.js&lt;/code&gt; file on the root of the project besides &lt;code&gt;package.json&lt;/code&gt; that will have the following contents:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; express &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;express&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; app &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;express&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; port &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3000&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt; process&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;env&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;PORT&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; quotesRouter &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;./routes/quotes&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;app&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;/&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;req&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; res&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  res&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token literal-property property&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;alive&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;app&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;use&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;/quotes&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; quotesRouter&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;app&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;listen&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;port&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;Example app listening at http://localhost:&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;port&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The above &lt;code&gt;index.js&lt;/code&gt; will be our server with Express for this Node.js SQLite demo tutorial. In this file we require express and set it up with 2 routes, the root &lt;code&gt;/&lt;/code&gt; just sends back an alive message. It acts more like a health check/ping to the application.&lt;/p&gt;
&lt;p&gt;Consequently, we set up the &lt;code&gt;/quotes&lt;/code&gt; route which is handled by the quotes router file defined in &lt;code&gt;/routes/quotes&lt;/code&gt; explained next. After then we listen to the port and start the server.&lt;/p&gt;
&lt;p&gt;Next, we will add a file &lt;code&gt;routes/quotes.js&lt;/code&gt; as referenced on &lt;code&gt;/index.js&lt;/code&gt; with the following contents:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; express &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;express&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; router &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; express&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Router&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; quotes &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;../services/quotes&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;/* GET quotes listing. */&lt;/span&gt;&lt;br /&gt;router&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;/&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;req&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; res&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; next&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    res&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;quotes&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getMultiple&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;req&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;query&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;page&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;catch&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;err&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;Error while getting quotes &lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; err&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;message&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token function&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;err&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;module&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;exports &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; router&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In this &lt;code&gt;/routes/quotes.js&lt;/code&gt; file we create a new express router and add a get &lt;code&gt;/&lt;/code&gt; route which will listen to &lt;code&gt;/quotes&lt;/code&gt; route. We do a try-catch and call the next middleware if there is an error.&lt;/p&gt;
&lt;p&gt;It also requires the &lt;code&gt;/services/quotes.js&lt;/code&gt; file from this file we call the &lt;code&gt;getMultiple&lt;/code&gt; function to get multiple quotes passing the page from the query parameter which will be parsed as &lt;code&gt;/quotes?page=1&lt;/code&gt; from the query string.&lt;/p&gt;
&lt;p&gt;Next up, we will create the quotes service at &lt;code&gt;/services/quotes.js&lt;/code&gt; which will contain the following things:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; db &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;../services/db&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; config &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;../config&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;getMultiple&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;page &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; offset &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;page &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; config&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;listPerPage&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; data &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; db&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;SELECT * FROM quote LIMIT ?,?&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;offset&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; config&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;listPerPage&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; meta &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;page&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    data&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;    meta&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;module&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;exports &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  getMultiple&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In this file we require two other files, first one is &lt;code&gt;/services/db.js&lt;/code&gt; which will be the entry point to the database that will run queries on the database. The next one is the &lt;code&gt;/config.js&lt;/code&gt; that has configuration options like the number of rows we want to show per page put in as &lt;code&gt;listPerPage&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;This file has a &lt;code&gt;getMultiple&lt;/code&gt; method that is used to query multiple quotes from the database. It uses an easy offset calculator based on the page number and list per page config. The offset is passed in the query to get multiple quotes. Limit and offset are used to enable easy pagination in the above code.&lt;/p&gt;
&lt;p&gt;After that we will create the referenced &lt;code&gt;/services/db.js&lt;/code&gt; with the following content:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; sqlite &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;better-sqlite3&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; path &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;path&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; db &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;sqlite&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;path&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;resolve&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;quotes.db&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token literal-property property&quot;&gt;fileMustExist&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;sql&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; params&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; db&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;prepare&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;sql&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;all&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;params&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;module&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;exports &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  query&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This &lt;code&gt;/services.db.js&lt;/code&gt; file is the only file that communicates with the SQLite database. It has the full path of the database file &lt;code&gt;quotes.db&lt;/code&gt; and we also require and use the &lt;code&gt;better-sqlite3&lt;/code&gt; NPM package to run our SQL queries.&lt;/p&gt;
&lt;p&gt;This file has only one function &lt;code&gt;query&lt;/code&gt; that uses the &lt;a href=&quot;https://github.com/JoshuaWise/better-sqlite3/blob/master/docs/api.md#preparestring---statement&quot;&gt;prepare&lt;/a&gt; function from our library of choice. The prepare function creates a &lt;a href=&quot;https://en.wikipedia.org/wiki/Prepared_statement&quot;&gt;prepared statement&lt;/a&gt;. By using &lt;a href=&quot;https://github.com/JoshuaWise/better-sqlite3/blob/master/docs/api.md#allbindparameters---array-of-rows&quot;&gt;all&lt;/a&gt; method with the prepared statement it returns all the rows that are retrured after running the query. In our case with the offset and limit, it will return 10 rows maximum.&lt;/p&gt;
&lt;p&gt;The quotes service also required the config.js file at the root of the project and it will have the following code:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; env &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; process&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;env&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; config &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token literal-property property&quot;&gt;listPerPage&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; env&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;LIST_PER_PAGE&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;module&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;exports &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; config&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;/config.js&lt;/code&gt; is like a helper file used to store any configuration or credentials. For this Node.js SQLite example, we only store the list per page config which is either taken from the environment variable or if that is not available it falls back to the value 10.&lt;/p&gt;
&lt;p&gt;After adding all these files, if we run the server with node or &lt;a href=&quot;https://geshan.com.np/blog/2021/02/nodemon/&quot;&gt;nodemon&lt;/a&gt; command like:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;node&lt;/span&gt; index.js&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can see the following output on the browser when we hit &lt;code&gt;http://localhost:3000&lt;/code&gt;&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/nodejs-sqlite/04nodejs-sqlite-get-quotes.jpg&quot; title=&quot;Quotes on the GET API with Node.js and SQLite using Express&quot; alt=&quot;Quotes on the GET API with Node.js and SQLite using Express&quot; /&gt;
&lt;p&gt;So, what happened here is the GET request to get multiple quotes traveled in the following way:&lt;/p&gt;
&lt;p&gt;And it fetched the data from the &lt;code&gt;quotes.db&lt;/code&gt; SQLite database and rendered it back to the browser. As the pagination is also set up we can try &lt;code&gt;https://localhost:3000/quotes?page=2&lt;/code&gt; which will give us 7 quotes from id 11 to 17, if we try page 3 it will return an empty data array as there are only 17 quotes in the SQLite database. All the code added for this step can be viewed as a &lt;a href=&quot;https://github.com/geshan/nodejs-sqlite/pull/2&quot;&gt;pull request&lt;/a&gt; for your reference.&lt;/p&gt;
&lt;p&gt;In the following section, we will add the POST Quote API which will enable us to create a new quote.&lt;/p&gt;
&lt;h2 id=&quot;post-api-to-save-a-new-quote-with-node.js-sqlite&quot; tabindex=&quot;-1&quot;&gt;Post API to save a new quote with Node.js SQLite &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/10/nodejs-sqlite/#post-api-to-save-a-new-quote-with-node.js-sqlite&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;To add a new Quote we will crate a POST quote API for this Node.js SQLite tutorial. Before that, we need to make sure that Express can accept JSON in the body. To enable Express js accepting JSON in the request body we will need to add the following line after the Express app has been initialized in the &lt;code&gt;/index.js&lt;/code&gt; file.&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;app&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;use&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;express&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Below this line our routes will be placed. Consequently we will add the POST quote route in the &lt;code&gt;/routes/quotes.js&lt;/code&gt; file as follows:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;/* POST quote */&lt;/span&gt;&lt;br /&gt;router&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;/&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;req&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; res&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; next&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    res&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;quotes&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;req&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;body&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;catch&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;err&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;Error while adding quotes &lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; err&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;message&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token function&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;err&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here we added a new route to POST quotes. It calls the create method in the quotes service and sends the response back as JSON. If there is any error while creating the new quote on SQLite with Nodejs it will log the error and call the &lt;code&gt;next&lt;/code&gt; middleware.&lt;/p&gt;
&lt;p&gt;Subsequently, we will add the create function in the &lt;code&gt;/services/quotes.js&lt;/code&gt; as below:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;validateCreate&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;quote&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; messages &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;  console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;quote&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;quote&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    messages&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;No object is provided&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;quote&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;quote&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    messages&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Quote is empty&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;quote&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;author&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    messages&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Author is empty&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;  &lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;messages&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; error &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Error&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;messages&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    error&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;statusCode &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;400&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;throw&lt;/span&gt; error&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;quoteObj&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token function&quot;&gt;validateCreate&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;quoteObj&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;quote&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; author&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; quoteObj&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; result &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; db&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;INSERT INTO quote (quote, author) VALUES (@quote, @author)&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;quote&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; author&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; message &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Error in creating quote&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;result&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;changes&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    message &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Quote created successfully&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;message&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In the above code snippet, we have added the 2 methods &lt;code&gt;validateCreate&lt;/code&gt; and  &lt;code&gt;create&lt;/code&gt; in the quotes service. This create method runs the insert query to add a new quote to the database after the validation has passed. In the validating method, we check if the quote and author exist, if any of the two is missing an error with HTTP status code 400 is sent back. In a more real-world application, the &lt;a href=&quot;https://github.com/sideway/joi&quot;&gt;Joi&lt;/a&gt; NPM package can be used for better validation.&lt;/p&gt;
&lt;p&gt;Notice, what we have called the &lt;code&gt;db.run&lt;/code&gt; function not &lt;code&gt;db.query&lt;/code&gt; as in the get quotes call. We will add this &lt;code&gt;run&lt;/code&gt; function in the &lt;code&gt;/services/db.js&lt;/code&gt; file as seen below:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;sql&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; params&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; db&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;prepare&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;sql&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;params&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Both the &lt;code&gt;run&lt;/code&gt; function in &lt;code&gt;/sevices/db.js&lt;/code&gt; and the &lt;code&gt;create&lt;/code&gt; function in &lt;code&gt;/services/quotes.js&lt;/code&gt; will need to be exposed out being included in the &lt;code&gt;module.exports&lt;/code&gt; definition.&lt;/p&gt;
&lt;p&gt;After that given our server is running, we can run the following cURL command to insert a new code:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;curl&lt;/span&gt; -i -X POST -H &lt;span class=&quot;token string&quot;&gt;&#39;Accept: application/json&#39;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;\&lt;/span&gt;&lt;br /&gt;    -H &lt;span class=&quot;token string&quot;&gt;&#39;Content-type: application/json&#39;&lt;/span&gt; http://localhost:3000/quotes &lt;span class=&quot;token punctuation&quot;&gt;\&lt;/span&gt;&lt;br /&gt;    --data &lt;span class=&quot;token string&quot;&gt;&#39;{&quot;quote&quot;:&quot;Before software can be reusable it first has to be usable.&quot;,&quot;author&quot;:&quot;Ralph Johnson&quot;}&#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It will result in the following output:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;HTTP/1.1 &lt;span class=&quot;token number&quot;&gt;200&lt;/span&gt; OK&lt;br /&gt;X-Powered-By: Express&lt;br /&gt;Content-Type: application/json&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token assign-left variable&quot;&gt;charset&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;utf-8&lt;br /&gt;Content-Length: &lt;span class=&quot;token number&quot;&gt;40&lt;/span&gt;&lt;br /&gt;ETag: W/&lt;span class=&quot;token string&quot;&gt;&quot;28-Gw37o554emBLJSQVDFBkjoN6exA&quot;&lt;/span&gt;&lt;br /&gt;Date: Wed, &lt;span class=&quot;token number&quot;&gt;27&lt;/span&gt; Oct &lt;span class=&quot;token number&quot;&gt;2021&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;11&lt;/span&gt;:17:29 GMT&lt;br /&gt;Connection: keep-alive&lt;br /&gt;Keep-Alive: &lt;span class=&quot;token assign-left variable&quot;&gt;timeout&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;message&quot;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Quote created successfully&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Hurray! Our add quotes API is also working too. All the code to introduce the POST API to add a new quote can be seen in this &lt;a href=&quot;https://github.com/geshan/nodejs-sqlite/pull/3&quot;&gt;pull request&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;next-steps&quot; tabindex=&quot;-1&quot;&gt;Next steps &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/10/nodejs-sqlite/#next-steps&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;For your own practice, you can add the update (PUT) and delete endpoints to get a better hold of how to do a full-on CRUD API.&lt;/p&gt;
&lt;h2 id=&quot;tldr-quick-start&quot; tabindex=&quot;-1&quot;&gt;TLDR quick start &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/10/nodejs-sqlite/#tldr-quick-start&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;All the code for this tutorial is available in a public GitHub repository for your reference. To get started quickly for the thing that has been built please follow the steps below:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Clone the repository with &lt;code&gt;git clone git@github.com:geshan/nodejs-sqlite.git&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Then execute &lt;code&gt;cd nodejs-sqlite&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;After that, run: &lt;code&gt;npm install &amp;amp;&amp;amp; npm start&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Subsequently, hit &lt;code&gt;http://loalhost:3000/quote&lt;/code&gt; on your favorite browser&lt;/li&gt;
&lt;li&gt;You should see the following:&lt;/li&gt;
&lt;/ol&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/nodejs-sqlite/04nodejs-sqlite-get-quotes.jpg&quot; title=&quot;Quotes on the GET API with Node.js and SQLite using Express&quot; alt=&quot;Quotes on the GET API with Node.js and SQLite using Express&quot; /&gt;
&lt;h2 id=&quot;conclusion&quot; tabindex=&quot;-1&quot;&gt;Conclusion &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/10/nodejs-sqlite/#conclusion&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In this tutorial about Node.js and SQLite, we have learned how to create a minimal REST API for Quotes. This is more like a starting point to build bigger things.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;You can use the open-source &lt;a href=&quot;https://github.com/geshan/nodejs-sqlite&quot;&gt;Github repository&lt;/a&gt; to use this example as a base to build your own API with Node.js and SQLite using the Express.js framework. Best of luck!&lt;/p&gt;
&lt;/blockquote&gt;
</content>
	</entry>
	
	<entry>
		<title>4 ways to read file line by line in Node.js</title>
		<link href="https://geshan.com.np/blog/2021/10/nodejs-read-file-line-by-line/"/>
		<updated>2021-10-08T10:30:35Z</updated>
		<id>https://geshan.com.np/blog/2021/10/nodejs-read-file-line-by-line/</id>
		<content type="html">&lt;p&gt;There are multiple ways to read a file line by line with Node.js. In Node.js files can be read in sync way or in an async way. With the async path, it is possible to read large files without loading all the content of the file into memory.&lt;/p&gt;
&lt;p&gt;Reading the whole file at once will make the process memory intensive. With the ability to load and read a file line by line it enables us to stop the process at any step as per need. In this post, we will look into 3 ways to read a file line by line using Node.js with memory usage comparison.&lt;/p&gt;
&lt;!-- more --&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/nodejs-read-file-line-by-line/01nodejs-read-file-line-by-line.jpg&quot; title=&quot;4 ways to read file line by line with Node.js&quot; alt=&quot;4 ways to read file line by line with Node.js&quot; /&gt;
&lt;h2 id=&quot;table-of-contents&quot; tabindex=&quot;-1&quot;&gt;Table of contents &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/10/nodejs-read-file-line-by-line/#table-of-contents&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/10/nodejs-read-file-line-by-line/#prerequisites&quot;&gt;Prerequisites&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/10/nodejs-read-file-line-by-line/#the-test-file&quot;&gt;The test file&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/10/nodejs-read-file-line-by-line/#read-file-sync&quot;&gt;Read file sync&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/10/nodejs-read-file-line-by-line/#readline&quot;&gt;Readline&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/10/nodejs-read-file-line-by-line/#n-readlines&quot;&gt;N-readlines&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/10/nodejs-read-file-line-by-line/#line-reader&quot;&gt;Line reader&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/10/nodejs-read-file-line-by-line/#other-options&quot;&gt;Other options&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/10/nodejs-read-file-line-by-line/#quick-comparison&quot;&gt;Quick comparison&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/10/nodejs-read-file-line-by-line/#conclusion&quot;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;prerequisites&quot; tabindex=&quot;-1&quot;&gt;Prerequisites &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/10/nodejs-read-file-line-by-line/#prerequisites&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Before jumping to the code, below are some of the prerequisites to follow along with the provided code examples:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Having Node.js 10+ (preferably the latest LTS Node 16) running on your machine/test environment is required. You can even use &lt;a href=&quot;https://geshan.com.np/blog/2020/11/nodejs-with-docker/&quot;&gt;Node.js on docker&lt;/a&gt; for it.&lt;/li&gt;
&lt;li&gt;Knowledge of how to install NPM modules would be necessary.&lt;/li&gt;
&lt;li&gt;Any prior understanding of streams and how they work would be helpful.&lt;/li&gt;
&lt;li&gt;Any knowledge of &lt;a href=&quot;https://www.freecodecamp.org/news/understanding-node-js-event-driven-architecture-223292fcbc2d/&quot;&gt;Node’s event-based architecture&lt;/a&gt; will be good to have.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I am running the code on a Mac with Node.js 14. In the following section we will look into the file we are going to use to read line by line with Node.js. The code examples are available in a public &lt;a href=&quot;https://github.com/geshan/nodejs-readfile-line-by-line&quot;&gt;GitHub repository&lt;/a&gt; for your convenience.&lt;/p&gt;
&lt;h2 id=&quot;the-test-file&quot; tabindex=&quot;-1&quot;&gt;The test file &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/10/nodejs-read-file-line-by-line/#the-test-file&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;For all of the trail runs below we will use a 90 MB &lt;a href=&quot;https://github.com/geshan/nodejs-readfile-line-by-line/blob/master/broadband.sql&quot;&gt;SQL dump file&lt;/a&gt; which I have taken from this &lt;a href=&quot;https://github.com/mazzyy/BroadbandNow&quot;&gt;BroadBandNow clone&lt;/a&gt; repository. The same file is used for each method of reading file line by line in Node.js to keep the test consistent across methods. We will also look at the memory consumption and the time it took to read the 90 MB file that has 798148 lines of text. This should be a good test to look at how these ways perform for a relatively large file.&lt;/p&gt;
&lt;h2 id=&quot;read-file-sync&quot; tabindex=&quot;-1&quot;&gt;Read file sync &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/10/nodejs-read-file-line-by-line/#read-file-sync&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;We can possibly read the file in a synchronous way, meaning loading the whole 90 MB file in memory and loop through it. But, as we will load the whole file first before reading any lines from it the memory consumption will surely be more than 90 MB. Here is a quick example for reading the file line by line but in a not very performant sync way:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; fs &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;fs&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; allFileContents &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; fs&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;readFileSync&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;broadband.sql&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;utf-8&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;allFileContents&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token regex&quot;&gt;&lt;span class=&quot;token regex-delimiter&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;token regex-source language-regex&quot;&gt;\r?\n&lt;/span&gt;&lt;span class=&quot;token regex-delimiter&quot;&gt;/&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;line&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt;  &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;Line from file: &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;line&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; used &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; process&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;memoryUsage&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;heapUsed &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1024&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1024&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;The script uses approximately &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;Math&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;round&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;used &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt; MB&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As we are using the &lt;code&gt;fs&lt;/code&gt; module which is a native one, there is no need to install any new NPM module. In the above code, we are reading the while file synchronously then looping through each line one by one and printing it to the console with a &lt;code&gt;console.log&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;After the looping is done we print out the approximate memory usage. This code can be found in this &lt;a href=&quot;https://github.com/geshan/nodejs-readfile-line-by-line/pull/2&quot;&gt;pull request&lt;/a&gt; for your reference. If we run this script with a time prefix as below:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;node&lt;/span&gt; readfilesync.js&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It will run and end with output as follows:&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/nodejs-read-file-line-by-line/02readfilesync.jpg&quot; title=&quot;Read file line by line with Node.js using fs.readfilesync&quot; alt=&quot;Read file line by line with Node.js using fs.readfilesync&quot; /&gt;
&lt;p&gt;As expected for a 90 MB file it took ~225 MB of memory and took 7.85 seconds for it to loop through the 798K lines of text.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;If there is a 1 GB file it is not recommended to use this method as it will go out of memory trying to load the whole file into the memory.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Next, we will look at a more performant async way of reading a file line by line with &lt;code&gt;readline&lt;/code&gt; and a stream which is another native Node.js module.&lt;/p&gt;
&lt;h2 id=&quot;readline&quot; tabindex=&quot;-1&quot;&gt;Readline &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/10/nodejs-read-file-line-by-line/#readline&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://nodejs.org/api/readline.html&quot;&gt;Readline&lt;/a&gt; is a native Node.js module so there is no need to install a new NPM module to use it. It can be used to read files line by line by reading one line at a time from any readable stream. We will be using the on method with the &lt;code&gt;line&lt;/code&gt; &lt;a href=&quot;https://nodejs.org/api/readline.html#readline_event_line&quot;&gt;event&lt;/a&gt; which is emitted when the input stream receives an end-of-line input &lt;code&gt;\n, \r,&lt;/code&gt; or &lt;code&gt;\r\n&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Below is the code example of readline with a readable stream:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; events &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;events&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; fs &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;fs&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; readline &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;readline&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;processLineByLine&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; rl &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; readline&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;createInterface&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token literal-property property&quot;&gt;input&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; fs&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;createReadStream&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;broadband.sql&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token literal-property property&quot;&gt;crlfDelay&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;Infinity&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    rl&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;line&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;      console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;Line from file: &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;line&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; events&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;once&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;rl&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;close&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Reading file line by line with readline done.&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; used &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; process&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;memoryUsage&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;heapUsed &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1024&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1024&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;The script uses approximately &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;Math&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;round&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;used &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt; MB&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;err&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;err&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let’s understand what is going on in the above script. First we require 3 native node.js modules events, fs, and readline. After that, we define async function called &lt;code&gt;processLineByLine&lt;/code&gt; which creates an interface for readline where the input is a readstram where we pass our 90 MB test file. As per the &lt;a href=&quot;https://nodejs.org/api/readline.html#readline_readline_createinterface_options&quot;&gt;create Interface options&lt;/a&gt; the crlfDelay set to infinity will consider &lt;code&gt;\r&lt;/code&gt; followed by &lt;code&gt;\n&lt;/code&gt; as a single newline.&lt;/p&gt;
&lt;p&gt;As we are interacting with a readable stream, on each line read event it will call the &lt;code&gt;ri.on&lt;/code&gt; function with the &lt;code&gt;line&lt;/code&gt; event. At that point, we log the contents of the line read from the stream. Then we listen to the readline close event with &lt;code&gt;events.once&lt;/code&gt; that &lt;a href=&quot;https://nodejs.org/api/events.html#events_events_once_emitter_name_options&quot;&gt;creates a promise&lt;/a&gt; that will resolve with an array of all the arguments emitted to the given event. It will be an empty array in this case.&lt;/p&gt;
&lt;p&gt;Finally, we read the memory usage and log it. You can reference the above code in this &lt;a href=&quot;https://github.com/geshan/nodejs-readfile-line-by-line/pull/3&quot;&gt;pull request&lt;/a&gt;. When we run this script with:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;node&lt;/span&gt; readline.js&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It yields the following output:&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/nodejs-read-file-line-by-line/03readline.jpg&quot; title=&quot;Read file line by line with Node.js using readline native module&quot; alt=&quot;Read file line by line with Node.js using readline native module&quot; /&gt;
&lt;p&gt;As seen above, the readline module with a readable stream took only 6.33 MB of memory to read a 90 MB file.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;As it was streamed which is a lot lesser than 225 MB in the previous sync example.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;It completed the process in 7.365 seconds. Next up we will look at the N-readlines NPM module to read a file line by line.&lt;/p&gt;
&lt;h2 id=&quot;n-readlines&quot; tabindex=&quot;-1&quot;&gt;N-readlines &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/10/nodejs-read-file-line-by-line/#n-readlines&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;N-readline is a &lt;a href=&quot;https://www.npmjs.com/package/n-readlines&quot;&gt;NPM module&lt;/a&gt; that will read file line by line without buffering the whole file in memory. It does this without using streams by reading the file’s content in &lt;a href=&quot;https://github.com/nacholibre/node-readlines/blob/master/readlines.js#L84&quot;&gt;chunks&lt;/a&gt; using &lt;a href=&quot;https://nodejs.org/api/buffer.html#buffer_new_buffer_array&quot;&gt;Buffer&lt;/a&gt; and the native file system module. Even though it works in a synchronous way it does not load the whole file in memory.&lt;/p&gt;
&lt;p&gt;Below is an example of how to use N-readline to read a file line by line after installing it with &lt;code&gt;npm i --save n-readlines&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; nReadlines &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;n-readlines&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; broadbandLines &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;nReadlines&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;broadband.sql&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; line&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; lineNumber &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;line &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; broadbandLines&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;Line &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;lineNumber&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt; has: &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;line&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;ascii&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    lineNumber&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;end of file.&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; used &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; process&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;memoryUsage&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;heapUsed &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1024&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1024&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;The script uses approximately &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;Math&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;round&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;used &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt; MB&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In the above code, first, we require the &lt;code&gt;n-readlines&lt;/code&gt; module and we instantiate it with our &lt;code&gt;broadband.sql&lt;/code&gt; file which is 90 MBs. Other &lt;a href=&quot;https://github.com/nacholibre/node-readlines#new-readlinesfd-options&quot;&gt;options&lt;/a&gt; like &lt;code&gt;readChunk&lt;/code&gt;  and &lt;code&gt;newLineCharacter&lt;/code&gt; can be passed in as the second parameter in &lt;code&gt;new nReadlines&lt;/code&gt; but we go with the default.&lt;/p&gt;
&lt;p&gt;Consequently, we define two variables &lt;code&gt;line&lt;/code&gt; and &lt;code&gt;lineNumber&lt;/code&gt;. Line variable will hold the string for each line of the file and the &lt;code&gt;lineNumber&lt;/code&gt; will hold the line number from 1 to the number of lines the file has.&lt;/p&gt;
&lt;p&gt;Subsequently, we loop through the lines while there are lines in the file with &lt;code&gt;broadbankLines.next()&lt;/code&gt; call. As it returns a buffer if a line exists we console log it on the CLI after converting it to an ASCII string. Next, we increment the Line number inside the loop.&lt;/p&gt;
&lt;p&gt;Finally, we print &lt;code&gt;end of file&lt;/code&gt; and like the above examples also print out the approximate memory usage. This code is also available as a &lt;a href=&quot;https://github.com/geshan/nodejs-readfile-line-by-line/pull/5/files&quot;&gt;pull request&lt;/a&gt; for your reference. We can execute the above script with:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;node&lt;/span&gt; n-readlines.js&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It will render the following output towards the end of the script execution:&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/nodejs-read-file-line-by-line/04n-readlines.jpg&quot; title=&quot;Read file line by line with Node.js using n-readlines npm module&quot; alt=&quot;Read file line by line with Node.js using n-readlines npm module&quot; /&gt;
&lt;p&gt;As seen above it got the task done in 8.9 seconds.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;To print all the 798K lines of the 90 MB SQL file, n-readlines consumed only 4.11 MB memory which is amazing.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;In the following section, we will see how the line reader NPM module can be used to read files line by line with Node.js.&lt;/p&gt;
&lt;h2 id=&quot;line-reader&quot; tabindex=&quot;-1&quot;&gt;Line reader &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/10/nodejs-read-file-line-by-line/#line-reader&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Line reader &lt;a href=&quot;https://www.npmjs.com/package/line-reader&quot;&gt;NPM module&lt;/a&gt; defines itself as “Asynchronous, buffered, line-by-line file/stream reader with support for user-defined line separators.” on its &lt;a href=&quot;https://github.com/nickewing/line-reader&quot;&gt;GitHub&lt;/a&gt; page. In the &lt;a href=&quot;https://github.com/nickewing/line-reader#usage&quot;&gt;usage&lt;/a&gt; section of the page, it also mentions that &lt;code&gt;eachLine&lt;/code&gt; function reads each line of the given file. The &lt;code&gt;last&lt;/code&gt; variable in the callback can be used to determine if the last line of the file has been reached.&lt;/p&gt;
&lt;p&gt;Below is the working example of reading our relatively big 90 MB SQL file with line reader, we installed it with &lt;code&gt;npm i --save line-reader&lt;/code&gt; and then created the following file:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; lineReader &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;line-reader&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;lineReader&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;eachLine&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;broadband.sql&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;line&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; last&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;Line from file: &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;line&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;last&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Last line printed.&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; used &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; process&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;memoryUsage&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;heapUsed &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1024&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1024&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;The script uses approximately &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;Math&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;round&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;used &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt; MB&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;First, we require the line reader module then call the &lt;code&gt;eachLine&lt;/code&gt; function passing the filename (or file path) as the first parameter. The second parameter is a callback function that has the line and the last variables. Subsequently, we log the line from the file available in the line variable.&lt;/p&gt;
&lt;p&gt;Next up, if we find the last variable to be true which indicates we have reached the end of the file we log the &lt;code&gt;Last line printed&lt;/code&gt; message and also print out the approximate memory used to read the file line by line. This code is also available as a &lt;a href=&quot;https://github.com/geshan/nodejs-readfile-line-by-line/pull/6/files&quot;&gt;pull request&lt;/a&gt; for your reference.&lt;/p&gt;
&lt;p&gt;We can run this code by executing:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;node&lt;/span&gt; line-reader.js&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It will end with an output that looks like the following:&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/nodejs-read-file-line-by-line/05line-reader.jpg&quot; title=&quot;Read file line by line with Node.js using line-reader npm module&quot; alt=&quot;Read file line by line with Node.js using line-reader npm module&quot; /&gt;
&lt;p&gt;As seen above the script finished in 10.66 seconds.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Compared to 225 MB memory used in &lt;code&gt;fs.readFileSync&lt;/code&gt;, reading a 90 MB file with line reader took only 5.18 MB of memory which is 45 times lesser.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;If you want to restart your Node.js script on each change try out &lt;a href=&quot;https://geshan.com.np/blog/2021/02/nodemon/&quot;&gt;Nodemon&lt;/a&gt;. Next up, we will see if there are other options but we surely have covered the top 3 most popular ones.&lt;/p&gt;
&lt;h2 id=&quot;other-options&quot; tabindex=&quot;-1&quot;&gt;Other options &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/10/nodejs-read-file-line-by-line/#other-options&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;There are other options to read file line by line with Node.js. There is a very popular NPM module called &lt;a href=&quot;https://www.npmjs.com/package/readline&quot;&gt;readline&lt;/a&gt; but due to the name collision with the native Node.js module, it has been renamed to &lt;a href=&quot;https://www.npmjs.com/package/linebyline&quot;&gt;Line By LIne&lt;/a&gt; now. It works very similarly to the native readline module.&lt;/p&gt;
&lt;p&gt;Other less popular but available options are, &lt;a href=&quot;https://www.npmjs.com/package/file-readline&quot;&gt;file readline&lt;/a&gt; and &lt;a href=&quot;https://npmjs.com/package/readlines-ng&quot;&gt;readlines-ng&lt;/a&gt;. Both of them are NPM modules but they were downloaded around 3 times each last week.&lt;/p&gt;
&lt;p&gt;For further processing of file contents, using these &lt;a href=&quot;https://geshan.com.np/blog/2021/03/javascript-array-functions/&quot;&gt;JavaScript array functions&lt;/a&gt; would be very helpful. This takes us to a quick comparison of these available options.&lt;/p&gt;
&lt;h2 id=&quot;quick-comparison&quot; tabindex=&quot;-1&quot;&gt;Quick comparison &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/10/nodejs-read-file-line-by-line/#quick-comparison&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;A quick comparison of these four NPM modules on &lt;a href=&quot;https://www.npmtrends.com/file-readline-vs-line-reader-vs-n-readlines-vs-readlines-ng&quot;&gt;NPM Trends&lt;/a&gt; revealed that N-readlines is the most download one with 56K downloads in the last week. The second one is line-reader with 46K downloads last week but keep in mind that line-reader was last updated 6 years ago. Below is a snapshot of downloads for the past 1 year:&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/nodejs-read-file-line-by-line/06npm-trends-compare.jpg&quot; title=&quot;Comparing downloads and other aspects of 4 read file line by line NPM modules on NPM Trends&quot; alt=&quot;Comparing downloads and other aspects of 4 read file line by line NPM modules on NPM Trends&quot; /&gt;
&lt;p&gt;It will be better to choose the popular ones and the one most recently updated is n-readlines which was a year ago.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The downloads for both file readline and readlines ng are around 3 per week compared to 46K and 56K for line reader and n-readlines respectively.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Make an informed choice for better support if you need it.&lt;/p&gt;
&lt;p&gt;In terms of memory and CPU usage all methods except of the first &lt;code&gt;fs.readfilesync&lt;/code&gt;, all other stream or callback based options consumed under 10 MB or memoery and finished before 10 seconds with 70-94% CPU usage. Read file sync consumed 225 MB of memory for a 90 MB file.&lt;/p&gt;
&lt;h2 id=&quot;conclusion&quot; tabindex=&quot;-1&quot;&gt;Conclusion &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/10/nodejs-read-file-line-by-line/#conclusion&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;We looked at how to read a file line by line in Node.js. Even though it seems like a trivial problem there are multiple ways to do it in Node.js like most things in JavaScript.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;We also analyzed the memory usage and time it took for each of the 3 methods.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Finally, we looked at a quick comparison of these and other options available in terms of popularity. I hope it helps you make an informed decision to read a file line by line with Node.js.&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>The final guide to web scraping with Node.js</title>
		<link href="https://geshan.com.np/blog/2021/09/web-scraping-nodejs/"/>
		<updated>2021-09-18T10:30:35Z</updated>
		<id>https://geshan.com.np/blog/2021/09/web-scraping-nodejs/</id>
		<content type="html">&lt;p&gt;Web scraping is the process of extracting data from a website in an automated way and Node.js can be used for web scraping. Even though other languages and frameworks are more popular for web scraping, Node.js can be utilized well to do the job too. In this post, we will learn how to do web scraping with Node.js for websites that don’t need and need Javascript to load. Let’s get started!&lt;/p&gt;
&lt;!-- more --&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/nodejs-web-scraping/01nodejs-web-scraping.jpg&quot; title=&quot;Web scraping with Nodejs for webpages that need or do not need JavaScript to render&quot; alt=&quot;Web scraping with Nodejs for webpages that need or do not need JavaScript to render&quot; /&gt;
&lt;h2 id=&quot;table-of-contents&quot; tabindex=&quot;-1&quot;&gt;Table of contents &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/09/web-scraping-nodejs/#table-of-contents&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/09/web-scraping-nodejs/#web-scraping-the-dos-and-don&#39;ts&quot;&gt;Web scraping the dos and don’ts&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/09/web-scraping-nodejs/#prerequisites&quot;&gt;Prerequisites&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/09/web-scraping-nodejs/#web-scraping-with-node.js-the-simple-example&quot;&gt;Web scraping with Node.js the simple example&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/09/web-scraping-nodejs/#axios-and-cheerio-for-node.js-web-scraping&quot;&gt;Axios and Cheerio for Node.js web scraping&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/09/web-scraping-nodejs/#node.js-web-scraping-rendering-javascript&quot;&gt;Node.js web scraping rendering JavaScript&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/09/web-scraping-nodejs/#puppeteer-for-web-scraping&quot;&gt;Puppeteer for web scraping&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/09/web-scraping-nodejs/#conclusion&quot;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;web-scraping-the-dos-and-don%E2%80%99ts&quot; tabindex=&quot;-1&quot;&gt;Web scraping the dos and don’ts &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/09/web-scraping-nodejs/#web-scraping-the-dos-and-don%E2%80%99ts&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Web scraping can be very advantageous to aggregate data from multiple sources or even track what one’s competitor is doing. But, it can have its own &lt;a href=&quot;https://techcrunch.com/2021/06/14/supreme-court-revives-linkedin-bid-to-protect-user-data-from-web-scrapers/&quot;&gt;legal&lt;/a&gt; and technical issues too. A general technical problem being too many requests coming from the same IP in a very short amount of time as the traffic is coming from a machine than a browser or a human.&lt;/p&gt;
&lt;p&gt;Even when scraping a website it is best to &lt;a href=&quot;https://www.promptcloud.com/blog/how-to-read-and-respect-robots-file/&quot;&gt;respect the robots.txt file&lt;/a&gt; and be nice to the maintainers of the website. Don’t be that person who would send 50 requests per second to a website from the same IP address adding unnecessary load to the servers and making the website slow for other users. Next up, we will look at an example of a simple web scraper with Node.js.&lt;/p&gt;
&lt;p&gt;Python’s &lt;a href=&quot;https://scrapy.org/&quot;&gt;Scrapy&lt;/a&gt; framework might be one of the best tools to do web scraping but if you just know Javascript you can build a pretty decent web scraper with Node.js too.&lt;/p&gt;
&lt;h2 id=&quot;prerequisites&quot; tabindex=&quot;-1&quot;&gt;Prerequisites &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/09/web-scraping-nodejs/#prerequisites&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Before we dive into the code, below are some prerequisites&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;You have Node.js (preferably the latest LTS version) and NPM node running on your machine&lt;/li&gt;
&lt;li&gt;Instaling NPM modules is known to you&lt;/li&gt;
&lt;li&gt;Any prior knowledge or experience of web scraping, CSS selectors, or Xpath will be helpful.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Let’s get started with some code now.&lt;/p&gt;
&lt;h2 id=&quot;web-scraping-with-node.js-the-simple-example&quot; tabindex=&quot;-1&quot;&gt;Web scraping with Node.js the simple example &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/09/web-scraping-nodejs/#web-scraping-with-node.js-the-simple-example&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Websites and webpages can basically be divided into two broad categories. The first segment doesn’t need JavaScript rendering to show most of the content of the webpage, and the second needs Javascript execution to render any of its content. The first group of websites is much easier to scrape because the HTML rendered is almost the same for a browser that can execute Javascript compared to a bot that cannot execute JavaScript.&lt;/p&gt;
&lt;p&gt;The second set of websites are mainly the Single Page Applications (SPA) that are built with JavaScript framework/libraries like React which need JavaScript execution to show any relevant content. We will see an example later for this class of websites. For now, we will dive into an example that doesn’t need any Javascript execution to get the meaningful contents of the website. For this simple example, we will use Axios and Cheerio to scrape a property listing website called &lt;a href=&quot;http://domain.com/&quot;&gt;Domain.com&lt;/a&gt;,au to check how many rental properties are listed for a given postal code.&lt;/p&gt;
&lt;h3 id=&quot;axios-and-cheerio-for-node.js-web-scraping&quot; tabindex=&quot;-1&quot;&gt;Axios and Cheerio for Node.js web scraping &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/09/web-scraping-nodejs/#axios-and-cheerio-for-node.js-web-scraping&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Prior to writing some code to scrape out information. It is best we analyze some patterns that will make our work easier. There are two main things to consider while scraping content, they are the URL and the structure of the page(s) you want to scrape the information out of. URLs have patten, in our example, if you search for rental properties on Domain the URL with postcode looks like: &lt;code&gt;https://www.domain.com.au/rent/?postcode=2000&amp;amp;excludedeposittaken=1&lt;/code&gt; so 2000 is the postcode part that can be changed to any valid postal code in Australia and it will work.&lt;/p&gt;
&lt;p&gt;Similarly, when we inspect the page and look for the part we need that is the no. of properties in that postcode. It is available in a “strong” tag inside the “h1” tag. It is easy to see in the inspector of your browser of choice, I am using chrome below:&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/nodejs-web-scraping/02nodejs-web-scraping-browser.jpg&quot; title=&quot;Using chrome inspect for Node.js web scraping&quot; alt=&quot;Using chrome inspect for Node.js web scraping&quot; /&gt;
&lt;p&gt;Here &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Selectors&quot;&gt;CSS selectors&lt;/a&gt; are your best friend, &lt;a href=&quot;https://devhints.io/xpath&quot;&gt;XPATH&lt;/a&gt; is another powerful option but generally, I prefer CSS selectors. Below is a quick look at the innerText property of ‘h1&amp;gt;strong’ which gives out the text we are after:&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/nodejs-web-scraping/03nodejs-web-scraping-dollor.jpg&quot; title=&quot;CSS selector and inner text for Node.js web scraping&quot; alt=&quot;CSS selector and inner text for Node.js web scraping&quot; /&gt;
&lt;p&gt;Now as we know what to target for in the webpage, below is a quick example of getting the number of properties open for rent in a given postcode of Australia pulled in from &lt;a href=&quot;http://domain.com.au/&quot;&gt;Domain.com.au&lt;/a&gt; rental listing page using Axios and Cheerio:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; axios &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;axios&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; cheerio &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;cheerio&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; args &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; process&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;argv&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;slice&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; postCode &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; args&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2000&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; url &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;https://www.domain.com.au/rent/?postcode=&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;postCode&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&amp;amp;excludedeposittaken=1&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; response &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; axios&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;url&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; $ &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; cheerio&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;load&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;response&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;data&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; noOfProperties &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;$&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;h1&gt;strong&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;noOfProperties&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt; are open for rent in &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;postCode&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt; postcode of Australia on Domain&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;e&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;Error while fetching rental properties for &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;postCode&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt; - &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;e&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;message&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can install axios and cheerio with &lt;code&gt;npm i --save axios cheerio&lt;/code&gt; to any Node.js project initiated with an &lt;code&gt;npm install -y&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;In the above code, first, we require both &lt;a href=&quot;https://github.com/axios/axios&quot;&gt;Axios&lt;/a&gt; and &lt;a href=&quot;https://github.com/cheeriojs/cheerio&quot;&gt;Cheerio&lt;/a&gt; and then we create an async &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/IIFE&quot;&gt;IIFE&lt;/a&gt; (Immediately Invoked Function Expression) as we would like to use await inside it. Given it is immediately invoked we don’t need to explicitly call the function.&lt;/p&gt;
&lt;p&gt;Inside the function, we get the arguments from the command line if any. Then we set the &lt;code&gt;postCode&lt;/code&gt; as the third argument from the command like &lt;code&gt;node axios-cheerio.js 2100&lt;/code&gt;, in the above code, the &lt;code&gt;postCode&lt;/code&gt; will be set to 2100.&lt;/p&gt;
&lt;p&gt;Subsequently, we set the URL to be the domain’s URL for finding rental properties in a given postcode. After that we call the URL to get its HTML using Axios, we do an await to unwrap the promise. Once we have the response, we pass it to cheerio with cheerio load to parse the response body. Consequently, as we have the full HTML we use Cheerio’s easy Jquery like API to parse out the text for the strong HTML tag inside the H1 tag which has a value like &lt;code&gt;217 properties&lt;/code&gt;. Then finally we print the message and add more strings to show output on the console.&lt;/p&gt;
&lt;p&gt;In case of any error, we just log the error message. The script when run with &lt;code&gt;node axios-cheerio.js 2100&lt;/code&gt; gives the following output:&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/nodejs-web-scraping/04axios-cheerio-domain.jpg&quot; title=&quot;Node.js web scraping with Axios and Cheerio for Domain&quot; alt=&quot;Node.js web scraping with Axios and Cheerio for Domain&quot; /&gt;
&lt;p&gt;Great our basic scraper with Axios and Cheerio is working. The above code is available in the &lt;a href=&quot;https://github.com/geshan/nodejs-web-scraping/pull/2&quot;&gt;pull request&lt;/a&gt;. If you want a shortcut method I have created &lt;a href=&quot;https://www.npmjs.com/package/@geshan/axrio&quot;&gt;Axrio&lt;/a&gt; too which is used in the &lt;a href=&quot;https://github.com/geshan/domain-scraper&quot;&gt;Domain scraper&lt;/a&gt; project I wrote up in 2018.&lt;/p&gt;
&lt;p&gt;Axios and Cheerio are just one of the combinations you can use. In place of Axios, you can use other libraries like Got, Superagent, and &lt;a href=&quot;https://blog.logrocket.com/5-ways-to-make-http-requests-in-node-js/&quot;&gt;the likes&lt;/a&gt;. In place of Cheerio, you can also try out &lt;a href=&quot;https://www.npmjs.com/package/jsdom&quot;&gt;JsDOM&lt;/a&gt;. The main point is to get the HTML and parse it to extract out the information we need from the HTML.&lt;/p&gt;
&lt;p&gt;Next up, we will look at how to scrape web pages that require JavaScript to render any meaningful content for our Node.js web scraping tutorial.&lt;/p&gt;
&lt;h2 id=&quot;node.js-web-scraping-rendering-javascript&quot; tabindex=&quot;-1&quot;&gt;Node.js web scraping rendering JavaScript &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/09/web-scraping-nodejs/#node.js-web-scraping-rendering-javascript&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Domain was a relatively easy website as it renders the full HTML with server-side rendering. Now if we use Axios and Cheerio to scrape the job titles from Workable’s &lt;a href=&quot;https://jobs.workable.com/&quot;&gt;job listing&lt;/a&gt; page it will find nothing. Because the page renders no jobs until the JavaScript on the page fires up calls the respective API and paints the response from the API.&lt;/p&gt;
&lt;p&gt;These types of Single Page Applications (SPA) will need a real or &lt;a href=&quot;https://en.wikipedia.org/wiki/Headless_browser&quot;&gt;headless browser&lt;/a&gt; to execute the JavaScript on the page and get the HTML to the scraper as if it would work for a browser. Let’s use Puppeteer to scrape the job titles from Workable’s jobs page.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/puppeteer/puppeteer&quot;&gt;Puppeteer&lt;/a&gt; is a Node library that provides a high-level API to control Chrome or Chromium. It runs headless (no GUI) by default but can run on full GUI mode too. It can be used for a lot of other things than just rendering JavaScript to assist in scraping. It can be used to generate screenshots or PDFs, fill up forms, use for automated testing, etc. Speaking of testing, there are only two &lt;a href=&quot;https://blog/2016/03/there-are-only-two-types-of-automated-software-tests/&quot;&gt;types of automated tests&lt;/a&gt; fast ones and not fast ones.&lt;/p&gt;
&lt;h3 id=&quot;puppeteer-for-web-scraping&quot; tabindex=&quot;-1&quot;&gt;Puppeteer for web scraping &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/09/web-scraping-nodejs/#puppeteer-for-web-scraping&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;To use Puppeteer, we can install it with &lt;code&gt;npm i --save puppeteer&lt;/code&gt;, it will download the recent version of chromium too. If you want to use your own browser you can try &lt;code&gt;puppeteer-core&lt;/code&gt;. For this guide, we will use puppeteer to keep things simple.&lt;/p&gt;
&lt;p&gt;To scrape the job titles on the first page of Workable we will use the following code:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; puppeteer &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;puppeteer&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; browser &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; puppeteer&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;launch&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; page &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; browser&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;newPage&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; navigationPromise &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; page&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;waitForNavigation&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; page&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;goto&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;https://jobs.workable.com/&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; page&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;setViewport&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1440&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;744&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; navigationPromise&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; page&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;waitForSelector&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;ul li h3 a&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; jobTitles &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; page&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;$$eval&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;ul li h3 a&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token parameter&quot;&gt;titles&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; titles&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;title&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; title&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;innerText&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;Job Titles on first page of Workable are: &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;jobTitles&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;, &#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; browser&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;e&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;Error while fetching workable job titles &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;e&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;message&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The code has been partially generated with the &lt;a href=&quot;https://chrome.google.com/webstore/detail/headless-recorder/djeegiggegleadkkbgopoonhjimgehda?hl=en&quot;&gt;Headless Recorder&lt;/a&gt; Google Chrome Plugin, you can view its code on &lt;a href=&quot;https://github.com/checkly/headless-recorder&quot;&gt;GitHub&lt;/a&gt; too if you are interested.&lt;/p&gt;
&lt;p&gt;The code at first includes puppeteer. Then in the IIFE async function similar to the above example, starts the browser and open a new tab. After that, it goes to &lt;code&gt;https://jobs.workable.com&lt;/code&gt; and sets the viewport. Consequently, it waits for the navigation to and waits for the selector &lt;code&gt;ul li h3 a&lt;/code&gt;. Then it gets all the &lt;code&gt;a&lt;/code&gt; tags in &lt;code&gt;ul li h3&lt;/code&gt;, all 10 of them, and loops through them to get the inner text that holds the job titles. Which is set in the &lt;code&gt;jobTitles&lt;/code&gt; array. After that, it logs all the scraped job titles and then closes the browser. We can also use other &lt;a href=&quot;https://geshan.com.np/blog/2021/01/nodejs-logging-library/&quot;&gt;Node.js logging libraries&lt;/a&gt; in place of console.log.&lt;/p&gt;
&lt;p&gt;This is how it looks when you run it:&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/nodejs-web-scraping/05puppeteer-workable.jpg&quot; title=&quot;Node.js web scraping with Puppeteer on Workable&quot; alt=&quot;Node.js web scraping with Puppeteer on Workable&quot; /&gt;
&lt;p&gt;If the code is run with docker it will need a &lt;a href=&quot;https://github.com/puppeteer/puppeteer/blob/main/docs/troubleshooting.md#tips&quot;&gt;different way&lt;/a&gt; to start the browser. For the above example, I am running it on a Mac. The above code is available as a &lt;a href=&quot;https://github.com/geshan/nodejs-web-scraping/pull/4&quot;&gt;pull request&lt;/a&gt; for your reference. We could have possibly taken the whole HTML rendered after executing the JavaScript and put it into Cheerio to parse it but the above method works too.&lt;/p&gt;
&lt;p&gt;All the working code is available as a &lt;a href=&quot;https://github.com/geshan/nodejs-web-scraping&quot;&gt;Github repository&lt;/a&gt; for your reference. We can also use &lt;a href=&quot;https://geshan.com.np/blog/2020/11/nodejs-with-docker/&quot;&gt;Node.js with Docker&lt;/a&gt; to make the code run seamlessly in multiple operating systems and environments.&lt;/p&gt;
&lt;p&gt;In addition to scraping just one page, we could get all the links and loop through (or even better promise.all) the pages but at that point, it would be a full-on spider than just web page scraping.&lt;/p&gt;
&lt;p&gt;Another alternative to Puppeteer is &lt;a href=&quot;https://playwright.dev/&quot;&gt;Playwright&lt;/a&gt;. It is similar to puppeteer and has a similar API, the advantage is it supports multiple &lt;a href=&quot;https://playwright.dev/docs/why-playwright#support-for-all-browsers&quot;&gt;browsers&lt;/a&gt; like Firefox and Safari. The headless recorder plugin can generate a good starting script for both Puppeteer and Playwright so you can get a very good starting point if you are not well versed in writing such automation scripts.&lt;/p&gt;
&lt;h2 id=&quot;conclusion&quot; tabindex=&quot;-1&quot;&gt;Conclusion &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/09/web-scraping-nodejs/#conclusion&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;We saw how to scrape web pages with Node.js for both types of web pages that don’t require JavaScipt to render meaningful HTML and that requires JavaScript. Using your browser’s inspect tool and some URL pattern matching will surely help you scraper web pages much better.&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>How to use RabbitMQ and Node.js with Docker and Docker-compose</title>
		<link href="https://geshan.com.np/blog/2021/07/rabbitmq-docker-nodejs/"/>
		<updated>2021-07-29T11:42:35Z</updated>
		<id>https://geshan.com.np/blog/2021/07/rabbitmq-docker-nodejs/</id>
		<content type="html">&lt;p&gt;Using RabbitMQ with Node.js to offload the things to process in the background is very useful. Adding Docker and docker-compose in that mix for local development makes setting up RabbitMQ and node.js a breeze. In this post, we will explore how to set up RabbitMQ and Node.js with docker and docker-compose using a dummy send email example, let&#39;s get rolling!&lt;/p&gt;
&lt;!-- more --&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/rabbitmq-docker-nodejs/01rabbitmq-docker-nodejs.jpg&quot; title=&quot;Step by step tutorial on RabbitMQ with Node.js using Docker and Docker compose&quot; alt=&quot;Step by step tutorial on RabbitMQ with Node.js using Docker and Docker compose&quot; /&gt;
&lt;h2 id=&quot;table-of-contents&quot; tabindex=&quot;-1&quot;&gt;Table of contents &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/07/rabbitmq-docker-nodejs/#table-of-contents&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/07/rabbitmq-docker-nodejs/#why-use-async-processing&quot;&gt;Why use async processing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/07/rabbitmq-docker-nodejs/#rabbitmq-quick-introduction&quot;&gt;RabbitMQ quick introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/07/rabbitmq-docker-nodejs/#prerequisites&quot;&gt;Prerequisites&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/07/rabbitmq-docker-nodejs/#run-rabbitmq-with-docker-and-docker-compose&quot;&gt;Run RabbitMQ with docker and docker-compose&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/07/rabbitmq-docker-nodejs/#send-email-example&quot;&gt;Send Email example&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/07/rabbitmq-docker-nodejs/#publish-a-message-to-rabbitmq-using-node.js&quot;&gt;Publish a message to RabbitMQ using Node.js&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/07/rabbitmq-docker-nodejs/#consume-messages-with-node.js&quot;&gt;Consume messages with Node.js&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/07/rabbitmq-docker-nodejs/#set-up-docker-and-docker-compose-for-node.js&quot;&gt;Set up Docker and Docker compose for Node.js&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/07/rabbitmq-docker-nodejs/#test-rabbitmq-with-nodejs-on-docker-and-docker-compose&quot;&gt;Test RabbitMQ with Node.js on Docker and docker-compose&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/07/rabbitmq-docker-nodejs/#conclusion&quot;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;why-use-async-processing&quot; tabindex=&quot;-1&quot;&gt;Why use async processing &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/07/rabbitmq-docker-nodejs/#why-use-async-processing&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Before going deeper into using RabbitQM with Node.js using Docker and Docker compose, let’s discuss why we need async processing first. Imagine this, you run an e-commerce store. As the customer has placed an order, there is a need to send an order confirmation email or SMS.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Let’s say if the email service provider has a downtime of 2 minutes should the checkout process be blocked? The answer is no.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Similarly, if there are 10 orders in the same second, should the customer wait longer to see the order confirmation screen because the email service provider’s APIs are responding slow? Again a No.&lt;/p&gt;
&lt;p&gt;These are typical examples where async processing or processing things in the background that don’t slow down and/or block the main operation is very useful. In the above example, the critical path is to be able to checkout, the e-commerce website can function without the email being sent but can’t earn if the order is not taken. All of these kinds of operations like sending an email, resizing a picture (which is resource-heavy too) can be set up as async tasks.&lt;/p&gt;
&lt;p&gt;Pushing secondary tasks in the background also provides us with better &lt;a href=&quot;https://geshan.com.np/blog/2020/12/software-scalability/&quot;&gt;software scalability&lt;/a&gt; and &lt;a href=&quot;https://geshan.com.np/blog/2020/12/software-resilience/&quot;&gt;software resilience&lt;/a&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;For async and/or later processing if tasks are pushed into a queue multiple workers can perform the task making it easy to scale horizontally. Along the same lines, if the task depends on a third party and if that service is down or slow it does not block the primary and critical operation. Which leads to more resilient software.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;You can also listen to a &lt;a href=&quot;https://geshan.com.np/blog/2014/08/basic-overview-of-message-queues-rabbit/&quot;&gt;talk&lt;/a&gt; I did in 2014 about RabbitMQ for more explanation on this topic. This takes us to use queues with message brokers for such tasks that can be done in the background.&lt;/p&gt;
&lt;h2 id=&quot;rabbitmq-quick-introduction&quot; tabindex=&quot;-1&quot;&gt;RabbitMQ quick introduction &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/07/rabbitmq-docker-nodejs/#rabbitmq-quick-introduction&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://www.rabbitmq.com/&quot;&gt;RabbitMQ&lt;/a&gt; brands itself as the “most widely deployed and most popular open-source message broker”. It has other open-source and SAAS competitors like Amazon SQS and Google PubSub to name a couple.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;In plain English, RabbitMQ is a software written in Erlang based on Advanced Message Queuing Protocol (AMQP), that provides a way to manage messages using exchanges and routing keys to put them in the right queues to be consumed by consumers.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Currently, it is under &lt;a href=&quot;https://www.vmware.com/au/company/acquisitions/rabbitmq.html&quot;&gt;VMWare&lt;/a&gt;. To further understand how exchanges, routing keys, and queues work in RabbitMQ please watch the video below:&lt;/p&gt;
&lt;div style=&quot;position: relative;
width: 100%;
height: 0;
padding-bottom: 56.25%; margin-bottom: 1rem;&quot;&gt;
  &lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/deG25y_r6OY&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&quot; style=&quot;
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;p&gt;Next up, we will run RabbitMQ with Docker and docker-compose with its management console. It is good to know that on a production class system, it would be better to use a managed RabbitMQ like &lt;a href=&quot;https://www.cloudamqp.com/&quot;&gt;CloudAMQP&lt;/a&gt; or &lt;a href=&quot;https://aws.amazon.com/amazon-mq/&quot;&gt;Amazon MQ&lt;/a&gt;. For the purpose of this tutorial, we will set up RabbitMQ with docker and docker-compose.&lt;/p&gt;
&lt;h2 id=&quot;prerequisites&quot; tabindex=&quot;-1&quot;&gt;Prerequisites &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/07/rabbitmq-docker-nodejs/#prerequisites&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Below are some prerequisites before we delve deeper into commands and code:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Docker and docker-compose should be installed and running on your machine. I am using Docker version 20.10.2 and Docker-compose version 1.27.4 on a Mac.&lt;/li&gt;
&lt;li&gt;Node.js should be installed and running locally or on a docker container. The latest LTS like Node.js 16 is preferred.&lt;/li&gt;
&lt;li&gt;A general understanding of how Node.js and Docker work is expected.&lt;/li&gt;
&lt;li&gt;Knowledge using npm commands is very helpful to follow this tutorial better.&lt;/li&gt;
&lt;li&gt;Some basic knowledge of how message queues work will be helpful but not required.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Time to jump into the commands and some Node.js code now.&lt;/p&gt;
&lt;h2 id=&quot;run-rabbitmq-with-docker-and-docker-compose&quot; tabindex=&quot;-1&quot;&gt;Run RabbitMQ with docker and docker-compose &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/07/rabbitmq-docker-nodejs/#run-rabbitmq-with-docker-and-docker-compose&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;To run RabbitMQ with docker and docker-compose we will first start by creating a folder with:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;mkdir&lt;/span&gt; nodejs-rabbitmq-docker&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then we will create a &lt;code&gt;docker-compose.yml&lt;/code&gt; file with the following content:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;version: &lt;span class=&quot;token string&quot;&gt;&quot;3.2&quot;&lt;/span&gt;&lt;br /&gt;services:&lt;br /&gt;  rabbitmq:&lt;br /&gt;    image: rabbitmq:3.8-management-alpine&lt;br /&gt;    container_name: &lt;span class=&quot;token string&quot;&gt;&#39;rabbitmq&#39;&lt;/span&gt;&lt;br /&gt;    ports:&lt;br /&gt;        - &lt;span class=&quot;token number&quot;&gt;5673&lt;/span&gt;:5672&lt;br /&gt;        - &lt;span class=&quot;token number&quot;&gt;15673&lt;/span&gt;:15672&lt;br /&gt;    volumes:&lt;br /&gt;        - ~/.docker-conf/rabbitmq/data/:/var/lib/rabbitmq/&lt;br /&gt;        - ~/.docker-conf/rabbitmq/log/:/var/log/rabbitmq&lt;br /&gt;    networks:&lt;br /&gt;        - rabbitmq_nodejs&lt;br /&gt;networks:&lt;br /&gt;  rabbitmq_nodejs:&lt;br /&gt;    driver: bridge&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let’s quickly see what the docker-compose file is doing. First, we specify a service called &lt;code&gt;rabbitmq&lt;/code&gt; that uses an image from Dockerhub. The image is RabbitMQ 3.8 with management plugin alpine edition. Next, we name the container &lt;code&gt;rabbitmq&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;After that, we expose local port 5673 to container port 5672 and local port 15673 to container port 15672 respectively. RabbitMQ runs on port 5672 and the management console web UI runs on port number 15672 of the container, we are mapping it to different local ports just to keep it different.&lt;/p&gt;
&lt;p&gt;Consequently, we map volumes so that our &lt;a href=&quot;https://www.rabbitmq.com/queues.html#durability&quot;&gt;durable queues&lt;/a&gt; and logs are not lost on container restart. Subsequently, we created a bridge network called &lt;code&gt;rabbitmq_nodejs&lt;/code&gt; that we are going to use later when we publish and consume the message with some Node.js code.&lt;/p&gt;
&lt;p&gt;To run the RabbitMQ instance locally with management console enabled, we will run:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;docker-compose&lt;/span&gt; up&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It will give us output similar to the below:&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/rabbitmq-docker-nodejs/02rabbitmq-docker.jpg&quot; title=&quot;Run RabbitMQ with Docker and Docker compose&quot; alt=&quot;Run RabbitMQ with Docker and Docker compose&quot; /&gt;
&lt;p&gt;Please be aware that we are using the default configuration used by the official &lt;a href=&quot;https://hub.docker.com/_/rabbitmq&quot;&gt;RabbitMQ docker image&lt;/a&gt;. This means it will use &lt;code&gt;guest&lt;/code&gt;:&lt;code&gt;guest&lt;/code&gt; for username and password including other default settings. To check if our RabbitMQ is running fine, it is best to hit &lt;code&gt;http://localhost:156763&lt;/code&gt; on the browser of our choice. We should see a long screen like below:&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/rabbitmq-docker-nodejs/03rabbitmq-mgmt-login.jpg&quot; title=&quot;RabbitMQ managemment running locally - login with guest:guest&quot; alt=&quot;RabbitMQ managemment running locally - login with guest:guest&quot; /&gt;
&lt;p&gt;If we provide the username &lt;code&gt;guest&lt;/code&gt; with password &lt;code&gt;guest&lt;/code&gt; and hit login, we will get into a screen like below which is the RabbitMQ management interface.&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/rabbitmq-docker-nodejs/04rabbitmq-mgmt-overview.jpg&quot; title=&quot;RabbitMQ managemment overview running locally with docker and docker compose&quot; alt=&quot;RabbitMQ managemment overview running locally with docker and docker compose&quot; /&gt;
&lt;p&gt;As seen in the above video, this is the dashboard that gives us a way to configure RabbitMQ as well as see what&#39;s happening in the queues and the exchanges. We can click around and see there are some exchanges already set up out of the box but there are no queues.&lt;/p&gt;
&lt;p&gt;For your reference, the above docker-compose file can be viewed in this &lt;a href=&quot;https://github.com/geshan/nodejs-rabbitmq-docker/pull/1&quot;&gt;pull request&lt;/a&gt; too. Next up, we will write a simple publisher that publishes a message to a queue with a &lt;a href=&quot;https://www.rabbitmq.com/tutorials/amqp-concepts.html#exchange-direct&quot;&gt;direct exchange&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;send-email-example&quot; tabindex=&quot;-1&quot;&gt;Send Email example &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/07/rabbitmq-docker-nodejs/#send-email-example&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;We will be using a hypothetical example of sending emails and create a dummy &lt;a href=&quot;https://www.rabbitmq.com/tutorials/tutorial-two-javascript.html&quot;&gt;Work queue&lt;/a&gt; scenario. A work queue is a simple queue where messages can be processed by multiple consumers and the consumers can be scaled up and down depending on the length of the queue.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;For instance, if the e-commerce website gets many orders between 7 PM and 9 PM then there may be 10 consumers to process the task to send emails. At wee hours of like 2 AM and 4 AM there might be just 1 consumer because the number of orders is very low at that time.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Next up, we will look at the Node.js code to publish the message to the RabbitMQ exchange with a routing key. Keep in mind, in a real-life scenario the publishing could be done by an application written in a different language.&lt;/p&gt;
&lt;h2 id=&quot;publish-a-message-to-rabbitmq-using-node.js&quot; tabindex=&quot;-1&quot;&gt;Publish a message to RabbitMQ using Node.js &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/07/rabbitmq-docker-nodejs/#publish-a-message-to-rabbitmq-using-node.js&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;To publish a message we will use the AMQP library from NPM. To set up a Node.js project and install the AMQP library we will run the following commands on the root of our folder which has the docker-compose file:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;npm&lt;/span&gt; init -y&lt;br /&gt;&lt;span class=&quot;token function&quot;&gt;npm&lt;/span&gt; i --save amqplib&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;At this point, there should be After that we will create a file called &lt;code&gt;publisher.js&lt;/code&gt; with the following contents:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; amqplib &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;amqplib&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; amqpUrl &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; process&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;env&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;AMQP_URL&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;amqp://localhost:5673&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; connection &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; amqplib&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;connect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;amqpUrl&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;heartbeat=60&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; channel &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; connection&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;createChannel&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Publishing&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; exchange &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;user.signed_up&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; queue &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;user.sign_up_email&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; routingKey &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;sign_up_email&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; channel&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;assertExchange&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;exchange&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;direct&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token literal-property property&quot;&gt;durable&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; channel&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;assertQueue&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;queue&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token literal-property property&quot;&gt;durable&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; channel&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;bindQueue&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;queue&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; exchange&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; routingKey&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; msg &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token string-property property&quot;&gt;&#39;id&#39;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; Math&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;floor&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Math&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;random&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string-property property&quot;&gt;&#39;email&#39;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;user@domail.com&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token literal-property property&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;firstname lastname&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; channel&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;publish&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;exchange&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; routingKey&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; Buffer&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;JSON&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;stringify&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;msg&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Message published&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;catch&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;e&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Error in publishing message&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; e&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;finally&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Closing channel and connection if available&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; channel&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; connection&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Channel and connection closed&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;  process&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;exit&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Time to recap what the above code is doing. First, we get the &lt;code&gt;amqplib&lt;/code&gt; library and define the &lt;code&gt;amqpUrl&lt;/code&gt; which first tries to get it from the environment variable &lt;code&gt;AMQP_URL&lt;/code&gt; if not found, it defaults to localhost port 5763. Next, we have an Immediately Invoked Function Expression (IIFE) which is async to support &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Asynchronous/Async_await&quot;&gt;await calls&lt;/a&gt;. In this function, we get a connection to the RabbitMQ server and then create a channel for our communication.&lt;/p&gt;
&lt;p&gt;After that, we make sure that the exchange exists and the queue exists too. We also specify that the queue is durable, which means the queue will remain intact if the RabbitMQ server restarts. If they don’t exist they will be created. Subsequently, we bind the exchange and the queue with the routing key. As our example is about emails, we are creating an exchange for user sign-up and a queue for user sign-up emails.&lt;/p&gt;
&lt;p&gt;Consequently, we construct a simple JSON message with id, email, and name and then publish it to the exchange with the routing key. The exchange as seen in the above video takes care of putting the message in the right queue. In case of an error, we print it on the console and we have the “finally” part that executes all the time. It will close the channel and connection and at the end we have the process exit call to kill the publisher process.&lt;/p&gt;
&lt;p&gt;The code for the publisher and related NPM files are available in this &lt;a href=&quot;https://github.com/geshan/nodejs-rabbitmq-docker/pull/2/files&quot;&gt;pull request&lt;/a&gt;. Next up, we will add the code for the consumer which will process the message.&lt;/p&gt;
&lt;h2 id=&quot;consume-messages-with-node.js&quot; tabindex=&quot;-1&quot;&gt;Consume messages with Node.js &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/07/rabbitmq-docker-nodejs/#consume-messages-with-node.js&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;To consume the published message there can be multiple consumers. If there are multiple consumers, messages will be distributed with a round-robin algorithm. Below is the Node.js code for consuming RabbitMQ messages as consumer.js file:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; amqplib &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;amqplib&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; amqpUrl &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; process&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;env&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;AMQP_URL&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;amqp://localhost:5673&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;processMessage&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;msg&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;content&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Call email API here&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token comment&quot;&gt;//call your email service here to send the email&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; connection &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; amqplib&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;connect&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;amqpUrl&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;heartbeat=60&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; channel &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; connection&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;createChannel&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    channel&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;prefetch&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; queue &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;user.sign_up_email&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    process&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;once&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;SIGINT&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;br /&gt;      console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;got sigint, closing connection&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; channel&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; connection&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;br /&gt;      process&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;exit&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; channel&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;assertQueue&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;queue&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token literal-property property&quot;&gt;durable&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; channel&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;consume&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;queue&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;      console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;processing messages&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;      &lt;br /&gt;      &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;processMessage&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;msg&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; channel&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;ack&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;msg&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token literal-property property&quot;&gt;noAck&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token literal-property property&quot;&gt;consumerTag&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;email_consumer&#39;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot; [*] Waiting for messages. To exit press CTRL+C&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let’s look at the code for this &lt;code&gt;consumer.js&lt;/code&gt; file is doing. First, we are requiring the &lt;code&gt;amqplib&lt;/code&gt; and defining the amqpUrl to connect to the RabbitMQ server. Then we have another IIFE that is async as well. Consequently, we set up a connection and a channel. This time we specify a &lt;a href=&quot;https://www.cloudamqp.com/blog/how-to-optimize-the-rabbitmq-prefetch-count.html&quot;&gt;prefetch&lt;/a&gt; count of 10, which tells how many messages are being pulled in by the consumer at the same time. Subsequently, we specify the queue to which the consumer will listen to which is &lt;code&gt;user.sign_up_email&lt;/code&gt; in this example.&lt;/p&gt;
&lt;p&gt;Next up, we have a listener that listens for any &lt;code&gt;SIGINT&lt;/code&gt;. It is usually the &lt;code&gt;CTRL+C&lt;/code&gt; behing hit on the keyboard or any other way the process is about to be killed. On &lt;code&gt;SIGINT&lt;/code&gt; we do the housekeeping of closing the channel and connection before exiting the process.&lt;/p&gt;
&lt;p&gt;After that, we make sure the queue exists and then start consuming the message when it arrives on the queue. Message processing is just a console.log for now. Reading the tutorial I wrote about &lt;a href=&quot;https://blog.logrocket.com/how-to-send-emails-with-node-js-using-sendgrid/&quot;&gt;sending emails with Node.js and Sendgrid&lt;/a&gt; would be helpful at this point. The other part we do is we &lt;code&gt;ack&lt;/code&gt; the message which tells RabbitMQ that the message was successfully processed.&lt;/p&gt;
&lt;p&gt;Another option is to &lt;a href=&quot;https://www.rabbitmq.com/nack.html&quot;&gt;nack&lt;/a&gt; the message which informs RabbitMQ that the message was not processed successfully and depending on the configuration it can be re-queued or sent to a &lt;a href=&quot;https://www.rabbitmq.com/dlx.html&quot;&gt;dead letter queue&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The other code is self-explanatory. You can even try our &lt;a href=&quot;https://geshan.com.np/blog/2020/11/nodejs-with-docker/&quot;&gt;Node.js with docker&lt;/a&gt; for an Express JS app. The consumer code is available in this &lt;a href=&quot;https://github.com/geshan/nodejs-rabbitmq-docker/pull/3/files&quot;&gt;pull request&lt;/a&gt;. Consequently, we will run the Node.js code in a docker container.&lt;/p&gt;
&lt;h2 id=&quot;set-up-docker-and-docker-compose-for-node.js&quot; tabindex=&quot;-1&quot;&gt;Set up Docker and Docker compose for Node.js &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/07/rabbitmq-docker-nodejs/#set-up-docker-and-docker-compose-for-node.js&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;To set up a well-formed docker file that uses &lt;a href=&quot;https://geshan.com.np/blog/2019/11/how-to-use-docker-multi-stage-build/&quot;&gt;multistage docker build&lt;/a&gt; utilizing the docker cache to make the &lt;a href=&quot;https://geshan.com.np/blog/2020/10/docker-build-example-faster-docker-build/&quot;&gt;docker build fast&lt;/a&gt;, we will use the following docker file:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;FROM node:16-alpine as base&lt;br /&gt;WORKDIR /src&lt;br /&gt;COPY package*.json ./&lt;br /&gt;&lt;br /&gt;FROM base as production&lt;br /&gt;ENV &lt;span class=&quot;token assign-left variable&quot;&gt;NODE_ENV&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;production&lt;br /&gt;RUN &lt;span class=&quot;token function&quot;&gt;npm&lt;/span&gt; ci&lt;br /&gt;COPY ./*.js ./&lt;br /&gt;CMD &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;node&quot;&lt;/span&gt;, &lt;span class=&quot;token string&quot;&gt;&quot;consumer.js&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;FROM base as dev&lt;br /&gt;RUN apk &lt;span class=&quot;token function&quot;&gt;add&lt;/span&gt; --no-cache &lt;span class=&quot;token function&quot;&gt;bash&lt;/span&gt;&lt;br /&gt;RUN &lt;span class=&quot;token function&quot;&gt;wget&lt;/span&gt; -O /bin/wait-for-it.sh https://raw.githubusercontent.com/vishnubob/wait-for-it/master/wait-for-it.sh&lt;br /&gt;RUN &lt;span class=&quot;token function&quot;&gt;chmod&lt;/span&gt; +x /bin/wait-for-it.sh&lt;br /&gt;&lt;br /&gt;ENV &lt;span class=&quot;token assign-left variable&quot;&gt;NODE_ENV&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;development&lt;br /&gt;RUN &lt;span class=&quot;token function&quot;&gt;npm&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;install&lt;/span&gt;&lt;br /&gt;COPY ./*.js ./&lt;br /&gt;CMD &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;node&quot;&lt;/span&gt;, &lt;span class=&quot;token string&quot;&gt;&quot;consumer.js&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We are using the latest Node.js LTS 16 with the alpine version as it is smaller than the options at around &lt;a href=&quot;https://hub.docker.com/layers/node/library/node/16-alpine/images/sha256-7f50c56fc6adbc28be74bc416dae55fdf0f835bba87fb7b1ad08c7db807f0cb7?context=explore&quot;&gt;38 MB&lt;/a&gt;. Next, we set the &lt;code&gt;WORKDIR&lt;/code&gt; to &lt;code&gt;/src&lt;/code&gt; and then copy the package.json and package-lock.json file to the “workdir” &lt;code&gt;/src&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Consequently, we start defining the “production” stage where we set &lt;code&gt;NODE_ENV&lt;/code&gt; to production and run &lt;code&gt;npm ci&lt;/code&gt; to get all the npm dependencies as defined in the lock file. To make better use of the docker build-cache, only after running the npm ci we copy all the &lt;code&gt;.js&lt;/code&gt; files to the work dir. Then we put the &lt;code&gt;CMD&lt;/code&gt; as “node consumer.js” to run the consumer in production.&lt;/p&gt;
&lt;p&gt;After the production stage, we define the dev stage in the Dockerfile. Here it is different from the production one, we first install bash. After that, we pull in &lt;a href=&quot;https://github.com/vishnubob/wait-for-it&quot;&gt;wait-for-it&lt;/a&gt; bash script because we want to wait for the RabbitMQ server to be running before the consumer tries to connect to it. Subsequently, we make it executable with &lt;code&gt;chmod +x wait-for-it.sh&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Next, we set the &lt;code&gt;NODE_ENV&lt;/code&gt; to be “development” for this stage. Then we run &lt;code&gt;npm install&lt;/code&gt; to get all the npm dependencies, if there were any dev dependencies like jest for testing it would have been pulled in too. Towards the end, we copy all the &lt;code&gt;js&lt;/code&gt; files to &lt;code&gt;/src&lt;/code&gt; and run the consumer.&lt;/p&gt;
&lt;p&gt;After the docker file is put in place, we will make some changes to the docker-compose file to include this docker file. The new docker-compose.yml file should look like the below to incorporate the docker file that runs the consumer:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;version: &lt;span class=&quot;token string&quot;&gt;&quot;3.2&quot;&lt;/span&gt;&lt;br /&gt;services:&lt;br /&gt;  rabbitmq:&lt;br /&gt;    image: rabbitmq:3.8-management-alpine&lt;br /&gt;    container_name: &lt;span class=&quot;token string&quot;&gt;&#39;rabbitmq&#39;&lt;/span&gt;&lt;br /&gt;    ports:&lt;br /&gt;        - &lt;span class=&quot;token number&quot;&gt;5673&lt;/span&gt;:5672&lt;br /&gt;        - &lt;span class=&quot;token number&quot;&gt;15673&lt;/span&gt;:15672&lt;br /&gt;    volumes:&lt;br /&gt;        - ~/.docker-conf/rabbitmq/data/:/var/lib/rabbitmq/&lt;br /&gt;        - ~/.docker-conf/rabbitmq/log/:/var/log/rabbitmq&lt;br /&gt;    networks:&lt;br /&gt;        - rabbitmq_nodejs&lt;br /&gt;  consumer:&lt;br /&gt;    build:&lt;br /&gt;      context: ./&lt;br /&gt;      target: dev&lt;br /&gt;    volumes:&lt;br /&gt;      - .:/src&lt;br /&gt;    depends_on:&lt;br /&gt;      - &lt;span class=&quot;token string&quot;&gt;&quot;rabbitmq&quot;&lt;/span&gt;&lt;br /&gt;    command: &lt;span class=&quot;token function&quot;&gt;sh&lt;/span&gt; -c &lt;span class=&quot;token string&quot;&gt;&#39;/bin/wait-for-it.sh rabbitmq:5672 --timeout=30 -- node consumer.js&#39;&lt;/span&gt;&lt;br /&gt;    environment:&lt;br /&gt;      NODE_ENV: production&lt;br /&gt;      AMQP_URL: amqp://guest:guest@rabbitmq:5672&lt;br /&gt;    networks:&lt;br /&gt;      - rabbitmq_nodejs&lt;br /&gt;networks:&lt;br /&gt;  rabbitmq_nodejs:&lt;br /&gt;    driver: bridge&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The main change here is, we define a new service called &lt;code&gt;consumer&lt;/code&gt; which builds the Dockerfile we defined above with target &lt;code&gt;dev&lt;/code&gt;. To keep things simple, we copy all the files from the current folder to &lt;code&gt;/src&lt;/code&gt; which is the work dir on the container with volumes. Next, we define this node.js container &lt;code&gt;depends_on&lt;/code&gt; the &lt;code&gt;rabbitmq&lt;/code&gt; container. This will only define the &lt;a href=&quot;https://docs.docker.com/compose/startup-order/&quot;&gt;sequence of start up&lt;/a&gt; of the container but not wait for the dependent container to be running; that is where wait-for-it comes into play. We wait for a maximum of 30 seconds for the RabbitMQ server to be up before the consumer starts.&lt;/p&gt;
&lt;p&gt;Subsequently, we sent some environment variables. The most important being &lt;code&gt;AMQP_URL&lt;/code&gt; which tells the consumer which RabbitMQ server to connect to using the AMQP protocol. It maps to the right host and port as part of the &lt;a href=&quot;https://docs.docker.com/compose/networking/&quot;&gt;docker compose network&lt;/a&gt; with the correct credentials.&lt;/p&gt;
&lt;p&gt;The changes for the docker-compose file and Dockerfile are available in this &lt;a href=&quot;https://github.com/geshan/nodejs-rabbitmq-docker/pull/4/files&quot;&gt;pull request&lt;/a&gt;. In the following section, we will test that all this setup and code works as intended.&lt;/p&gt;
&lt;h2 id=&quot;test-rabbitmq-with-node.js-on-docker-and-docker-compose&quot; tabindex=&quot;-1&quot;&gt;Test RabbitMQ with Node.js on Docker and docker-compose &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/07/rabbitmq-docker-nodejs/#test-rabbitmq-with-node.js-on-docker-and-docker-compose&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Now it is time to test that all the moving parts work as expected. To do this, we will first run:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;docker-compose&lt;/span&gt; up&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It will build the container for Node.js if it is not there and pull the RabbitMQ container too. It will start both the RabbitMQ docker container with the management plugin and the Node.js container that will run the consumer giving an output that looks like below:&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/rabbitmq-docker-nodejs/05rabbitmq-nodejs-consumer-running.jpg&quot; title=&quot;Node.js consumer running with docker compose&quot; alt=&quot;Node.js consumer running with docker compose&quot; /&gt;
&lt;p&gt;A thing to notice here towards the end is that the consumer started after 23 seconds when the RabbitMQ server was ready:&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/rabbitmq-docker-nodejs/06rabbitmq-nodejs-consumer-waiting.jpg&quot; title=&quot;Node.js consumer waiting for RabbitMQ to start with Docker compose&quot; alt=&quot;Node.js consumer waiting for RabbitMQ to start with Docker compose&quot; /&gt;
&lt;p&gt;If we login on to the RabbitMQ management console and see the Queues, we will see the &lt;code&gt;user.sign_up_email&lt;/code&gt; queue and there will be a consumer waiting for messages as below:&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/rabbitmq-docker-nodejs/07nodejs-consumer-on-rabbitmq-mgmt.jpg&quot; title=&quot;Node.js consumer visible on RabbitMQ mangaement UI&quot; alt=&quot;Node.js consumer visible on RabbitMQ mangaement UI&quot; /&gt;
&lt;p&gt;To test publishing some messages we will run the following command:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;docker-compose&lt;/span&gt; &lt;span class=&quot;token builtin class-name&quot;&gt;exec&lt;/span&gt; consumer /bin/bash -c &lt;span class=&quot;token string&quot;&gt;&#39;for ((i=1;i&amp;lt;=15;i++)); do node publisher.js; done&#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The above command will publish 15 messages to the queue with a bash loop. These messages will be processed by the consumer running in the same container. The consumer logs you can follow by running &lt;code&gt;docker-compose logs -f consumer&lt;/code&gt; will look something like below when the messages are publishing:&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/rabbitmq-docker-nodejs/08nodejs-consumer-processing-messages.jpg&quot; title=&quot;Node.js consumer processing messages published by the publisher&quot; alt=&quot;Node.js consumer processing messages published by the publisher&quot; /&gt;
&lt;p&gt;While the messages are procssed by the consumers, the RabbitMQ management console screen for that queue will look like the below:&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/rabbitmq-docker-nodejs/09rabbitmq-messages-consumed.gif&quot; title=&quot;Node.js consumer processing messages visible in RabbitMQ management console&quot; alt=&quot;Node.js consumer processing messages visible in RabbitMQ management console&quot; /&gt;
&lt;p&gt;There was a spike of 15 incoming messages and the green line in the graph shows that all of them were processed and sucessfully acked. Another thing visible on that screen is, there is only 1 consumer on the queue with a prefetch count of 10 as we set in the config.&lt;/p&gt;
&lt;p&gt;We have successfully tested publishing and consuming messages on RabbitMQ with Node.js running on Docker and Docker Compose.&lt;/p&gt;
&lt;h2 id=&quot;conclusion&quot; tabindex=&quot;-1&quot;&gt;Conclusion &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/07/rabbitmq-docker-nodejs/#conclusion&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In this step-by-step tutorial, we saw how to set up RabbitMQ with Docker and Docker Compose first. Then we added a publisher and consumer code with Node.js. After that, we put the Node.js code in a Docker container and plugged it into the existing docker-compose that already had the RabbitMQ container defined.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;In a more real-life application, the messages may be produced by a different service potentially written in a different language like PHP or Python. The message can be consumed by another service written in Node.js or GoLang.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;As long as the messages are passed on using a standard notation like JSON, they should be easily produced and processed by the respective consumer. I hope this guide was useful to scratch the surface of RabbitMQ with Docker and publishing and consuming RabbitMQ messages with Node.js. Happy async processing!&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>Tech career advice: 7 resources you must exploit today</title>
		<link href="https://geshan.com.np/blog/2021/07/tech-career-advice/"/>
		<updated>2021-07-10T12:42:35Z</updated>
		<id>https://geshan.com.np/blog/2021/07/tech-career-advice/</id>
		<content type="html">&lt;p&gt;Finding and following great tech career advice can pave the way for your promotion to the next level. In this post, we will discuss 7 amazing pieces of content by equally amazing people that can act as a key to unlock the door to the next level of your career, let’s get started!&lt;/p&gt;
&lt;!-- more --&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/tech-career-advice/01tech-career-advice.jpg&quot; title=&quot;Tech career advice you should follow now&quot; alt=&quot;Tech career advice you should follow now&quot; /&gt;
&lt;p&gt;More than once, I have found myself referring to similar content to people who come to me for tech career advice. The general questions are: I want to advance to the next level, my manager doesn’t push me enough, etc. My general response to these concerns are:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;No one is more concerned about your promotion than yourself and no one is going to serve a promotion on a plate for you. You will need to work and earn that promotion.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;So get ready to be directed towards great tech career advice by some awesome people who really know what they are talking about as most of it is coming out of their own experience.&lt;/p&gt;
&lt;h2 id=&quot;table-of-contents&quot; tabindex=&quot;-1&quot;&gt;Table of contents &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/07/tech-career-advice/#table-of-contents&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/07/tech-career-advice/#must-consume-pieces-of-tech-career-advice&quot;&gt;Must consume pieces of tech career advice&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/07/tech-career-advice/#staff-engineering-podcast---will-larson&quot;&gt;Staff Engineering podcast - Will Larson&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/07/tech-career-advice/#brag-doc-by-julia-evans&quot;&gt;Brag Doc by Julia Evans&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/07/tech-career-advice/#engineering-levels---charity-majors&quot;&gt;Engineering Levels - Charity Majors&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/07/tech-career-advice/#how-to-achieve-career-growth---damian-schenkelman&quot;&gt;How to achieve career growth - Damian Schenkelman&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/07/tech-career-advice/#being-glue---tanya-reilly&quot;&gt;Being Glue - Tanya Reilly&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/07/tech-career-advice/#manager-voltron---lara-hogan&quot;&gt;Manager Voltron - Lara Hogan&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/07/tech-career-advice/#talk-yourself-up---hbr-idea-cast&quot;&gt;Talk yourself up - HBR idea cast&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/07/tech-career-advice/#bonus-resources-with-tech-career-advice&quot;&gt;Bonus resources with tech career advice&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/07/tech-career-advice/#conclusion&quot;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;must-consume-pieces-of-tech-career-advice&quot; tabindex=&quot;-1&quot;&gt;Must consume pieces of tech career advice &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/07/tech-career-advice/#must-consume-pieces-of-tech-career-advice&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Below are some of the amazing content available online on how you can get that coveted promotion. It will be especially helpful if you are a woman in tech, for instance, the glue code post is oriented towards female software engineers.&lt;/p&gt;
&lt;h3 id=&quot;staff-engineering-podcast---will-larson&quot; tabindex=&quot;-1&quot;&gt;Staff Engineering podcast - Will Larson &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/07/tech-career-advice/#staff-engineering-podcast---will-larson&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;In my opinion, Will Larson the current CTO of &lt;a href=&quot;https://www.calm.com/&quot;&gt;calm&lt;/a&gt; is the semi-god in the tech career advice arena. His &lt;a href=&quot;https://lethain.com/&quot;&gt;blog&lt;/a&gt; has lots of amazing pieces on &lt;a href=&quot;https://lethain.com/career-advice/&quot;&gt;career advice&lt;/a&gt;. He has worked at companies like Stripe, Uber, and Digg to name a few. He surely knows how to share his experience about the tech career and advice people of all levels, specifically Seniors and above to climb up to the next milestone.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I would recommend anything Will writes or says on any podcasts.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;One of my favorite podcast episodes is, where Will was a guest on Career Chats titled &lt;a href=&quot;https://careerchats.transistor.fm/episodes/staff-engineering-ft-will-larson&quot;&gt;Staff Engineering&lt;/a&gt;. The main takeaway from that podcast for me was find a mentor”.&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/tech-career-advice/02will-larson-podcast.jpg&quot; title=&quot;Staff Engineering Podcast featuring Will Larson&quot; alt=&quot;Staff Engineering Podcast featuring Will Larson&quot; /&gt;
&lt;p&gt;He has also written a book called &lt;a href=&quot;https://staffeng.com/book&quot;&gt;StaffEng&lt;/a&gt;, the StaffEng website also has amazing &lt;a href=&quot;https://staffeng.com/stories/&quot;&gt;stories&lt;/a&gt; and &lt;a href=&quot;https://podcast.staffeng.com/&quot;&gt;podcasts&lt;/a&gt; of other Staff plus engineers. The baseline here is, if Will Larson is featured on any &lt;a href=&quot;https://www.listennotes.com/top-episodes/will-larson/&quot;&gt;podcast&lt;/a&gt;,  make sure that you listen to it as it will surely have some great tech career advice you should not miss at any cost.&lt;/p&gt;
&lt;p&gt;Moving on to the next piece that has landed promotions to at least 2 people I shared the post with, it is none other than Brag doc.&lt;/p&gt;
&lt;h3 id=&quot;brag-doc-by-julia-evans&quot; tabindex=&quot;-1&quot;&gt;Brag Doc by Julia Evans &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/07/tech-career-advice/#brag-doc-by-julia-evans&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Julia Evans also has a great blog. Of course, her &lt;a href=&quot;https://wizardzines.com/&quot;&gt;zines&lt;/a&gt; are super amazing too. The one on the &lt;a href=&quot;https://wizardzines.com/zines/bite-size-command-line/&quot;&gt;command line&lt;/a&gt; is great. She identifies herself as a &lt;a href=&quot;https://jvns.ca/about/&quot;&gt;software developer&lt;/a&gt; whose earnings come from her business Wizard Zines.&lt;/p&gt;
&lt;p&gt;One of her blog posts that you must absolutely read word by word is &lt;a href=&quot;https://jvns.ca/blog/brag-documents/&quot;&gt;Brag Document&lt;/a&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The premise is simple, you don’t remember everything you did and your manager doesn’t know and/or remember all the things you did.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Document in a brag/achievements doc that will act as a strong case for your &lt;a href=&quot;https://staffeng.com/guides/promo-packets&quot;&gt;promotion packet&lt;/a&gt;.&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/tech-career-advice/03julai-evans-brag-doc.jpg&quot; title=&quot;Brag Document by Julia Evans&quot; alt=&quot;Brag Document by Julia Evans&quot; /&gt;
&lt;p&gt;Include your goals, include other things like mentoring, docs, what you learned, and even things outside work. Accentuate your achievements and make it work as a bridge to that coveted promotion or leveling up in some way or form.&lt;/p&gt;
&lt;p&gt;Next up, we will discuss how there should be space where you can move up.&lt;/p&gt;
&lt;h3 id=&quot;engineering-levels---charity-majors&quot; tabindex=&quot;-1&quot;&gt;Engineering Levels - Charity Majors &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/07/tech-career-advice/#engineering-levels---charity-majors&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Charity Majors is the CEO and co-founder of HoneyComb. She has worked at Facebook and Parse. She is also the co-author of Database Reliability Engineering” by O’Reilly. One of the best posts on her blog about tech career advice is on &lt;a href=&quot;https://charity.wtf/2020/09/14/useful-things-to-know-about-engineering-levels/&quot;&gt;Engineering Levels&lt;/a&gt;.&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/tech-career-advice/04charity-majors-engineering-levels.jpg&quot; title=&quot;Engineering Levels by Charity Majors&quot; alt=&quot;Engineering Levels by Charity Majors&quot; /&gt;
&lt;p&gt;The thing I remember most about this amazing post is, “is there oxygen?”, it mentions:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;In short, is there oxygen at the next level? Does the company need more of the type of engineer you want to be, vs more of the type of engineer you are now?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;It adds even better advice like, “Your relationship with your manager matters. So does your ability to communicate about the work you are doing, its difficulty, its unexpected challenges, and triumphs, etc. This is called “managing up”, and it is an actual skill which I am &lt;em&gt;terrible&lt;/em&gt; at. So are most of you”. To sum up, don’t just scan through this gem of a post, read it line by line. This advice is coming from someone who has seen it all and is CEO of a pretty &lt;a href=&quot;https://www.honeycomb.io/blog/honeycombio-closes-series-b-funding-round/&quot;&gt;successful company&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Consequently, we will dig into how to achieve career growth.&lt;/p&gt;
&lt;h3 id=&quot;how-to-achieve-career-growth---damian-schenkelman&quot; tabindex=&quot;-1&quot;&gt;How to achieve career growth - Damian Schenkelman &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/07/tech-career-advice/#how-to-achieve-career-growth---damian-schenkelman&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://yenkel.dev/pages/about&quot;&gt;Damian Schenkelman&lt;/a&gt; the author of this influential article is a principal engineer at Auth0, before working there he used to work at Microsoft. This particular post about &lt;a href=&quot;https://yenkel.dev/posts/how-to-achieve-career-growth-opportunities-skills-sponsors&quot;&gt;how to achieve career growth&lt;/a&gt; is detailed and very helpful.&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/tech-career-advice/05damian-career-growth.jpg&quot; title=&quot;How to achieve career growth by Damain&quot; alt=&quot;How to achieve career growth by Damain&quot; /&gt;
&lt;p&gt;One thing I clearly remember from this great piece is:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The biggest decisions about your career are often made when you’re not in the room&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The way he defines “sponsors”, finding the right ones, and making your skills visible to them is one of the best tech career advice I have read in the past couple of years. Like Charity’s post, he also mentioned available opportunities. He adds: “Available Opportunities are also contextual: they depend on your seniority, team, company’s financial situation, etc.” All in all, you should read this post as well to understand the dynamics between what you want, what your company needs, and how sponsors, including yourself, can bridge that gap to get you promoted.&lt;/p&gt;
&lt;p&gt;Subsequently, we will discuss one of my favorite tech career advice by Tanya - Being Glue.&lt;/p&gt;
&lt;h3 id=&quot;being-glue---tanya-reilly&quot; tabindex=&quot;-1&quot;&gt;Being Glue - Tanya Reilly &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/07/tech-career-advice/#being-glue---tanya-reilly&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://noidea.dog/about&quot;&gt;Tanya Rielly&lt;/a&gt; is a Principal software engineer at Squarespace working on infrastructure and site reliability. Before Squarespace, she has spent 12 years in Site Reliability Engineering at Google. If people like Tanya give a talk or have some tech career advice, I will be there all ears to soak up the advice. This particular blog post/talk &lt;a href=&quot;https://noidea.dog/glue&quot;&gt;Being Glue&lt;/a&gt; is not really direct tech career advice. It is more like how many companies tend to value “hard engineering skills” and undermine all the other technical and human skills involved in software engineering.&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/tech-career-advice/06tanya-reilly-being-glue.jpg&quot; title=&quot;Being Glue by Tanya Reilly&quot; alt=&quot;Being Glue by Tanya Reilly&quot; /&gt;
&lt;p&gt;This scenario is very relatable to female software engineers.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I shared it with one of the female software engineers I know and she said this is exactly what is happening to me right now.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;My advice as Tanya says in the talk was, to let things break and then people will value you. Glue work is like glue code in my view, looks like it is just adding that route in the controller but without it, all the amazing code you wrote has no interface to be accessed. Baseline, always value glue work!&lt;/p&gt;
&lt;p&gt;Next up we have a piece geared towards the people who think their manager is not doing enough. Let’s dig into that.&lt;/p&gt;
&lt;h3 id=&quot;manager-voltron---lara-hogan&quot; tabindex=&quot;-1&quot;&gt;Manager Voltron - Lara Hogan &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/07/tech-career-advice/#manager-voltron---lara-hogan&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://larahogan.me/&quot;&gt;Lara Hogan&lt;/a&gt; brands herself as a coach and trainer for the tech industry, she is also the author of the book &lt;a href=&quot;https://resilient-management.com/&quot;&gt;Resilient management&lt;/a&gt;. She has a blog full of great content, &lt;a href=&quot;https://larahogan.me/blog/manager-voltron/&quot;&gt;manager Voltron&lt;/a&gt; is the one that stands out for me as great tech career advice.&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/tech-career-advice/07lara-hogan-manager-voltron.jpg&quot; title=&quot;Manager Voltron by Lara Hogan&quot; alt=&quot;Manager Voltron by Lara Hogan&quot; /&gt;
&lt;p&gt;In that post, she talks about how you should not rely solely on your manager but have other people who can help you with your career progression. She also mentions:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;No one person will ever be able to manage you the way you want or need.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;And adds:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;there are a plethora of people out there whom you can lean on to find the variety of support you need.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;She also advocates the reader to find a coach and it really helps you. A quick rundown is available in the &lt;a href=&quot;https://larahogan.me/resources/Manager-Voltron-Bingo.pdf&quot;&gt;Manager Voltron worksheet&lt;/a&gt;. Another great general resource I picked up from her in a &lt;a href=&quot;https://www.range.co/blog/lara-hogan-leading-in-pandemic&quot;&gt;podcast&lt;/a&gt; she was a guest in is &lt;a href=&quot;https://docs.google.com/document/d/1qOXEOOYvxiA4LDgmEqK0hCYuJ44nf0Z8UM-j48kK4gw/edit&quot;&gt;Defrag you calendar worksheet&lt;/a&gt;. It is geared towards managers but surely doesn’t say others can’t use it :).&lt;/p&gt;
&lt;p&gt;Next up is a podcast, to talk yourself up from the HBR idea cast.&lt;/p&gt;
&lt;h3 id=&quot;talk-yourself-up---hbr-idea-cast&quot; tabindex=&quot;-1&quot;&gt;Talk yourself up - HBR idea cast &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/07/tech-career-advice/#talk-yourself-up---hbr-idea-cast&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;There is very little chance that you have not heard of Harvard even though you may have missed Harvard Business Review. Lucky for us, they do a great podcast called the &lt;a href=&quot;https://hbr.org/2018/01/podcast-ideacast&quot;&gt;HBR ideacast&lt;/a&gt;. Amongst the many great episodes Ideacast has, there is surely one, in particular, I can tag as great tech career advice. It is about &lt;a href=&quot;https://hbr.org/podcast/2021/05/296801-2&quot;&gt;how to talk yourself up&lt;/a&gt;, without turning off people.&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/tech-career-advice/08hbr-ideacast-talk-yourself-up.jpg&quot; title=&quot;Talk yourself up by HBR Ideacast&quot; alt=&quot;Talk yourself up by HBR Ideacast&quot; /&gt;
&lt;p&gt;Let’s admit this fact, you will need to self-promote yourself to make yourself visible and accentuate your hard work. This podcast episode gently stems out of the &lt;a href=&quot;https://hbr.org/2021/05/savvy-self-promotion&quot;&gt;Savvy self-promotion&lt;/a&gt; article.&lt;/p&gt;
&lt;p&gt;In this particular episode, the host Alison Beard interviews Leslie John, an associate professor at Harvard Business School.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;They discuss how people at times beat the self-promotion drum too much and go into the humble brags route too.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;They also discuss sharing when others are sharing. Another great takeaway from this almost 26-minute episode is to promote other people’s work which eventually helps you.&lt;/p&gt;
&lt;p&gt;Next up we have some more resources as a bonus for you.&lt;/p&gt;
&lt;h2 id=&quot;bonus-resources-with-tech-career-advice&quot; tabindex=&quot;-1&quot;&gt;Bonus resources with tech career advice &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/07/tech-career-advice/#bonus-resources-with-tech-career-advice&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In addition to the above amazing podcasts and blog posts, Learn in Public will be a good thing for your tech career progression. The creator of &lt;a href=&quot;https://www.learninpublic.org/&quot;&gt;Learn In Public&lt;/a&gt; has a book called The Career Coding Handbook. It has &lt;a href=&quot;https://www.learninpublic.org/toc&quot;&gt;3 free chapters&lt;/a&gt; that have amazing tech career advice filled up in them. Of course, if you like what you read I would recommend buying that book.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;If you are a junior dev the &lt;a href=&quot;https://www.learninpublic.org/v1-careers-junior-to-senior.pdf&quot;&gt;From junior to senior&lt;/a&gt; free chapter is a gold mine of great information.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;There are a couple of amazing weeklies I am subscribed to that feeds into my hunger each week for top-class tech career advice.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;They are &lt;a href=&quot;https://softwareleadweekly.com/&quot;&gt;Software Lead Weekly&lt;/a&gt; and &lt;a href=&quot;https://levelup.patkua.com/&quot;&gt;Level Up&lt;/a&gt; by Patrick Kua are amazing.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Both of these are more geared towards Senior level engineers and above. Again, Senior and above is more of a mindset and if you can develop them soon enough that is a good thing. &lt;a href=&quot;https://leaddev.com/&quot;&gt;Lead dev&lt;/a&gt; is also a great resource for stand-out tech career advice.&lt;/p&gt;
&lt;h2 id=&quot;conclusion&quot; tabindex=&quot;-1&quot;&gt;Conclusion &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/07/tech-career-advice/#conclusion&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;As mentioned above, you are the one in charge of your career progression.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;If you don’t self-invest and stride towards that promotion, other people like your manager have very little skin in the game to be going deeper.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Use the above resources to your advantage, soak up all the great tech career advice you can get, and try to level up to achieve your next career milestone.&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>A mini tech startup (side project) that earned in terms of life-changing first full-time tech jobs, not money</title>
		<link href="https://geshan.com.np/blog/2021/06/life-changing-side-project/"/>
		<updated>2021-06-27T12:42:35Z</updated>
		<id>https://geshan.com.np/blog/2021/06/life-changing-side-project/</id>
		<content type="html">&lt;p&gt;Most often than not, the success of any project (or start-up) is measured in terms of current and potential profits. We often overlook human growth which is even more fulfilling. In this post, I am going to discuss how a side project/mini startup -- &lt;a href=&quot;https://autechjobs.ml/&quot;&gt;AU Tech Jobs&lt;/a&gt; helped at least 6 people, all immigrants, land full-time tech jobs from casual non-tech roles and how it has changed their lives in more positive ways during this looming pandemic.&lt;/p&gt;
&lt;!-- more --&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/life-changing-startup/01autechjobs-app.jpg&quot; title=&quot;AU Tech Jobs - a life-changing startup&quot; alt=&quot;AU Tech Jobs - a life-changing startup&quot; /&gt;
&lt;h2 id=&quot;table-of-contents&quot; tabindex=&quot;-1&quot;&gt;Table of contents &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/06/life-changing-side-project/#table-of-contents&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/06/life-changing-side-project/#how-au-tech-jobs-started&quot;&gt;How AU Tech Jobs started&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/06/life-changing-side-project/#getting-more-hands-in-the-game&quot;&gt;Getting more hands in the game&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/06/life-changing-side-project/#that-soft-launch&quot;&gt;That soft launch&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/06/life-changing-side-project/#joiners-and-leavers&quot;&gt;Joiners and leavers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/06/life-changing-side-project/#first-success-story&quot;&gt;First success story&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/06/life-changing-side-project/#other-success-stories-followed&quot;&gt;Other success stories followed&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/06/life-changing-side-project/#not-all-rosy-stories&quot;&gt;Not all rosy stories&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/06/life-changing-side-project/#timeline&quot;&gt;Timeline&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/06/life-changing-side-project/#conclusion&quot;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;how-au-tech-jobs-started&quot; tabindex=&quot;-1&quot;&gt;How AU Tech Jobs started &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/06/life-changing-side-project/#how-au-tech-jobs-started&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Towards the end of &lt;a href=&quot;https://twitter.com/geshan/status/1209020866035638272?lang=en&quot;&gt;2019&lt;/a&gt;, I become a &lt;a href=&quot;https://developers.google.com/community/experts/directory/profile/profile-geshan-manandhar&quot;&gt;Google Developer Expert&lt;/a&gt; (GDE) for Google Cloud Platform (GCP) which landed me $500 credit for GCP. I had a &lt;a href=&quot;https://twitter.com/intent/follow?original_referer=https%3A%2F%2Fgeshan.com.np%2F&amp;amp;ref_src=twsrc%5Etfw&amp;amp;region=follow_link&amp;amp;screen_name=nepal_news_en&amp;amp;tw_p=followbutton&quot;&gt;side project&lt;/a&gt; running since 2019 and a fraction of the credit was used for that side project. I had this idea to make a job aggregator, with a simple problem to solve.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The job searcher doesn’t need to go to 50+ websites to look for jobs of their interest, it is aggregated at one place.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The person looking for a job could follow companies, keep a track of jobs applied and do similar tasks. Along the same lines, I had also built a list of companies that provide &lt;a href=&quot;https://github.com/geshan/au-companies-providing-work-visa-sponsorship&quot;&gt;work visa sponsorship&lt;/a&gt; in Australia.&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/life-changing-startup/02autechjobs-site.jpg&quot; title=&quot;AU Tech Jobs - a life changing startup&quot; alt=&quot;AU Tech Jobs - a life changing startup&quot; /&gt;
&lt;p&gt;I had jotted down a gist on 2-Jan-2020 with a basic outline of how I wanted to get this Job aggregator to life from an idea in my head. After a couple of months and after tackling some of my own issues, I came back to the project. By then it was the end of April 2020 and the COVID-19 pandemic situation had gradually begun to settle in Sydney.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I wanted to do some microservices and I had a bunch of scrapers running in my head already.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I put a couple of them in code and the scraper microservice to pull the jobs from 5 companies. By the end of Apr, I had the scraper pull in jobs on a schedule from 5 companies using ScarpingHub (now &lt;a href=&quot;https://www.zyte.com/&quot;&gt;Zyte&lt;/a&gt;) for free.&lt;/p&gt;
&lt;h2 id=&quot;getting-more-hands-in-the-game&quot; tabindex=&quot;-1&quot;&gt;Getting more hands in the game &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/06/life-changing-side-project/#getting-more-hands-in-the-game&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Sooner than later, I realized that building this by myself wasn’t going to be enough. If I wanted to help job seekers, I would need more support. As a result, my search for contributors began. But I thought to myself, What was the point? Why would anyone contribute/write code for free to support an idea some random guy has? This helped me materialize the value this project would bring to the team that contributed to it. So I reached out to freelancers/ job seekers from my network.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The value proposition was an opportunity to be a part of a tech startup, learn from one another and pave their way to a more lucrative full-time tech job. Another advantage was the network of people working on AU Tech Jobs.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;In a matter of months, I had gathered 8-10 amazing people (some I had known previously) who were pumping code to the idea. It had already taken some shape and at this point, there were already 2-3 &lt;a href=&quot;https://geshan.com.np/blog/2020/11/nodejs-microservices/&quot; title=&quot;Node.js microservices&quot;&gt;Node.js microservices&lt;/a&gt; on &lt;a href=&quot;https://geshan.com.np/blog/2019/11/why-use-google-cloud-run-5-compelling-reasons/&quot; title=&quot;Google Cloud Run&quot;&gt;Google Cloud Run&lt;/a&gt;. I was architecting the solution in the little time I could give to the project and this amazing bunch of people was moving the idea forward.&lt;/p&gt;
&lt;h2 id=&quot;that-soft-launch&quot; tabindex=&quot;-1&quot;&gt;That soft launch &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/06/life-changing-side-project/#that-soft-launch&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;On 3-Aug-2020 we did a soft launch and publicized AU Tech Jobs in some of the social media channels.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The response was lukewarm but we were not after the numbers, we were after up-skilling ourselves.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This project fulfilled many purposes at once. For job seekers, it acted as an opportunity to gain real-time work experience through a project. For others, this meant many things; a means to give back to the tech community, a means to build up new skills or a means to explore new tech opportunities. People who didn’t have full-time tech jobs were after that prized possession and those who had one (not me) were after the next better role they could get using AU Tech Jobs as a bridge.&lt;/p&gt;
&lt;h2 id=&quot;joiners-and-leavers&quot; tabindex=&quot;-1&quot;&gt;Joiners and leavers &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/06/life-changing-side-project/#joiners-and-leavers&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Like any other idea, start-up, or side project, We also had some joiners and leavers. The leavers were the ones who would bag a full-time tech job during the pandemic. On top of it, they were already battling a visa situation, which made this success even more worthwhile.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;As it is pretty clear, here in Australia if you don’t have a permanent residency (PR) or Australian citizenship your chance of landing a job is automatically at least halved.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;And then without money to make ends meet, the motivation to contribute to a project could also dwindle with time.&lt;/p&gt;
&lt;p&gt;Getting a full-time job is an entirely different ball game when you are an immigrant. You land in a new country and city. The culture is very different than what you were used to most of your life. Even your mother tongue is not English. This is why 6+ people getting full-time jobs through AU Tech Jobs in itself is not a small thing.&lt;/p&gt;
&lt;h2 id=&quot;first-success-story&quot; tabindex=&quot;-1&quot;&gt;First success story &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/06/life-changing-side-project/#first-success-story&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Our beloved, SB, who had contributed really well to AU Tech Jobs, was the first person to join the team and was living here in Australia. At that time, he was employed with an Aged Care center. He was sharpening his programming and frontend software engineering skills with React like a lion devouring his kill.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Against all odds of visa, not having worked in tech before he bagged a full-time coding job in Brisbane.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;In just 3-4 months he really stood out and gave his level best to not only get the tasks for AU Tech Jobs frontend done but also lead the team in his own right.&lt;/p&gt;
&lt;p&gt;It was a happy and sad moment for the team when he moved on. Happy because this was a life-changing moment for him where he said goodbye to odd hours at his old job, needing to be onsite during a pandemic.&lt;/p&gt;
&lt;p&gt;We were sad because his new full-time job meant that he would have to leave our project too. Plus, h and BA were the dynamic duos taking the front end of AU Tech Jobs forward. Looking back I think we were happier than sad :).&lt;/p&gt;
&lt;h2 id=&quot;other-success-stories-followed&quot; tabindex=&quot;-1&quot;&gt;Other success stories followed &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/06/life-changing-side-project/#other-success-stories-followed&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The goal for AU Tech Jobs was always clear, we were not sure if we could monetize it. However, we knew it was a valued learning opportunity. . One that the team members could use as a springboard to get that prized full-time tech job.&lt;/p&gt;
&lt;p&gt;That is what AK did and he did it pretty damn well. He had recently finished his bachelor’s here in Sydney and was working as casual staff at woolies. He is a full-stack workhorse, take my word for that. I see my younger self in him. He is skilled, talented, and driven.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Had AU Tech Jobs been well funded, he would be one of the first people we would hire full time.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;He sharpened up his CV and got an offer for a junior software engineer in December.e started working from mid-Jan this year.&lt;/p&gt;
&lt;p&gt;Another one is RG, he had been struggling to crack that coveted full-time tech job for a while. Working at a supermarket then and doing odd hours like 6 AM to 3 PM he really wanted to bring flexibility in his work hours.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;With more than half a dozen job interviews under his belt and lots of meaningful contributions to AU Tech Job’s backend and frontend, I knew it was just a matter of time for him to break that glass ceiling.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Not to my surprise, he got an offer in Jan-2021 and started working as a Jr. Frontend Software Engineer from mid-Feb this year.&lt;/p&gt;
&lt;p&gt;Then we have AM, she re-found her love of writing with AU Tech Jobs in Sep-2020. Now she is freelancing as a writer and social media person.&lt;/p&gt;
&lt;p&gt;You can read some success stories on this &lt;a href=&quot;https://autechjobs.ml/blog/side-project-helps-to-land-tech-job-in-australia/&quot;&gt;blog post&lt;/a&gt; at AU Tech Jobs’ blog too. I can go on and on with the other 3-5 people who cracked the prized full-time tech job.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Not only did they increase their income by 1.5x to 2x but also earned the flexibility to work from home during such a harsh pandemic time.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;They also get to work in something they truly like, not something they do just to make ends meet. I am happy for all of them.&lt;/p&gt;
&lt;h2 id=&quot;not-all-rosy-stories&quot; tabindex=&quot;-1&quot;&gt;Not all rosy stories &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/06/life-changing-side-project/#not-all-rosy-stories&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Of course, not all people who contribute to AU Tech Jobs landed better full-time tech jobs. A couple of them did land 3-4 interviews but it did not convert to a job offer. However, each journey is individual and depends on individual capacity to learn and grow. Some of them did not pay much heed to the suggestions provided :). Still, I wish success and good luck to all of them.&lt;/p&gt;
&lt;p&gt;The project has surely slowed down in the past months as most contributors have full-time tech jobs now. We have burnt some money at ~$1 a day, thanks to Google Cloud Platform&#39;s clear pricing and that money has also come from my Google Developer Expert credit. We have gained around a user a day for the past 340 ish days, not a great number but relatively good for the 0 marketing dollars spent.&lt;/p&gt;
&lt;h2 id=&quot;timeline&quot; tabindex=&quot;-1&quot;&gt;Timeline &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/06/life-changing-side-project/#timeline&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Below is a quick timeline of the people I have mentored to land full-time tech jobs in the past 3 years. These are mostly Nepalese tech students who pursued their bachelor’s or master&#39;s degree here in Australia. So as an estimate, they have spent around25% (6 out of 24 years) of their life in computer-related studies. They have the skills to get lucrative tech jobs but just needed an extra push adjusting to a new tech community. Some of them also had some years of full-time work experience back in Nepal, which would make them an asset for any tech company.&lt;/p&gt;
&lt;p&gt;I am looking forward to contributing through mentorships or tech job searches to whoever may need it. You can get in touch with me via email, find it in this blog somewhere :).&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/life-changing-startup/03timeline.jpg&quot; title=&quot;Timeline of people I have helped land first or second full-time tech job in the past 3 years&quot; alt=&quot;Timeline of people I have helped land first or second full-time tech job in the past 3 years&quot; /&gt;
&lt;p&gt;You can view the interactive &lt;a href=&quot;https://time.graphics/line/480450&quot;&gt;timeline&lt;/a&gt; too.&lt;/p&gt;
&lt;p&gt;When I am able to assist someone to land a full-time tech job, it gives me a greater sense of fulfillment than if I would have helped them with monetary resources. When I am able to assist someone to land a full-time tech job, it gives me a greater sense of fulfillment than if I would have helped them with monetary resources. I have referred them to lots of positions. I have filled out reference forms or taken calls for being a reference.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;If software engineers like us do this small step of helping someone junior with CV help, referral, being a reference, or mentoring a person to find a job it translates to a life-changing experience for them.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;If you can please do it.&lt;/p&gt;
&lt;h2 id=&quot;conclusion&quot; tabindex=&quot;-1&quot;&gt;Conclusion &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/06/life-changing-side-project/#conclusion&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I have worked as a software engineer for the past 15 years in 4 countries across 3 continents. I think I know some things about how to architect and build scalable and &lt;a href=&quot;https://geshan.com.np/blog/2020/12/software-resilience/&quot;&gt;resilient software&lt;/a&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;If I can teach the software engineering best practices and trends to these young people and help them land a full-time tech job probably that is one of the best forms of giving back to the community.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;It is surely life-changing for them and it could even possibly be better than contributing in other ways like code or content. Thanks for reading!&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>How to use Node.js and Redis cache to speed up HTTP responses</title>
		<link href="https://geshan.com.np/blog/2021/05/nodejs-redis/"/>
		<updated>2021-05-31T12:42:35Z</updated>
		<id>https://geshan.com.np/blog/2021/05/nodejs-redis/</id>
		<content type="html">&lt;p&gt;HTTP responses can be sped up with Node.js and Redis caching. In this post, we will see how we can do this by adding a Redis cache to an existing Node.js API that uses the Postgres database. Lets get cracking!&lt;/p&gt;
&lt;!-- more --&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/nodejs-redis/01nodejs-redis.jpg&quot; title=&quot;Redis settings on redis labs&quot; alt=&quot;Redis settings on redis labs&quot; /&gt;
&lt;h2 id=&quot;table-of-contents&quot; tabindex=&quot;-1&quot;&gt;Table of contents &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/05/nodejs-redis/#table-of-contents&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/05/nodejs-redis/#prerequisites&quot;&gt;Prerequisites&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/05/nodejs-redis/#introduction&quot;&gt;Introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/05/nodejs-redis/#add-redis-to-the-node.js-express-quotes-api&quot;&gt;Add Redis to the Node.js Express Quotes API&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/05/nodejs-redis/#adding-the-redis-wrapper&quot;&gt;Adding the Redis wrapper&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/05/nodejs-redis/#add-get-quotes-by-author-route&quot;&gt;Add get quotes by author route&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/05/nodejs-redis/#add-cache-to-get-quotes-by-author&quot;&gt;Add cache to get quotes by author&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/05/nodejs-redis/#how-fast-is-the-node.js-redis-cache&quot;&gt;How fast is the Node.js Redis cache?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/05/nodejs-redis/#some-other-things-to-consider&quot;&gt;Some other things to consider&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/05/nodejs-redis/#conclusion&quot;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;prerequisites&quot; tabindex=&quot;-1&quot;&gt;Prerequisites &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/05/nodejs-redis/#prerequisites&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Before we dive into the demo application and its code, below are some of the things better to know:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;You are aware of how Node.js and Express js works&lt;/li&gt;
&lt;li&gt;You have an understanding of how HTTP generally functions&lt;/li&gt;
&lt;li&gt;A basic understanding of how Redis works and its general commands are expected.&lt;/li&gt;
&lt;li&gt;Having an understanding of Javascript callback, promise and Async await will be really helpful.&lt;/li&gt;
&lt;li&gt;An account on Redis Lab will be required, you can get your &lt;a href=&quot;https://redislabs.com/try-free/&quot;&gt;free account&lt;/a&gt; with a 30 MB Redis.&lt;/li&gt;
&lt;li&gt;You should read the &lt;a href=&quot;https://geshan.com.np/blog/2021/01/nodejs-postgresql-tutorial/&quot;&gt;Node.js Postgres&lt;/a&gt; tutorial that explains how the quotes API is built&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Given the prerequisites are done, let’s go to what we will be building.&lt;/p&gt;
&lt;h2 id=&quot;introduction&quot; tabindex=&quot;-1&quot;&gt;Introduction &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/05/nodejs-redis/#introduction&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;We will use an existing quotes API application built with &lt;a href=&quot;https://geshan.com.np/blog/2021/01/nodejs-postgresql-tutorial/&quot;&gt;Node.js and Postgres&lt;/a&gt; database. It has a simple endpoint &lt;code&gt;/quotes&lt;/code&gt; that gets a list of quotes from the database and renders it as JSON. We will add a new endpoing and caching layer where we will cache the JSON on Redis hosted on Redis Labs. It is highly recommended you clone the &lt;a href=&quot;https://github.com/geshan/nodejs-posgresql&quot;&gt;Quotes API&lt;/a&gt; Github repository and start from the master branch to follow along.&lt;/p&gt;
&lt;p&gt;We will be using a free Redis database on &lt;a href=&quot;https://redislabs.com/&quot;&gt;RedisLabs&lt;/a&gt;, please get your $0 Redis up and running following this &lt;a href=&quot;https://docs.redislabs.com/latest/rc/rc-quickstart/&quot;&gt;guide&lt;/a&gt;. From there get the Redis host, port, and password you can use later in this tutorial. For reference, I created a database with the following configuration.&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/nodejs-redis/02redis-lab-settings.jpg&quot; title=&quot;Redis settings on redis labs&quot; alt=&quot;Redis settings on redis labs&quot; /&gt;
&lt;h2 id=&quot;add-redis-to-the-node.js-express-quotes-api&quot; tabindex=&quot;-1&quot;&gt;Add Redis to the Node.js Express Quotes API &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/05/nodejs-redis/#add-redis-to-the-node.js-express-quotes-api&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;To add Redis to the Node.js Express Quotes API, we will first add the &lt;code&gt;redis&lt;/code&gt; npm library with:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;npm&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;install&lt;/span&gt; --save redis&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In my case it installed the redis npm package version 3.1.2. Next up we will add a very slim Redis wrapper to talk to redis where the credentials will be placed in the &lt;code&gt;config.js&lt;/code&gt; file under the &lt;code&gt;redis&lt;/code&gt; attribute as follows:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt; &lt;span class=&quot;token literal-property property&quot;&gt;redis&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token literal-property property&quot;&gt;host&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; env&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;REDIS_HOST&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;redis-12753.c253.us-central1-1.gce.cloud.redislabs.com&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token literal-property property&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; env&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;REDIS_PORT&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;12753&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token literal-property property&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; env&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;REDIS_PASSWORD&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;eYVX7EwVmmxKPCDmwMtyKVge8oLd2t81&#39;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I have put my credentials as an example, please replace it with your credentials you have got from the Redis Labs free account and database you set up in the previous step.&lt;/p&gt;
&lt;h3 id=&quot;adding-the-redis-wrapper&quot; tabindex=&quot;-1&quot;&gt;Adding the Redis wrapper &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/05/nodejs-redis/#adding-the-redis-wrapper&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;We will add a new file called &lt;code&gt;cache.js&lt;/code&gt; in &lt;code&gt;/services&lt;/code&gt; folder that will fetch the saved data and save the JSON on redis with a Time To Live (TTL) of 60 seconds by default. It will have the following contents:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; redis &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;redis&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; config &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;../config&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; client &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; redis&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;createClient&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token literal-property property&quot;&gt;host&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; config&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;redis&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;host&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token literal-property property&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; config&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;redis&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;port&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token literal-property property&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; config&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;redis&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;password &lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; promisify &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;util&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; setAsyncEx &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;promisify&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;client&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;setex&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;bind&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;client&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; getAsync &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;promisify&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;client&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;get&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;bind&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;client&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;client&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;error&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token parameter&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Error &#39;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; err&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;saveWithTtl&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;key&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; value&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; ttlSeconds &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;60&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;setAsyncEx&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;key&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; ttlSeconds&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;JSON&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;stringify&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;value&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; jsonString &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;getAsync&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;key&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;jsonString&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;JSON&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;parse&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;jsonString&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;module&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;exports &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  saveWithTtl&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  get&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A quick rundown of what the above Redis wrapper is doing:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;We import the Redis NPM package and the configs&lt;/li&gt;
&lt;li&gt;Then we create a Redis client with the credentials of Redis on Redis Labs.&lt;/li&gt;
&lt;li&gt;As the Redis NPM package does not support promises out of the box we use Promisfy to wrap the promise layer on top of the callbacks.&lt;/li&gt;
&lt;li&gt;We have a saveWithTtl function that saves given data as JSON string to redis using the &lt;code&gt;setex&lt;/code&gt; Redis &lt;a href=&quot;https://redis.io/commands/setex&quot;&gt;command&lt;/a&gt; to save it for the given seconds.&lt;/li&gt;
&lt;li&gt;Similarly we define a get method that gets the value from Redis using the Get command and parses the string as JSON to be ready for the HTTP response.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Next up, we will add the Get quotes by the author at  &lt;code&gt;/quotes/author&lt;/code&gt; route.&lt;/p&gt;
&lt;h2 id=&quot;add-get-quotes-by-author-route&quot; tabindex=&quot;-1&quot;&gt;Add get quotes by author route &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/05/nodejs-redis/#add-get-quotes-by-author-route&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;We will add the &lt;code&gt;getByAuthor&lt;/code&gt; method in the &lt;code&gt;/services/quotes.js&lt;/code&gt; file for the search quote by author feature to come to life like below:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;getByAuthor&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;page &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; author&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; offset &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; helper&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getOffset&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;page&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; config&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;listPerPage&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; query &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token literal-property property&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;search-quotes&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token literal-property property&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;SELECT id, quote, author FROM quote WHERE author ILIKE $1 OFFSET $2 LIMIT $3&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token literal-property property&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;author&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; offset&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; config&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;listPerPage&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; rows &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; db&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;query&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;query&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; data &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; helper&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;emptyOrRows&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;rows&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; meta &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;page&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    data&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;    meta&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A couple of things we should take note of here are:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;We are using a parameterized query with ILIKE for a case insensitive like which means searching for &lt;code&gt;Chris&lt;/code&gt; or &lt;code&gt;chris&lt;/code&gt; or &lt;code&gt;chRIS&lt;/code&gt; would get us the same result.&lt;/li&gt;
&lt;li&gt;We have kept the pagination intact if there are more than 10 quotes for the same author.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This data will be sent to the browser by the &lt;code&gt;/quotes/author/:author&lt;/code&gt; route that we will create next.&lt;/p&gt;
&lt;p&gt;To add the search quotes by author route to the Router we will change the &lt;code&gt;/routes/quotes.js&lt;/code&gt; file to look like below:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; express &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;express&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; router &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; express&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Router&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; quotes &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;../services/quotes&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;/* GET quotes listing. */&lt;/span&gt;&lt;br /&gt;router&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;/&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;req&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; res&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; next&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    res&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; quotes&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getMultiple&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;req&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;query&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;page&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;err&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;Error while getting quotes &lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; err&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;message&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    res&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;err&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;statusCode &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;500&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token string-property property&quot;&gt;&#39;message&#39;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; err&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;message&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;/* GET quotes listing search by author. */&lt;/span&gt;&lt;br /&gt;router&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;/author/:author&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;req&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; res&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; next&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; page &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; req&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;query&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;page &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; author &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; req&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;params&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;author&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;author&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; res&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;400&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token literal-property property&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;please provide author&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;    &lt;br /&gt;    res&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; quotes&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getByAuthor&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;page&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; author&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;err&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;Error while getting quotes &lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; err&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;message&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    res&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;err&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;statusCode &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;500&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token string-property property&quot;&gt;&#39;message&#39;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; err&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;message&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;/* POST quotes */&lt;/span&gt;&lt;br /&gt;router&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;/&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;req&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; res&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; next&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    res&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; quotes&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;req&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;body&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;err&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;Error while posting quotes &lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; err&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;message&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    res&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;err&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;statusCode &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;500&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token string-property property&quot;&gt;&#39;message&#39;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; err&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;message&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;module&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;exports &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; router&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The main change we made here is, we added the search quotes by author functionality. Let’s run a quick test with &lt;a href=&quot;https://geshan.com.np/blog/2020/09/vegeta-load-testing-primer-with-examples/&quot;&gt;vegeta load testing&lt;/a&gt; on the response times with the Postgres database and no-cache from our local environment:&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/nodejs-redis/03nodejs-redis-before-cache.jpg&quot; title=&quot;Node.js API response times before Redis cache&quot; alt=&quot;Node.js API response times before Redis cache&quot; /&gt;
&lt;p&gt;As we can see, for a total of 450 requests at 15 requests per second for 30 seconds, 445 came back with 200 response code and 5 had a 500 error. The error could have been caused by a connection limit exceeded for the database. The minimum response time was 192.96 ms and the maximum was 798.452 ms. Next up we will add the Redis cache to this newly created search by author endpoint.&lt;/p&gt;
&lt;p&gt;The changes done till this point are visible in this &lt;a href=&quot;https://github.com/geshan/nodejs-posgresql/pull/19/files&quot;&gt;pull request&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;add-cache-to-get-quotes-by-author&quot; tabindex=&quot;-1&quot;&gt;Add cache to get quotes by author &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/05/nodejs-redis/#add-cache-to-get-quotes-by-author&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;To add a Redis cache for the response JSON, we will change the get &lt;code&gt;/quotes/author/:author&lt;/code&gt; in &lt;code&gt;src/routes/quotes.js&lt;/code&gt; to look like below after requiring the cache service we created in one of the previous steps:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;#on line &lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; cache &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;../services/cache&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;/* GET quotes listing search. */&lt;/span&gt;&lt;br /&gt;router&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;/author/:author&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;req&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; res&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; next&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; page &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; req&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;query&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;page &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; author &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; req&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;params&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;author&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;author&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; res&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;400&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token literal-property property&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;please provide author&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;    &lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; cacheKey &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;quotes_author_&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;author&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;page&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; cachedData &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; cache&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;cacheKey&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;cachedData&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;      console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;got cached data&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; res&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;cachedData&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    response &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; quotes&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getByAuthor&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;req&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;query&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;page&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; author&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; cache&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;saveWithTtl&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;cacheKey&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; response&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;300&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    res&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;response&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;err&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;Error while getting quotes &lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; err&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;message&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    res&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;err&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;statusCode &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;500&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token string-property property&quot;&gt;&#39;message&#39;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; err&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;message&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;ol&gt;
&lt;li&gt;We import the cache service we created in the previous step that communicates with the Redis database we have.&lt;/li&gt;
&lt;li&gt;In the get quotes by author method, we first check if the quotes with its author and page number key like &lt;code&gt;quotes_chris_1&lt;/code&gt; is in the cache, if it finds it in the cache it will respond with the cached response.&lt;/li&gt;
&lt;li&gt;If the key’s data is not in the cache it will get the quotes by an author from the quotes service which queries the database and then it will respond back after saving the response to the cache.&lt;/li&gt;
&lt;li&gt;On the consequent call it will find that data in the cache as the cache will be warm.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The first request will be a bit slow as it will have to fetch the quotes from the Postgres database. The second and subsequent requests will be faster as they will be served from the cache for the next 300 seconds. After the cache expires the first request to fill the cache will be slow but then it will be fast for the next 5 minutes. This cycle will continue.&lt;/p&gt;
&lt;p&gt;The changes for adding cache to the get quotes by author route is accessible in this &lt;a href=&quot;https://github.com/geshan/nodejs-posgresql/compare/search-with-cache?expand=1#diff-7f566e4529db12c9dd599189e409b786f5f5a356aaa73c5c8ade9071d7f9b601R30&quot;&gt;diff&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;how-fast-is-the-node.js-redis-cache%3F&quot; tabindex=&quot;-1&quot;&gt;How fast is the Node.js Redis cache? &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/05/nodejs-redis/#how-fast-is-the-node.js-redis-cache%3F&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;After we add the cache if we hit the service locally again with 15 requests per second for 30 seconds it gave me the following result:&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/nodejs-redis/04nodejs-redis-after-cache.jpg&quot; title=&quot;Node.js API response times consistent and faster Redis cache&quot; alt=&quot;Node.js API response times consistent and faster after Redis cache&quot; /&gt;
&lt;p&gt;This time the minimum time to respond was 192.445 ms and the maximum response time is 212.652 ms. There were no errors and all the requests came back with a 200.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The maximum response time for the API was almost 4 times faster with Reds cache at 212.652 ms compared to 798.452 ms using the Postgres database.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;some-other-things-to-consider&quot; tabindex=&quot;-1&quot;&gt;Some other things to consider &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/05/nodejs-redis/#some-other-things-to-consider&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Even though the cached version doesn’t look super fast there are some things we should take into account, those are:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;This is a very simple example with just one table, real-life search and get resources of a REST API are much more complex involving more than one table, joins, and complicated SQL queries. In this case, the cache will be significantly faster.&lt;/li&gt;
&lt;li&gt;Both Postgres and Redis are hosted remotely, not on the same machine as where the tests were run. Postgres is on ElephantSQL and Redis is on RedisLabs. This will add up the network latency to fetch data from both.&lt;/li&gt;
&lt;li&gt;Postgres and Redis both are on the free plan. The resources are limited and shared so this gives us a basic idea of how the cache will help in performance.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;As mentioned previously in the &lt;a href=&quot;https://geshan.com.np/blog/2021/02/javascript-memoization/&quot;&gt;Javascript memoization&lt;/a&gt; post, the &lt;code&gt;Cache-Control&lt;/code&gt; HTTP &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control&quot;&gt;header&lt;/a&gt; would be one of the easiest and language/framework agnostic way to cache the response at the HTTP level. This example is used to show a practical way to use Redis with Node.js.&lt;/p&gt;
&lt;h2 id=&quot;conclusion&quot; tabindex=&quot;-1&quot;&gt;Conclusion &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/05/nodejs-redis/#conclusion&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;We have seen that a Redis cache used on a Node.js application can make the HTTP responses much more consistent in terms of speed. Not only does it make the responses faster, but it also decreases the error rates. Similarly, it will also use lesser resources as the processing is done once, then the processed output is stored on Redis.&lt;/p&gt;
&lt;p&gt;I hope this acts as a good beginning resource for using Redis with Nodejs.&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>Node.js Express tutorial to build a 1 page website step-by-step</title>
		<link href="https://geshan.com.np/blog/2021/05/nodejs-express-tutorial/"/>
		<updated>2021-05-19T12:42:35Z</updated>
		<id>https://geshan.com.np/blog/2021/05/nodejs-express-tutorial/</id>
		<content type="html">&lt;p&gt;Express Js is one of the most popular Node.js frameworks. In this Node.js Express tutorial, we will build a mock landing page that can collect the email addresses of people interested to be notified of the launch of our imaginary podcast about headphones. Let’s get started.&lt;/p&gt;
&lt;!-- more --&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/nodejs-express-tutorial/01nodejs-express-tutorial.jpg&quot; title=&quot;Node.js express tutoral to build a simple 1 page website&quot; alt=&quot;Node.js express tutoral to build a simple 1 page website&quot; /&gt;
&lt;h2 id=&quot;table-of-contents&quot; tabindex=&quot;-1&quot;&gt;Table of contents &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/05/nodejs-express-tutorial/#table-of-contents&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/05/nodejs-express-tutorial/#what-we-are-building&quot;&gt;What we are building&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/05/nodejs-express-tutorial/#prerequisites&quot;&gt;Prerequisites&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/05/nodejs-express-tutorial/#setup-project&quot;&gt;Setup project&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/05/nodejs-express-tutorial/#install-express-and-pug&quot;&gt;Install express and pug&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/05/nodejs-express-tutorial/#add-the-views&quot;&gt;Add the views&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/05/nodejs-express-tutorial/#add-the-server-and-routes&quot;&gt;Add the server and routes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/05/nodejs-express-tutorial/#testing&quot;&gt;Testing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/05/nodejs-express-tutorial/#next-steps&quot;&gt;Next steps&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/05/nodejs-express-tutorial/#tldr-need-a-quick-run&quot;&gt;TLDR; need a quick run&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/05/nodejs-express-tutorial/#conclusion&quot;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;what-we-are-building&quot; tabindex=&quot;-1&quot;&gt;What we are building &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/05/nodejs-express-tutorial/#what-we-are-building&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;For this guide, we are building a simple one-pager landing page for an imaginary podcast about headphones. The website is called “Eventually podcast”. It is going to look something like below:&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/nodejs-express-tutorial/02eventually-podcast.jpg&quot; title=&quot;We are building an imaginary podcast wait list with Node.js and Express&quot; alt=&quot;We are building an imaginary podcast wait list with Node.js and Express&quot; /&gt;
&lt;p&gt;We will be converting a very useful and popular responsive HTML template called &lt;a href=&quot;https://html5up.net/eventually&quot;&gt;Eventually&lt;/a&gt; by &lt;a href=&quot;https://html5up.net/&quot;&gt;HTML5UP&lt;/a&gt;. Thanks to the amazing creator &lt;a href=&quot;https://twitter.com/ajlkn&quot;&gt;AJ&lt;/a&gt; for providing such outstanding templates for free.&lt;/p&gt;
&lt;p&gt;We will download the responsive theme which will have HTML, JS, and CSS files and we will transform the HTML file into a rudimentary template for this Node.js Express tutorial using &lt;a href=&quot;https://pugjs.org/api/getting-started.html&quot;&gt;Pug&lt;/a&gt; as the templating engine. To keep the scope of this step-by-step tutorial small, we will not deal with handling the form submission part.&lt;/p&gt;
&lt;h2 id=&quot;prerequisites&quot; tabindex=&quot;-1&quot;&gt;Prerequisites &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/05/nodejs-express-tutorial/#prerequisites&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Before we begin diving into the code, below are some nice to have prerequisites:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;You are generally aware of how Node.js and JavaScript works.&lt;/li&gt;
&lt;li&gt;Familiarity with NPM and installing NPM modules, so having npm and Node.js running locally is expected.&lt;/li&gt;
&lt;li&gt;Working with Git is a known concept for you. It will be useful if you want to clone and test out the project.&lt;/li&gt;
&lt;li&gt;Knowledge of basic HTML will also be greatly helpful&lt;/li&gt;
&lt;li&gt;A general understanding of how Pug templating works will be necessary&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Time to get our hands dirty with the code.&lt;/p&gt;
&lt;h2 id=&quot;setup-project&quot; tabindex=&quot;-1&quot;&gt;Setup project &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/05/nodejs-express-tutorial/#setup-project&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;To begin, we will create an empty directory named &lt;code&gt;eventually-podcast&lt;/code&gt; and setup NPM in it running the following commands:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;mkdir&lt;/span&gt; eventually-podcast&lt;br /&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;cd&lt;/span&gt; eventually-podcast&lt;br /&gt;&lt;span class=&quot;token function&quot;&gt;npm&lt;/span&gt; init -y&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After running &lt;code&gt;npm init -y&lt;/code&gt; it should look like below:&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/nodejs-express-tutorial/03npm-init-y.jpg&quot; title=&quot;Result of npm init -y for Node.js express tutorial&quot; alt=&quot;Result of npm init -y for Node.js express tutorial&quot; /&gt;
&lt;p&gt;Great! We have our package.json in the folder. Next up we will install express js and pug.&lt;/p&gt;
&lt;h2 id=&quot;install-express-and-pug&quot; tabindex=&quot;-1&quot;&gt;Install express and pug &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/05/nodejs-express-tutorial/#install-express-and-pug&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;We will need &lt;a href=&quot;https://expressjs.com/&quot;&gt;Express&lt;/a&gt; as our web application framework on top of Node.js and we will use Pug. To install both Express and pug we will run the command as below:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;npm&lt;/span&gt; i --save express pug&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This will add express and pug as dependencies in our &lt;code&gt;package.json&lt;/code&gt; file.&lt;/p&gt;
&lt;h2 id=&quot;add-the-views&quot; tabindex=&quot;-1&quot;&gt;Add the views &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/05/nodejs-express-tutorial/#add-the-views&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;At this point, we will &lt;a href=&quot;https://html5up.net/eventually/download&quot;&gt;download&lt;/a&gt; the Eventually template from HTML5UP. Then we can extract the zip file. It will have a folder structure and files like below:&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/nodejs-express-tutorial/04assets-structure.jpg&quot; title=&quot;Folder and file structure for the assets in the downloaded Eventually template&quot; alt=&quot;Folder and file structure for the assets in the downloaded Eventually template&quot; /&gt;
&lt;p&gt;We will add 2 folders on the root level of our Express js project &lt;code&gt;views&lt;/code&gt; and &lt;code&gt;public&lt;/code&gt; with:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;mkdir&lt;/span&gt; views&lt;br /&gt;&lt;span class=&quot;token function&quot;&gt;mkdir&lt;/span&gt; public&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We will copy the &lt;code&gt;assets&lt;/code&gt; and &lt;code&gt;images&lt;/code&gt; folder from the &lt;code&gt;html5up-eventually&lt;/code&gt; folder we got after unzipping the theme zip file and copy it into &lt;code&gt;PROJECT_ROOT/public&lt;/code&gt; folder. For my example, I am using headphone images from Pixabay and Unsplash. You can either use what you like or just go with the default provided images.&lt;/p&gt;
&lt;p&gt;If you want you can also add a &lt;code&gt;favicon.ico&lt;/code&gt; file using a &lt;a href=&quot;https://realfavicongenerator.net/&quot;&gt;generator&lt;/a&gt;, I leave it up to you to add or not add a favicon.&lt;/p&gt;
&lt;p&gt;After that, you can delete the &lt;code&gt;saas&lt;/code&gt; folder inside the &lt;code&gt;assets&lt;/code&gt; folder with:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;rm&lt;/span&gt; -rf public/assets/sass&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We will not be changing any of the CSS so we can safely delete the saas folder for the scope of this tutorial. Consequently, we will add 2 pug empty pug files in the &lt;code&gt;views&lt;/code&gt; folder executing the following command:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;touch&lt;/span&gt; views/layout.pug&lt;br /&gt;&lt;span class=&quot;token function&quot;&gt;touch&lt;/span&gt; views/index.pug&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;At this juncture your folder and file structure for the project will look similar to the following:&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/nodejs-express-tutorial/05project-structure.jpg&quot; title=&quot;Folder and file structure of the project with public and views&quot; alt=&quot;Folder and file structure of the project with public and views&quot; /&gt;
&lt;p&gt;Of course, there will be &lt;code&gt;package.json&lt;/code&gt; and &lt;code&gt;package-lock.json&lt;/code&gt; as we have already installed Express and Pug in an earlier step. Subsequently, we will fill up the two Pug view files. I used &lt;a href=&quot;https://html-to-pug.com/&quot;&gt;HTML to Pug&lt;/a&gt; online tool to convert the HTML from the template to be Pug. Our &lt;code&gt;layout.pug&lt;/code&gt; file should look like below:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;doctype html
//
  Eventually by HTML5 UP
  html5up.net | @ajlkn
  Free for personal and commercial use under the CCA 3.0 license (html5up.net/license)
head
  title Eventually Podcast | #{title} 
  meta(charset=&#39;utf-8&#39;)
  meta(name=&#39;viewport&#39; content=&#39;width=device-width, initial-scale=1, user-scalable=no&#39;)
  link(rel=&#39;stylesheet&#39; href=&#39;/assets/css/main.css&#39;)
body.is-preload
  block body-content
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The two main things to notice here are, first,  the body is a block content that can be extended and changed as per need. And the second thing is on line 7, &lt;code&gt;#{title}&lt;/code&gt; will be filled up dynamically. Next up, our &lt;code&gt;index.pug&lt;/code&gt; file will have the following contents:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;extends layout

block body-content
  // Header
  header#header
    h1 #{mainText} 
    p
      | !{subText}
  // Signup Form
  form#signup-form(method=&#39;post&#39; action=&#39;#&#39;)
    input#email(type=&#39;email&#39; name=&#39;email&#39; placeholder=&#39;Email Address&#39;)
    input(type=&#39;submit&#39; value=&#39;Sign Up&#39;)
  // Footer
  footer#footer
    ul.icons
      li
        a.icon.brands.fa-twitter(href=&#39;#&#39;)
          span.label Twitter
      li
        a.icon.brands.fa-instagram(href=&#39;#&#39;)
          span.label Instagram
      li
        a.icon.brands.fa-github(href=&#39;#&#39;)
          span.label GitHub
      li
        a.icon.fa-envelope(href=&#39;#&#39;)
          span.label Email
    ul.copyright
      li &amp;amp;copy; Untitled.
      li
        | Credits: 
        a(href=&#39;http://html5up.net&#39;) HTML5 UP
  // Scripts
  script(src=&#39;/assets/js/main.js&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As &lt;code&gt;index.pug&lt;/code&gt; extends the layout this template will only fill up the body part. Even here there are two variables used &lt;code&gt;#{mainText}&lt;/code&gt; and &lt;code&gt;!{subText}&lt;/code&gt;. The &lt;code&gt;!&lt;/code&gt; in subtext denotes that it is &lt;a href=&quot;https://pugjs.org/language/interpolation.html#string-interpolation-unescaped&quot;&gt;unescaped&lt;/a&gt; but we know this string can be trusted as we are passing it ourselves from the server as we will see it in the next part. Generally, it is not advisable to use this as it can lead to unwanted code injection. In the next section, we will set up the server and the root route to render our templates.&lt;/p&gt;
&lt;h2 id=&quot;add-the-server-and-routes&quot; tabindex=&quot;-1&quot;&gt;Add the server and routes &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/05/nodejs-express-tutorial/#add-the-server-and-routes&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;At this point, we have already put the Pug templates in place converting the HTML template into Pug syntax. Now, we will add the server and root route to glue it all together with our &lt;code&gt;index.js&lt;/code&gt; file. The content of our &lt;code&gt;/index.js&lt;/code&gt; file is as follows:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; express &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;express&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; path &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;path&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; app &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;express&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; port &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; process&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;env&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token constant&quot;&gt;PORT&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;3000&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;app&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;views&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; path&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;__dirname&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;views&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;app&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;view engine&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;pug&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;app&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;use&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;express&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;static&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;path&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;__dirname&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;public&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;app&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;/&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;req&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; res&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  res&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token string&quot;&gt;&#39;index&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;br /&gt;      &lt;span class=&quot;token literal-property property&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Coming Soon!&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;br /&gt;      &lt;span class=&quot;token literal-property property&quot;&gt;mainText&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Eventually Podcast&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;br /&gt;      &lt;span class=&quot;token literal-property property&quot;&gt;subText&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;Drop your email address below and we will let you know when we launch the Eventually podcast. &lt;br /&gt;      &amp;lt;br&gt;Brought to you by amazing people&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;app&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;listen&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;port&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;Listening to requests on http://localhost:&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;port&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let’s evaluate what is happening in the above index.js file:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Till line 5 we are instantiating a new express application which is our web server as well as the web application framework.&lt;/li&gt;
&lt;li&gt;On lines 7-8 we are telling express that we will use &lt;code&gt;pug&lt;/code&gt; as our views engine and views will be available in the &lt;code&gt;views&lt;/code&gt; folder&lt;/li&gt;
&lt;li&gt;On line 9 we are routing all the static files in the &lt;code&gt;public&lt;/code&gt; folder to be available from the webserver as static files, for instance &lt;code&gt;BASE_URL/assets/css/main.css&lt;/code&gt; will render our main CSS file.&lt;/li&gt;
&lt;li&gt;At lines 11-21, we define our &lt;code&gt;/&lt;/code&gt; route which is a GET route. It renders the &lt;code&gt;index&lt;/code&gt; view passing needed variables like title, mainText, and subText.&lt;/li&gt;
&lt;li&gt;Finally at line 23 we start the express server and it is listening to the port which will be 3000 if not passed as an environment variable called &lt;code&gt;PORT&lt;/code&gt;. If the environment variable is set that will take priority.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;testing&quot; tabindex=&quot;-1&quot;&gt;Testing &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/05/nodejs-express-tutorial/#testing&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;To test the app, we can run &lt;code&gt;node index.js&lt;/code&gt;, to make things easier we can add a npm start script that looks like below in the scripts section of the &lt;code&gt;package.json&lt;/code&gt; file:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token string-property property&quot;&gt;&quot;start&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;node index.js&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now we can run the app with either &lt;code&gt;node index.js&lt;/code&gt; or &lt;code&gt;npm start&lt;/code&gt;, which would yield and output as follows:&lt;/p&gt;
&lt;img class=&quot;center&quot; src=&quot;https://geshan.com.np/images/nodejs-express-tutorial/06npm-start.jpg&quot; loading=&quot;lazy&quot; title=&quot;Output of NPM start, express server listening at port 3000&quot; alt=&quot;Output of NPM start, express server listening at port 3000&quot; /&gt;
&lt;p&gt;After that, we can check how the app looks at &lt;code&gt;http://localhost:3000&lt;/code&gt; on the browser of your choice. It should look something like below:&lt;/p&gt;
&lt;img class=&quot;center&quot; src=&quot;https://geshan.com.np/images/nodejs-express-tutorial/07express-pug-running.jpg&quot; loading=&quot;lazy&quot; title=&quot;Output of the basic application running with Node.js Express and Pug&quot; alt=&quot;Output of the basic application running with Node.js Express and Pug&quot; /&gt;
&lt;p&gt;To make local testing easier we can surely add other helpful NPM packages like &lt;a href=&quot;https://geshan.com.np/blog/2021/02/nodemon/&quot;&gt;nodemon&lt;/a&gt; and &lt;a href=&quot;https://browsersync.io/&quot;&gt;browser sync&lt;/a&gt;. Those are good to have enhancements.&lt;/p&gt;
&lt;h2 id=&quot;next-steps&quot; tabindex=&quot;-1&quot;&gt;Next steps &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/05/nodejs-express-tutorial/#next-steps&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This is just scratching the surface. If you want to change how the form submission behavior works you can look into the &lt;a href=&quot;https://github.com/geshan/nodejs-express-tutorial/blob/master/public/assets/js/main.js#L141&quot;&gt;form submission&lt;/a&gt; part in the main.js file and change it to call an internal API or external route. All the code is available as an &lt;a href=&quot;https://github.com/geshan/nodejs-express-tutorial&quot;&gt;open source&lt;/a&gt; repository on Github for your convenience.&lt;/p&gt;
&lt;p&gt;The application has a &lt;a href=&quot;https://github.com/geshan/nodejs-express-tutorial/blob/master/Dockerfile&quot;&gt;docker file&lt;/a&gt; if you want to quickly run it locally or deploy it to something like &lt;a href=&quot;https://geshan.com.np/blog/2019/11/why-use-google-cloud-run-5-compelling-reasons/&quot;&gt;Google Cloud Run&lt;/a&gt;. You can dig more about &lt;a href=&quot;https://geshan.com.np/blog/2020/11/nodejs-with-docker/&quot;&gt;Node.js and Docker&lt;/a&gt; if you want. I have also deployed the application on Qovery for quickly testing how it looks, if you want to deploy it yourself you can choose from any of the 3 &lt;a href=&quot;https://geshan.com.np/blog/2021/01/free-nodejs-hosting/&quot;&gt;free nodejs hosting&lt;/a&gt; services.&lt;/p&gt;
&lt;h2 id=&quot;tldr%3B-need-a-quick-run&quot; tabindex=&quot;-1&quot;&gt;TLDR; need a quick run &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/05/nodejs-express-tutorial/#tldr%3B-need-a-quick-run&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;To run this app quickly, you can follow these steps given you have Node.js running locally:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Git clone &lt;a href=&quot;mailto:git@github.com&quot;&gt;git@github.com&lt;/a&gt;:geshan/nodejs-express-tutorial.git&lt;/li&gt;
&lt;li&gt;cd &lt;code&gt;nodejs-express-tutorial&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;npm install&lt;/li&gt;
&lt;li&gt;npm start&lt;/li&gt;
&lt;li&gt;Navigate to &lt;code&gt;http://localhost:3000&lt;/code&gt; on your browser to see the output as follows.&lt;/li&gt;
&lt;/ol&gt;
&lt;img class=&quot;center&quot; src=&quot;https://geshan.com.np/images/nodejs-express-tutorial/07express-pug-running.jpg&quot; loading=&quot;lazy&quot; title=&quot;Output of the basic application running with Node.js Express and Pug&quot; alt=&quot;Output of the basic application running with Node.js Express and Pug&quot; /&gt;
&lt;h2 id=&quot;conclusion&quot; tabindex=&quot;-1&quot;&gt;Conclusion &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/05/nodejs-express-tutorial/#conclusion&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;We just had a look at a simple but useful single-page website using Node.js Express and Pug to create it. I hope this step-by-step tutorial acts as a good starting point for you to build something interesting using Node.js and Express. Keep building!&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>3 Software Engineer podcasts you should not miss - Part 6</title>
		<link href="https://geshan.com.np/blog/2021/04/sofware-engineer-podcasts/"/>
		<updated>2021-04-14T12:42:35Z</updated>
		<id>https://geshan.com.np/blog/2021/04/sofware-engineer-podcasts/</id>
		<content type="html">&lt;p&gt;If you are looking to level up without reading, software engineer podcasts can be an untapped avenue you should exploit now. I have been listening to podcasts geared towards software engineers for a long time now.&lt;/p&gt;
&lt;p&gt;Due to no commute in the past 12 months, I found new times and ways to listen to podcasts. Continuing the yearly posts about podcasts, in this post, I am going to recommend 3 software engineer podcasts you should subscribe to instantly.&lt;/p&gt;
&lt;!-- more --&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/software-engineer-podcasts/01software-engineer-podcasts.jpg&quot; title=&quot;Software Engineer podcasts you should not miss&quot; alt=&quot;Software Engineer podcasts you should not miss&quot; /&gt;
&lt;h2 id=&quot;table-of-contents&quot; tabindex=&quot;-1&quot;&gt;Table of contents &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/04/sofware-engineer-podcasts/#table-of-contents&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/04/sofware-engineer-podcasts/#staff-eng-podcast&quot;&gt;Staff Eng Podcast&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/04/sofware-engineer-podcasts/#devdiscuss&quot;&gt;DevDiscuss&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/04/sofware-engineer-podcasts/#in-depth-podcast&quot;&gt;In Depth Podcast&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/04/sofware-engineer-podcasts/#conclusion&quot;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;staff-eng-podcast&quot; tabindex=&quot;-1&quot;&gt;&lt;a href=&quot;https://podcast.staffeng.com/&quot;&gt;Staff Eng Podcast&lt;/a&gt; &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/04/sofware-engineer-podcasts/#staff-eng-podcast&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Staff Eng has &lt;a href=&quot;https://staffeng.com/stories&quot;&gt;stories&lt;/a&gt; and guides for Staff plus engineers. The stories include engineers from companies like Dropbox, Stripe, Slack, and MailChimp to name a few. The &lt;a href=&quot;https://staffeng.com/book&quot;&gt;Staff Engineer book&lt;/a&gt; by &lt;a href=&quot;https://lethain.com/&quot;&gt;Will Larson&lt;/a&gt; is the main offering there but, recently they have started a podcast. Obviously, it is titled the &lt;a href=&quot;https://podcast.staffeng.com/&quot;&gt;StaffEng podcast&lt;/a&gt; hosted by David and Alex who are Staff plus engineers themselves.&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/software-engineer-podcasts/02staff-eng-podcast.jpg&quot; title=&quot;Staff Eng podcast features inteview with staff plus engineers&quot; alt=&quot;Staff Eng podcast features inteview with staff plus engineers&quot; /&gt;
&lt;p&gt;The podcast started at the end of Mar-2021 and currently has 2 episodes. I have listened to both of them and they are amazing. I really liked the Episode where &lt;a href=&quot;https://podcast.staffeng.com/1687069/8172674-sarah-dayan-algolia&quot;&gt;Sarah Dylan from Algolia&lt;/a&gt; is interviewed.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The balance of things and how Staff engineers impact the whole organization is very well explained. She also talks about her career ladder and how leveling up was not easy.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The relationship between a staff-level engineer and an engineering manager is explained in a great way. You should listen to both episodes, I am waiting for the next episode to be released.&lt;/p&gt;
&lt;h2 id=&quot;devdiscuss&quot; tabindex=&quot;-1&quot;&gt;&lt;a href=&quot;https://dev.to/devdiscuss&quot;&gt;DevDiscuss&lt;/a&gt; &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/04/sofware-engineer-podcasts/#devdiscuss&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;http://dev.to/&quot;&gt;Dev.to&lt;/a&gt; is a very popular developer resource. As a company, it has products like &lt;a href=&quot;https://www.forem.com/&quot;&gt;Forem&lt;/a&gt; and recently acquired &lt;a href=&quot;https://dev.to/devteam/special-announcement-from-dev-4oi&quot;&gt;CodeNewBie&lt;/a&gt;. They also have a podcast named &lt;a href=&quot;https://dev.to/devdiscuss&quot;&gt;DevDiscuss&lt;/a&gt;. From the archive, it looks like the podcast started in early July 2020, but they already have 4 seasons and 30+ episodes. They cover technical topics like &lt;a href=&quot;https://dev.to/devdiscuss/s4-e3-code-splitting-and-the-long-list-of-things-you-need-to-know-about-writing-javascript&quot;&gt;things to know about JavaScript&lt;/a&gt; to non-technical stuff like &lt;a href=&quot;https://dev.to/devdiscuss/s3-e5-improving-your-onboarding-for-early-career-devs&quot;&gt;improving onboarding for early-career devs&lt;/a&gt;.&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/software-engineer-podcasts/03dev-discuss-podcast.jpg&quot; title=&quot;Dev Discuss podcasts includes both technical and non-technical content&quot; alt=&quot;Dev Discuss podcasts includes both technical and non-technical content&quot; /&gt;
&lt;p&gt;One episode that stands out for me is the &lt;a href=&quot;https://dev.to/devdiscuss/s4-e1-this-is-how-you-have-effective-meetings&quot;&gt;how to have effective meetings&lt;/a&gt; one.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;In this awesome episode Andy talks about his elaborate experience of meeting and how we can make meetings effective. The meeting agenda template including “WW, DW, BW” - Who will do what by when is simply superb.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The agreement tips provided by him are also amazing. Here is a written &lt;a href=&quot;https://dev.to/mauro_codes/5-tips-for-effective-meetings-40dd&quot;&gt;summary&lt;/a&gt; of that podcast if you would like to read it.&lt;/p&gt;
&lt;h2 id=&quot;in-depth-podcast&quot; tabindex=&quot;-1&quot;&gt;&lt;a href=&quot;https://review.firstround.com/podcast&quot;&gt;In Depth Podcast&lt;/a&gt; &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/04/sofware-engineer-podcasts/#in-depth-podcast&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;First Round is a seed-stage venture firm focused on building a vibrant community of technology entrepreneurs and companies. They have a blog called &lt;a href=&quot;https://review.firstround.com/&quot;&gt;First Round Review&lt;/a&gt; with surely above-average content. For instance, the post about &lt;a href=&quot;https://review.firstround.com/how-to-spot-and-magnify-the-powers-of-your-engineering-superheroes&quot;&gt;how to spot and magnify powers of engineering superheroes&lt;/a&gt; is extraordinary. The way the blog post goes into the types of software engineers like Aquaman, Spielberg, etc is really commendable.&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/software-engineer-podcasts/04in-depth-podcast.jpg&quot; title=&quot;In Depth Podcast by First Round has stellar team building suggestions very useful for software engineers&quot; alt=&quot;In Depth Podcast by First Round has stellar team building suggestions very useful for software engineers&quot; /&gt;
&lt;p&gt;First Round also has a podcast called &lt;a href=&quot;https://review.firstround.com/podcast&quot;&gt;In Depth&lt;/a&gt;. Its tagline is: “Going deeper on the advice startup leaders need to grow their teams, their companies and themselves.”, they surely live up to the expectations. An episode that stands out for me is the one on &lt;a href=&quot;https://open.spotify.com/episode/2gyQoS33TuRDAQL3PziNK8&quot;&gt;employee engagement&lt;/a&gt; with Russ Laraway. The advice he gives about how to keep employees engaged is incredible.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The way he emphasizes the skills of the manager and how to measure it is great. The stress he puts on clarity, career, direction, and coaching is praiseworthy.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;There are surely other exceptional episodes in the In Depth podcast.&lt;/p&gt;
&lt;h2 id=&quot;conclusion&quot; tabindex=&quot;-1&quot;&gt;Conclusion &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/04/sofware-engineer-podcasts/#conclusion&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;As usual, I have listed 3 high-quality podcasts in terms of content, production, and the way guests are interviewed by the hosts. Similar to the previous blog posts about software engineer podcasts I have selected two technical podcasts and one non-technical but very useful podcast. I hope you liked it.&lt;/p&gt;
&lt;p&gt;You can go through previous &lt;a href=&quot;https://geshan.com.np/blog/2020/09/software-engineering-podcasts-you-must-subscribe-to/&quot;&gt;software engineering podcast&lt;/a&gt; recommendations &lt;a href=&quot;https://geshan.com.np/blog/2019/07/podcasts-every-software-engineer-slash-developer-should-subscribe-to-part-4/&quot;&gt;too&lt;/a&gt;. Enjoy listening to these amazing podcasts!&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>How Software Deployment tools have changed in the past 20 years</title>
		<link href="https://geshan.com.np/blog/2021/04/sofware-deployment-tools/"/>
		<updated>2021-04-01T10:45:37Z</updated>
		<id>https://geshan.com.np/blog/2021/04/sofware-deployment-tools/</id>
		<content type="html">&lt;p&gt;I have used a variety of software deployment tools in the last 20 years. From FTP to deploying Docker containers on Kubernetes using a chatbot, I think I have seen the most of it. In this post, I will take you on a journey of web software deployment tools from 2001 to 2021, let’s get started!&lt;/p&gt;
&lt;!-- more --&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/software-deployment-tools/01software-deployment-tools.jpg&quot; title=&quot;Software deployment can sometimes be similar to deploying the army&quot; alt=&quot;Software deployment can sometimes be similar to deploying the army&quot; /&gt;
&lt;h2 id=&quot;table-of-contents&quot; tabindex=&quot;-1&quot;&gt;Table of contents &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/04/sofware-deployment-tools/#table-of-contents&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/04/sofware-deployment-tools/#what-are-software-deployment-tools&quot;&gt;What are software deployment tools?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/04/sofware-deployment-tools/#when-did-my-web-journey-start&quot;&gt;When did my web journey start?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/04/sofware-deployment-tools/#first-software-deployment-tools---web-interface-and-ftp-in-2000---2008&quot;&gt;First software deployment tools - web interface and FTP in 2000 - 2008&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/04/sofware-deployment-tools/#ssh-git-pull-as-software-deployment-tools-2008-2011&quot;&gt;SSH, Git pull as software deployment tools 2008-2011&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/04/sofware-deployment-tools/#hello-capistrano-circa-2012-2015&quot;&gt;Hello Capistrano circa 2012-2015&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/04/sofware-deployment-tools/#docker-is-the-way-to-go---2016&quot;&gt;Docker is the way to go - 2016&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/04/sofware-deployment-tools/#kubernetes-it-is-2016-2021&quot;&gt;Kubernetes it is 2016-2021&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/04/sofware-deployment-tools/#quick-recap&quot;&gt;Quick recap&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/04/sofware-deployment-tools/#how-to-choose-your-software-deployment-tool&quot;&gt;How to choose your software deployment tool?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/04/sofware-deployment-tools/#conclusion&quot;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;what-are-software-deployment-tools%3F&quot; tabindex=&quot;-1&quot;&gt;What are software deployment tools? &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/04/sofware-deployment-tools/#what-are-software-deployment-tools%3F&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Software deployment tools have also been popularized as deployment automation tools in the last 8-10 years.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Basically, any software that helps you get the first version of your software or the subsequent changes available to the software’s users is a software deployment tool.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;For this piece, I will be focused on deployment software that can deploy any form of web software be it website and/or web apps. I will not discuss how desktop software or an operating system like &lt;a href=&quot;https://en.wikipedia.org/wiki/Windows_98&quot;&gt;Windows 98&lt;/a&gt; used to be available on a CD.&lt;/p&gt;
&lt;p&gt;Let me try to explain what software deployment tools and what the triggering layers can be. Software deployment tools are the tools that are used to deploy a piece of software (mainly web software). For instance, Capistrano, Fabric, Docker run, Kubectl apply, and the likes. The triggering layers where these tools run are software like Jenkins, Bamboo, Github actions. Let’s get that thing straight. I would like to make the distinction clear visually below:&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/software-deployment-tools/02software-deployment-tools.jpg&quot; title=&quot;Software deployment tools and triggering tools are different&quot; alt=&quot;Software deployment tools and triggering tools are different&quot; /&gt;
&lt;p&gt;As you can see, we will be discussing the yellow part not the green part of the above diagram. So how did it all begin for me to deploy a website to a free web host, it was not “the cloud” in the early 2000s. I consider &lt;a href=&quot;https://geshan.com.np/blog/2015/10/4-pillars-of-a-solid-software-application-and-tools-to-support-it/#automated-deployment&quot;&gt;automated deployment&lt;/a&gt; a pillar of solid software development.&lt;/p&gt;
&lt;p&gt;Also, I will not be mentioning infrastructure provisioning and infrastructure as code tools like Ansible, Puppet, Salt and Terraform. They belong to another class of tools that are not used for web software deployment automation.&lt;/p&gt;
&lt;h2 id=&quot;when-did-my-web-journey-start%3F&quot; tabindex=&quot;-1&quot;&gt;When did my web journey start? &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/04/sofware-deployment-tools/#when-did-my-web-journey-start%3F&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Back in 1999-2000 when people didn’t have an email address, I had websites running on free website hosts. It was the era of &lt;a href=&quot;https://en.wikipedia.org/wiki/Dial-up_Internet_access&quot;&gt;dial up internet&lt;/a&gt; back then.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;It was the time of the 33.6k and 56k &lt;a href=&quot;https://en.wikipedia.org/wiki/Modem&quot;&gt;modems&lt;/a&gt; that made &lt;a href=&quot;https://www.youtube.com/watch?v=gsNaR6FRuO0&quot;&gt;this&lt;/a&gt; sound to connect to the internet using the phone line. Young people with 5G on mobile these days will never know the value of the internet we had then.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I looked into &lt;a href=&quot;http://archive.org/&quot;&gt;Archive.org&lt;/a&gt; and found a website I had deployed circa 2000. Of course, I am not going to embarrass myself sharing the website but I can tell you it had &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/marquee&quot;&gt;marquee tag&lt;/a&gt;, gifs, a couple of &lt;a href=&quot;https://en.wikipedia.org/wiki/Java_applet&quot;&gt;Java Applets&lt;/a&gt;, and page counters. Below is a screenshot of &lt;a href=&quot;http://archive.org/&quot;&gt;archive.org&lt;/a&gt; for the above-mentioned anonymous website.&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/software-deployment-tools/03archive.jpg&quot; title=&quot;Old website deployed with FTP since 2001&quot; alt=&quot;Old website deployed with FTP since 2001&quot; /&gt;
&lt;p&gt;Of course it was a &lt;a href=&quot;https://geshan.com.np/blog/2020/04/static-vs-dynamic-websites-jam-stack/#static-website&quot;&gt;static site&lt;/a&gt; with some HTML, JavaScript and CSS. And it was deployed either from a web interface or the reliable File Transfer Protocol (FTP) client.&lt;/p&gt;
&lt;h2 id=&quot;first-software-deployment-tools---web-interface-and-ftp-in-2000---2008&quot; tabindex=&quot;-1&quot;&gt;First software deployment tools - web interface and FTP in 2000 - 2008 &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/04/sofware-deployment-tools/#first-software-deployment-tools---web-interface-and-ftp-in-2000---2008&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;My first encounter with a deployment tool was a web interface called file manager. I had a bunch of HTML files with not-so-good CSS and Javascript that worked on our &lt;a href=&quot;https://en.wikipedia.org/wiki/Pentium#Pentium&quot;&gt;Pentium&lt;/a&gt; or II Desktop at that time. Our desktop because that machine was more like a family machine and I was one of its users.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Anyway, like a script kiddie 21 years back I had built this amazing (back then) website and wanted to put it online.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;My best bet on a 33.6 kbps connection was to upload it with a web interface called &lt;code&gt;File Manager&lt;/code&gt;.  The file manager in those days looked like below:&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/software-deployment-tools/04file-manager.jpg&quot; title=&quot;File manager to upload files from early 2000s&quot; alt=&quot;File manager to upload files from early 2000s&quot; /&gt;
&lt;p&gt;Notice “Internet Explorer” which was the only popular browser back then. After using the file manager for some months I stumbled upon File Transfer Protocol (FTP) software.&lt;/p&gt;
&lt;p&gt;FTP used to be an advanced thing back then.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I have used Core FTP, Cute FTP, and FileZilla FTP clients between 2000 and 2008. If you ask me if FTP is automated deployment, my answer would be a “No”.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;As usual, I would play safe and copy almost the whole website again when I had to deploy changes.&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/software-deployment-tools/05filezilla-ftp.jpg&quot; title=&quot;Filezilla FTP client was popular in mid 2000s&quot; alt=&quot;Filezilla FTP client was popular in mid 2000s&quot; /&gt;
&lt;p&gt;I clearly remember in my first job as an Intern in 2007 I used fireFTP and Filezilla to copy Drupal files to the server. Even in my second job in 2008, I used SVN and FileZilla to copy PHP files to the server for a web application I was developing then.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Probably towards the end of 2008 when I/we had started using Git at &lt;a href=&quot;https://younginnovations.com.np/&quot;&gt;YIPL&lt;/a&gt;. It was a needed change from SVN and Git is still amazing.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I should have Googled and found out something like &lt;a href=&quot;https://github.com/git-ftp/git-ftp&quot;&gt;Git FTP&lt;/a&gt; if it existed then. That takes us to our next phase of software deployment tools.&lt;/p&gt;
&lt;h2 id=&quot;ssh%2C-git-pull-as-software-deployment-tools-2008-2011&quot; tabindex=&quot;-1&quot;&gt;SSH, Git pull as software deployment tools 2008-2011 &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/04/sofware-deployment-tools/#ssh%2C-git-pull-as-software-deployment-tools-2008-2011&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;So around Q4 of 2008, I joined the company we co-founded &lt;a href=&quot;https://younginnovations.com.np/&quot;&gt;Young Innovations&lt;/a&gt;. We were super early adopters of Git back then. Remember, Github started in 2008 and was not popular till 2010ish. In 2008-2010 we used &lt;a href=&quot;https://wiki.archlinux.org/index.php/gitosis&quot;&gt;Gitosis&lt;/a&gt; to configure Git access in our team with SSH public keys. So, I clearly know the difference between Git and Github.&lt;/p&gt;
&lt;p&gt;We used to SSH into our servers and our deployment process was more like this:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;SSH into the production server without password using SSH keys&lt;/li&gt;
&lt;li&gt;Go to the right folder&lt;/li&gt;
&lt;li&gt;Make sure the latest changes are on master, then execute &lt;code&gt;git pull origin master&lt;/code&gt; on the website folder&lt;/li&gt;
&lt;li&gt;As per need restart the server (it used to be Apache as far as I remember, as we mostly did PHP development back then).&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This worked pretty well, I would say it worked much better than using FTP as you don’t need to remember which files to copy and the process was mostly Ok unless you faced git conflicts and stuff like that. Looking back I would have written a &lt;a href=&quot;http://www.fabfile.org/&quot;&gt;Fabric&lt;/a&gt; script that did it as an atomic task, if anything failed it would stop the deployment.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Looks like a lot of other developers were doing this git pull thing even in 2018, opening up the .git &lt;a href=&quot;https://www.zdnet.com/article/almost-400k-websites-risk-hacking-data-theft-via-open-git-repos-researcher-warns/&quot;&gt;security hole&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Anyhow, this was a way we deployed till 2010 but I would not recommend anyone do it now in 2021.&lt;/p&gt;
&lt;h2 id=&quot;hello-capistrano-circa-2012-2015&quot; tabindex=&quot;-1&quot;&gt;Hello Capistrano circa 2012-2015 &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/04/sofware-deployment-tools/#hello-capistrano-circa-2012-2015&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In 2012, I moved to a new country and joined a fashion E-commerce startup in U.A.E -- &lt;a href=&quot;https://en-ae.namshi.com/&quot;&gt;Namshi&lt;/a&gt;. For the first time, I saw a proper automated deployment tool in action. It was not Capistrano, it was a custom-built CLI tool that had steps to select and the git branch or tag can be deployed live. Later we used &lt;a href=&quot;https://capistranorb.com/&quot;&gt;Capistrano&lt;/a&gt; in 2013 for one of the &lt;a href=&quot;https://en.wikipedia.org/wiki/Service-oriented_architecture&quot;&gt;Service Oriented Architecture&lt;/a&gt; “SOA” component we built in Symfony2. To be honest, I really liked how we deployed with Capistrano compared to FTP or login to server and run &lt;code&gt;git pull&lt;/code&gt; or even this custom tool. It was a one command deploy, no selections no interruptions, with atomic deployments to any environment staging or production.&lt;/p&gt;
&lt;p&gt;Capistrano is opinionated but it had the &lt;a href=&quot;https://github.com/capistrano/capistrano/blob/master/README.md#features&quot;&gt;features&lt;/a&gt; sorted.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The new version was built in a new folder and when it was ready to get traffic the symlink would be pointed to the latest release. After that, the server would be reloaded/restarted. So simple yet so effective.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;We could deploy git branches or tag and to multiple stages; mainly staging and live. It was a single command on the root of the project, wait for a couple of minutes, and done. The rollbacks were fast, all ACL was managed by SSH Keys.&lt;/p&gt;
&lt;p&gt;Even now if you have 1 to under 10 VMs and want to deploy a web application I would say Capistrano is your best bet. There are other flavors in Ruby and PHP but the basic deployment idea introduced by Capistrano stays the same.&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/software-deployment-tools/06capistrano.jpg&quot; title=&quot;Capistrano is still one of the best automated deployment tools if you deploy your software in VMs&quot; alt=&quot;Capistrano is still one of the best automated deployment tools if you deploy your software in VMs&quot; /&gt;
&lt;p&gt;Capistrano is the pioneer in deploying web software safely with minimal or no downtime. Many other software deployment tools have followed Capistrano’ss pursuit like &lt;a href=&quot;https://github.com/mina-deploy/mina&quot;&gt;Mina&lt;/a&gt;, &lt;a href=&quot;https://deployer.org/&quot;&gt;deployer&lt;/a&gt;, etc. Another less opinionated deployment tool is &lt;a href=&quot;http://www.fabfile.org/&quot;&gt;Fabric&lt;/a&gt;. It is written in Python. By this time we had written tests for the apps we built, there was a good continuous integration (CI) process in place on Travis. The &lt;a href=&quot;https://geshan.com.np/blog/2017/08/adopt-a-painless-continuous-delivery-culture/&quot;&gt;Continuous Delivery&lt;/a&gt; (CD) part was mainly done with the cap deploy.&lt;/p&gt;
&lt;p&gt;We had happily used Capistrano for 3-4 years and then in 2015 came Docker. It disrupted how people thought about web software development and deployment. I will still say, the best software deployment tool is the one &lt;a href=&quot;https://geshan.com.np/blog/2015/08/the-best-automated-deployment-tool-the-one-that-fits-your-needs/&quot;&gt;that fits your needs&lt;/a&gt;. Around 2015 I wrote a couple of fabric scripts to automate the deployment of CMS like Drupal for YIPL. It was helpful for them too. Then we all stumbled upon &lt;a href=&quot;https://www.docker.com/&quot;&gt;Docker&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;docker-is-the-way-to-go---2016&quot; tabindex=&quot;-1&quot;&gt;Docker is the way to go - 2016 &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/04/sofware-deployment-tools/#docker-is-the-way-to-go---2016&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Docker was a paradigm shift and we were possibly one of the first teams in the MENA region to get our hands dirty with it.&lt;/p&gt;
&lt;p&gt;To keep the concerns clear, Docker is not an automated deployment tool per se. It is a software packaging software that lets you run your software consistently in all environments from dev to production creating a “general” parity. In turn, it makes software deployment a lot easier also because the build and deploy/run process is separated. Learn more about why you should &lt;a href=&quot;https://geshan.com.np/blog/2018/10/why-use-docker-3-reasons-from-a-development-perspective/&quot;&gt;use Docker in development&lt;/a&gt; and how it has &lt;a href=&quot;https://geshan.com.np/blog/2018/11/4-ways-docker-changed-the-way-software-engineers-work-in-past-half-decade/&quot;&gt;changed software engineering&lt;/a&gt; in the past years.&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/software-deployment-tools/07docker-kubernetes.jpg&quot; title=&quot;Docker and Kubernetes go hand in hand for a reliable software deployment experience&quot; alt=&quot;Docker and Kubernetes go hand in hand for a reliable software deployment experience&quot; /&gt;
&lt;p&gt;I remember we were running less than 5 apps on Docker in production. I am not aware of the specifics but I suppose we were doing Docker pull and docker run as it was less than 10 containers.&lt;/p&gt;
&lt;p&gt;Bear in mind, adding containers to your workflow does add more layers and complications in the CI/CD process. There will be a need to have a container registry like DockerHub, AWS ECR, or Google Container Registry. A builder will be needed to build images before they can be deployed and run. And after sometime when the number of running containers grow you will need a container orchestrator like Kubernetes.&lt;/p&gt;
&lt;p&gt;In terms of advancing deployment triggers, we had a chatbot on Hipchat/Slack written with Hubot that can run &lt;code&gt;cap deploy&lt;/code&gt; or &lt;code&gt;kubectl apply&lt;/code&gt; or &lt;code&gt;helm install&lt;/code&gt; on an AWS VM for us. This made deployment a much easier task.&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/software-deployment-tools/08chatops.jpg&quot; title=&quot;Chatops is a great way to democratize software deployment process&quot; alt=&quot;Chatops is a great way to democratize software deployment process&quot; /&gt;
&lt;p&gt;Later we started using Kubernetes in full swing.&lt;/p&gt;
&lt;h2 id=&quot;kubernetes-it-is-2016-2021&quot; tabindex=&quot;-1&quot;&gt;Kubernetes it is 2016-2021 &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/04/sofware-deployment-tools/#kubernetes-it-is-2016-2021&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;As far as I remember 2016 was a turning point. Our senior DevOps engineer did an internal talk to introduce Kubernetes to the tech team. It made little sense than on what was the power of Kubernetes.&lt;/p&gt;
&lt;p&gt;We were on AWS and I believe Kubernetes was managed with &lt;a href=&quot;https://github.com/kubernetes/kops&quot;&gt;Kops&lt;/a&gt; back then, there was no &lt;a href=&quot;https://aws.amazon.com/eks/&quot;&gt;AWS EKS&lt;/a&gt; and GKE had recently started I think. We were deploying apps with Kubernetes artifacts. Sooner than later we moved to Helm to deploy all our apps. Even the older apps deployed with Capistrano and other legacy tools had been dockerized and deployed with Kubernetes. We were using Minikube on our dev machines too.&lt;/p&gt;
&lt;p&gt;The deployment process was very smooth. Push changes to git, wait for the docker build to pass, and deploy with a chatbot. We had &lt;a href=&quot;https://github.com/namshi/roger&quot;&gt;Roger&lt;/a&gt; our own open-source docker builder and later we were building docker images on Google cloud build and deploying on self-managed Kubernetes with &lt;a href=&quot;https://helm.sh/&quot;&gt;Helm&lt;/a&gt; and Helm charts using &lt;code&gt;helm install&lt;/code&gt;. Eventually, Namshi did move to &lt;a href=&quot;https://tech.namshi.io/blog/2019/01/15/from-cloud-to-cloud-how-namshi-migrated-a-6yo-aws-infrastructure-to-gcp/&quot;&gt;GCP&lt;/a&gt; in 2019.&lt;/p&gt;
&lt;p&gt;Later when I joined a new company in mid-2018, we were using Kubernetes and going back to &lt;code&gt;kubectl apply&lt;/code&gt; to deploy things. Containers running with Kubernetes and deployed with Kubectl have been what I am used to now since 2018.&lt;/p&gt;
&lt;h2 id=&quot;quick-recap&quot; tabindex=&quot;-1&quot;&gt;Quick recap &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/04/sofware-deployment-tools/#quick-recap&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;So to recap the software deployment tools I have used in the past 20 years are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;2001 - 2008 - Web interface and File Transfer Protocol (FTP) clients&lt;/li&gt;
&lt;li&gt;2009 - 2011 - SSH and git pull :)&lt;/li&gt;
&lt;li&gt;2012 - 2015 - Capistrano and a few Fabric scripts&lt;/li&gt;
&lt;li&gt;2016 - 2021 - Kubectl apply with Docker and Kubernetes, some Helm between 2016-2018&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you see the trend, FTP was used for 7 years or more and Kubeclt is inching towards beating it. It is just a matter of time Kubectl will be used the longest as I don’t see it changing any time soon.&lt;/p&gt;
&lt;h2 id=&quot;how-to-choose-your-software-deployment-tool%3F&quot; tabindex=&quot;-1&quot;&gt;How to choose your software deployment tool? &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/04/sofware-deployment-tools/#how-to-choose-your-software-deployment-tool%3F&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Well by now I have written enough about how the software deployment tools and automated deployments tools have changed in the last 20 years. If you want to choose a software deployment tool for your team in 2021 below is an oversimplified flow chart that should help you:&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/software-deployment-tools/09choose-deployment-tool.jpg&quot; title=&quot;Choose a software deployment tool that fits your current need&quot; alt=&quot;Choose a software deployment tool that fits your current need&quot; /&gt;
&lt;p&gt;You can view a &lt;a href=&quot;https://geshan.com.np/images/software-deployment-tools/09choose-deployment-tool-full.jpg&quot;&gt;larger version&lt;/a&gt; too.&lt;/p&gt;
&lt;h2 id=&quot;conclusion&quot; tabindex=&quot;-1&quot;&gt;Conclusion &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/04/sofware-deployment-tools/#conclusion&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://geshan.com.np/blog/2018/10/deployment-is-not-release/&quot;&gt;Deployment is not a release&lt;/a&gt;, always separate your deployment which is a technical task from release which is a business operation. This is the main point, if you use a full-on feature flag SAAS or just an if-else in code to do this it is up to you.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;In 2021, if your team uses FTP/Capistrano to deploy web software and the business makes thousands of dollars a month your team is a lot better than “modern” teams using Docker containers, Kubernetes, etc and burning thousands of dollars a month.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The goal is to make money and happy customers software and software deployment tools are just means to achieve that goal. Choose what helps you reach business goals, not the latest fad. Happy deploying!&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>5 different ways to make HTTP requests with Node.js</title>
		<link href="https://geshan.com.np/blog/2021/03/nodejs-http-request/"/>
		<updated>2021-03-29T10:48:22Z</updated>
		<id>https://geshan.com.np/blog/2021/03/nodejs-http-request/</id>
		<content type="html">&lt;p&gt;There are multiple ways to make HTTP requests in Node.js. We can do so using the standard HTTP/HTTPS module, of course, or we could use one of a number of npm packages that make our lives much easier.&lt;/p&gt;
&lt;p&gt;In this post, we are going to see code examples of the native HTTPS module that comes built-in with your Node.js installation as well as npm packages like Axios, Got, SuperAgent, and node-fetch. Let’s get cracking!&lt;/p&gt;
&lt;!-- more --&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/nodejs-http-requests/01nodejs-http-requests.jpg&quot; title=&quot;5 different ways to make HTTP requests with Node.js&quot; alt=&quot;5 different ways to make HTTP requests with Node.js&quot; /&gt;
&lt;h2 id=&quot;table-of-contents&quot; tabindex=&quot;-1&quot;&gt;Table of contents &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/03/nodejs-http-request/#table-of-contents&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/03/nodejs-http-request/#prerequisites&quot;&gt;Prerequisites&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/03/nodejs-http-request/#the-example-we-will-use&quot;&gt;The example we will use&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/03/nodejs-http-request/#client-options-for-http-requests-in-nodejs&quot;&gt;Client options for HTTP requests in Node.js&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/03/nodejs-http-request/#standard-nodejs-https-module&quot;&gt;Standard Node.js HTTP(S) module&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/03/nodejs-http-request/#axios&quot;&gt;Axios&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/03/nodejs-http-request/#got&quot;&gt;Got&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/03/nodejs-http-request/#superagent&quot;&gt;SuperAgent&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/03/nodejs-http-request/#node-fetch&quot;&gt;node-fetch&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/03/nodejs-http-request/#a-quick-comparison-of-node-http-request-methods&quot;&gt;A quick comparison of Node HTTP request methods&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/03/nodejs-http-request/#conclusion&quot;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;prerequisites&quot; tabindex=&quot;-1&quot;&gt;Prerequisites &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/03/nodejs-http-request/#prerequisites&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Before we dive into the description and code, below are some prerequisites you’ll need to get your hands dirty with some Node.js code, which involves calling a remote mock JSON API:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;You should have Node.js running on your machine (&lt;a href=&quot;https://blog.logrocket.com/node-js-docker-improve-dx/&quot;&gt;maybe as a Docker container&lt;/a&gt;). All the examples will be run using Node.js 14.x, the active LTS&lt;/li&gt;
&lt;li&gt;You are familiar with npm commands like &lt;code&gt;npm init&lt;/code&gt;, and you are able to install npm packages with &lt;code&gt;npm install --save &amp;lt;module-name&amp;gt;&lt;/code&gt; to a project&lt;/li&gt;
&lt;li&gt;You can run the JavaScript files with &lt;code&gt;node &amp;lt;filename&amp;gt;&lt;/code&gt; on your command line to see example output&lt;/li&gt;
&lt;li&gt;You are familiar with &lt;a href=&quot;https://blog.logrocket.com/evolution-async-programming-javascript/&quot;&gt;callbacks, promises, and async/await&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Basic things, but good to get them checked before proceeding any further :)&lt;/p&gt;
&lt;h2 id=&quot;the-example-we-will-use&quot; tabindex=&quot;-1&quot;&gt;The example we will use &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/03/nodejs-http-request/#the-example-we-will-use&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;We will make an example GET request with all the HTTP client options by calling data from the &lt;a href=&quot;https://jsonplaceholder.typicode.com/users&quot;&gt;JSONPlaceholder&lt;/a&gt; mock API. It will send us back 10 users’ data. We will print out each user’s name and user ID.&lt;/p&gt;
&lt;p&gt;All the code will be laid out as a separate pull request. You can see all the code examples collected in this open-source repository on &lt;a href=&quot;https://github.com/geshan/nodejs-requests&quot;&gt;GitHub&lt;/a&gt;. The first example is callback-based, the next two are promise-based, and the last two use async/await.&lt;/p&gt;
&lt;h2 id=&quot;client-options-for-http-requests-in-node.js&quot; tabindex=&quot;-1&quot;&gt;Client options for HTTP requests in Node.js &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/03/nodejs-http-request/#client-options-for-http-requests-in-node.js&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;We will walk through five options to make the GET HTTP call to the placeholder API. Node.js has built-in modules to perform many HTTP(S)-related actions, one of which is the ability to make HTTP calls. Let’s get started with the native HTTP(S) option that comes baked in with Node.js as our first example.&lt;/p&gt;
&lt;h3 id=&quot;standard-node.js-http(s)-module&quot; tabindex=&quot;-1&quot;&gt;Standard Node.js HTTP(S) module &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/03/nodejs-http-request/#standard-node.js-http(s)-module&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Node.js comes with both &lt;a href=&quot;https://nodejs.org/api/http.html&quot;&gt;HTTP&lt;/a&gt; and &lt;a href=&quot;https://nodejs.org/api/https.html&quot;&gt;HTTPS&lt;/a&gt; modules in the standard library. For our example, as it is a HTTPS URL we will use the HTTPS module to perform the GET call. Below is the code example:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; https &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;https&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;https&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;https://jsonplaceholder.typicode.com/users&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token parameter&quot;&gt;res&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; data &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; headerDate &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; res&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;headers &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; res&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;headers&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;date &lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt; res&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;headers&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;date &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;no response date&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Status Code:&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; res&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;statusCode&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Date in Response header:&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; headerDate&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;  res&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;data&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token parameter&quot;&gt;chunk&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    data&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;chunk&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;  res&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;end&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Response ended: &#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; users &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;JSON&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;parse&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Buffer&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;concat&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;data&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;user &lt;span class=&quot;token keyword&quot;&gt;of&lt;/span&gt; users&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;      console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;Got user with id: &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;user&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;id&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;, name: &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;user&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;error&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token parameter&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Error: &#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; err&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;message&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let’s walk through the code. First, we require the &lt;code&gt;https&lt;/code&gt; standard Node module, which is available with Node.js installation. No need for a &lt;code&gt;package.json&lt;/code&gt; file or any &lt;code&gt;npm install --save&lt;/code&gt; to get this running.&lt;/p&gt;
&lt;p&gt;We then call our JSONPlaceholder URL with the &lt;code&gt;get&lt;/code&gt; method, which has a callback that provides the response we have put in the &lt;code&gt;res&lt;/code&gt; variable.&lt;/p&gt;
&lt;p&gt;Next, we initialize &lt;code&gt;data&lt;/code&gt; as an empty array, and after that, we log the status code and date from the respone’s header. Subsequently, whenever we get data, we push the chunk to the data array.&lt;/p&gt;
&lt;p&gt;Then, on the response end, we concat the array data, change it into a string, and parse the JSON to get the list of 10 users as an array of objects. Consequently, we loop through the 10 users and log the ID and name of the user object one at a time.&lt;/p&gt;
&lt;p&gt;One thing to note here: if there is an error on the request, the error message is logged on the console. The above code is available as a &lt;a href=&quot;https://github.com/geshan/nodejs-requests/pull/1&quot;&gt;pull request&lt;/a&gt; for your reference.&lt;/p&gt;
&lt;p&gt;As HTTPS is a standard Node.js module, there’s been no need for a &lt;code&gt;package.json&lt;/code&gt; — I wish I could say this for some of my Node.js projects.&lt;/p&gt;
&lt;p&gt;You can run the code simply with &lt;code&gt;node native-https.js&lt;/code&gt;, provided you named the file &lt;code&gt;native-https.js&lt;/code&gt;. It should show an output like below:&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/nodejs-http-requests/02nodejs-code-output.jpg&quot; title=&quot;Output of running Node.js native http module&quot; alt=&quot;Output of running Node.js native http module&quot; /&gt;
&lt;p&gt;You can use the same method to run all the other examples in this post; they will show a similar output as we print status code, date from response header, and the user ID and name from the response body.&lt;/p&gt;
&lt;p&gt;Next in line for exploration is the Axios npm package — for this, we will need a &lt;code&gt;package.json&lt;/code&gt; file. Time to see how.&lt;/p&gt;
&lt;h3 id=&quot;axios&quot; tabindex=&quot;-1&quot;&gt;Axios &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/03/nodejs-http-request/#axios&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.logrocket.com/how-to-make-http-requests-like-a-pro-with-axios/&quot;&gt;Axios&lt;/a&gt; is a very popular promise-based request library. It is an HTTP client available for both browser and Node.js. It also includes handy features like intercepting request and response data, and the ability to automatically transform request and response data to JSON.&lt;/p&gt;
&lt;p&gt;We can install Axios with the following command:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;npm&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;install&lt;/span&gt; --save axios&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then we can start using it. Let’s look at the example of calling our mock users JSON API with Axios:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; axios &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;axios&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;axios&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;https://jsonplaceholder.typicode.com/users&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;res&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; headerDate &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; res&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;headers &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; res&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;headers&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;date &lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt; res&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;headers&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;date &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;no response date&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Status Code:&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; res&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;status&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Date in Response header:&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; headerDate&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; users &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; res&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;data&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;user &lt;span class=&quot;token keyword&quot;&gt;of&lt;/span&gt; users&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;      console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;Got user with id: &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;user&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;id&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;, name: &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;user&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;catch&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Error: &#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; err&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;message&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As you can see, there’s less code here than in the earlier example. It is promise-based as opposed to callback-oriented, so this code can be easily turned into async/await format if you wish.&lt;/p&gt;
&lt;p&gt;Let’s explain what the code example is doing. First, we require the &lt;code&gt;axios&lt;/code&gt; library, then we call the JSONPlaceholder users API with &lt;code&gt;axios.get&lt;/code&gt; (which is promise-based).&lt;/p&gt;
&lt;p&gt;We use the &lt;code&gt;then&lt;/code&gt; method to get the result when the promise is resolved and get the response object as a &lt;code&gt;res&lt;/code&gt; variable. In the &lt;code&gt;then&lt;/code&gt; method, we log the status code and date from the response header.&lt;/p&gt;
&lt;p&gt;We get the JSON data as an array easily with &lt;code&gt;res.data&lt;/code&gt; thanks to Axios’ auto transformations. Consequently, we loop through the users, logging the ID and the name. In case of any error, we log the error message on the console. The code example is accessible as a &lt;a href=&quot;https://github.com/geshan/nodejs-requests/pull/3/files&quot;&gt;pull request&lt;/a&gt;, too.&lt;/p&gt;
&lt;p&gt;Next, we will take a look at another popular and feature-rich library, Got.&lt;/p&gt;
&lt;h3 id=&quot;got&quot; tabindex=&quot;-1&quot;&gt;Got &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/03/nodejs-http-request/#got&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://www.npmjs.com/package/got&quot;&gt;Got&lt;/a&gt; is another popular HTTP request library for Node.js. It claims to be a “human-friendly and powerful HTTP request library for Node.js.” It also features a promise-based API, and HTTP/2 support and its pagination API are Got’s USPs. Currently, Got is the most popular HTTP client library for Node.js, with over 19 million downloads per week.&lt;/p&gt;
&lt;p&gt;We can install Got with the command below:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;npm&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;install&lt;/span&gt; --save got&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Below is a quick example of using Got to fetch the users from our mock API:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; got &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;got&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;got&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;https://jsonplaceholder.typicode.com/users&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token literal-property property&quot;&gt;responseType&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;json&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;res&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; headerDate &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; res&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;headers &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; res&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;headers&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;date &lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt; res&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;headers&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;date &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;no response date&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Status Code:&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; res&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;statusCode&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Date in Response header:&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; headerDate&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; users &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; res&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;body&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;user &lt;span class=&quot;token keyword&quot;&gt;of&lt;/span&gt; users&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;      console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;Got user with id: &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;user&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;id&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;, name: &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;user&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;catch&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;err&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Error: &#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; err&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;message&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This code example is pretty similar to Axios, but with two main differences:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;We needed to pass &lt;code&gt;{responseType: &#39;json&#39;}&lt;/code&gt; as the second parameter to indicate that the response was in JSON format.&lt;/li&gt;
&lt;li&gt;The status code header was called &lt;code&gt;statusCode&lt;/code&gt;, not &lt;code&gt;status&lt;/code&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Other things remained basically the same as the previous request with Axios. The example can be seen in this &lt;a href=&quot;https://github.com/geshan/nodejs-requests/pull/4/files&quot;&gt;pull request&lt;/a&gt; too.&lt;/p&gt;
&lt;p&gt;Next up, we will have a look at Superagent.&lt;/p&gt;
&lt;h3 id=&quot;superagent&quot; tabindex=&quot;-1&quot;&gt;SuperAgent &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/03/nodejs-http-request/#superagent&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://www.npmjs.com/package/superagent&quot;&gt;SuperAgent&lt;/a&gt; by VisionMedia is one of the oldest Node.js request packages, released in &lt;a href=&quot;https://github.com/visionmedia/superagent/tags?after=0.6.0&quot;&gt;April 2011&lt;/a&gt;. A robust HTTP library for Node.js, SuperAgent brands itself as a “small, progressive, client-side HTTP request library and Node.js module with the same API, supporting many high-level HTTP client features.” It offers both callback- and promise-based APIs. With a promise-based API, using async/await is just some syntactic sugar on top of it.&lt;/p&gt;
&lt;p&gt;SuperAgent also features an array of &lt;a href=&quot;https://github.com/visionmedia/superagent#plugins&quot;&gt;plugins&lt;/a&gt;, ranging from no-cache to measuring HTTP timings.&lt;/p&gt;
&lt;p&gt;We can install SuperAgent with the following command:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;npm&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;install&lt;/span&gt; --save superagent&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let’s look at how our example users API call looks with SuperAgent. To provide some variety, we will use async/await for this illustration with an &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/IIFE&quot;&gt;Immediately Invoked Function Expression (IIFE)&lt;/a&gt; compared to a promise-based example:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; superagent &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;superagent&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; res &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; superagent&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;https://jsonplaceholder.typicode.com/users&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; headerDate &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; res&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;headers &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; res&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;headers&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;date &lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt; res&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;headers&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;date &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;no response date&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Status Code:&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; res&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;statusCode&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Date in Response header:&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; headerDate&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; users &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; res&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;body&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;user &lt;span class=&quot;token keyword&quot;&gt;of&lt;/span&gt; users&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;      console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;Got user with id: &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;user&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;id&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;, name: &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;user&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;err&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;err&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;message&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;//can be console.error&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let’s further examine how we did the request with SuperAgent. We required the &lt;code&gt;superagent&lt;/code&gt; library to make our test HTTP GET call. We started the IIFE with &lt;code&gt;async&lt;/code&gt; because we want to use await, as mentioned in the next point.&lt;/p&gt;
&lt;p&gt;Next, in the &lt;code&gt;try&lt;/code&gt; block, we called &lt;code&gt;superagent.get&lt;/code&gt; with &lt;code&gt;await&lt;/code&gt;, which would resolve the promise and give us the result of the HTTP call to our mock users API. Then, from the &lt;code&gt;res&lt;/code&gt; variable, we picked out the date from &lt;code&gt;res.headers&lt;/code&gt; and logged status and date on the console.&lt;/p&gt;
&lt;p&gt;After that, we set the response’s body in the &lt;code&gt;users&lt;/code&gt; constant and looped through that array of 10 users to print out each user’s name and ID. Consequently, there is a &lt;code&gt;catch&lt;/code&gt; block; if any error occurs anywhere in the &lt;code&gt;try&lt;/code&gt; block, it will be caught, and the error message will be logged to the console.&lt;/p&gt;
&lt;p&gt;SuperAgent is mature and battle-tested, which makes it pretty reliable. We can also test SuperAgent calls with &lt;a href=&quot;https://github.com/visionmedia/supertest&quot;&gt;SuperTest&lt;/a&gt;, which is a very handy library in its own right. Like the examples above, the SuperAgent code is available as a &lt;a href=&quot;https://github.com/geshan/nodejs-requests/pull/5/files&quot;&gt;pull request&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Now let’s look at node-fetch.&lt;/p&gt;
&lt;h3 id=&quot;node-fetch&quot; tabindex=&quot;-1&quot;&gt;node-fetch &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/03/nodejs-http-request/#node-fetch&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://www.npmjs.com/package/node-fetch&quot;&gt;node-fetch&lt;/a&gt; is another hugely popular HTTP request library for Node.js — in the first week of December 2020, it was downloaded more than 20 million times, as per &lt;a href=&quot;https://www.npmtrends.com/node-fetch&quot;&gt;npm trends&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In their own words, “node-fetch is a lightweight module that brings the Fetch API (&lt;code&gt;window.fetch&lt;/code&gt;) to Node.js.” Its features include consistency with the browser-based &lt;code&gt;window.fetch&lt;/code&gt; and native promise and async functions.&lt;/p&gt;
&lt;p&gt;We can install node-fetch with the command below:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;npm&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;install&lt;/span&gt; --save node-fetch&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Next, let’s have a look at how node-fetch can be used to call our mock users API. This example will also use async/await to keep things simple:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; fetch &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;node-fetch&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; res &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;https://jsonplaceholder.typicode.com/users&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; headerDate &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; res&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;headers &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; res&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;headers&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;date&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;?&lt;/span&gt; res&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;headers&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;date&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;no response date&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Status Code:&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; res&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;status&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Date in Response header:&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; headerDate&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; users &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; res&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;user &lt;span class=&quot;token keyword&quot;&gt;of&lt;/span&gt; users&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;      console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;Got user with id: &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;user&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;id&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;, name: &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;user&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;err&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;err&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;message&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;//can be console.error&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let’s review some of the differences here compared to our example of using SuperAgent with async/await:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;fetch&lt;/code&gt; did not need an explicit GET method; the HTTP verb can be sent as a &lt;code&gt;method&lt;/code&gt; key in the second parameter, which is an object. For instance: &lt;code&gt;{method: &#39;GET&#39;}&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Another difference is that the header is an object with a &lt;code&gt;get&lt;/code&gt; method to get header values. We called &lt;code&gt;res.headers.get(&#39;date&#39;)&lt;/code&gt; to get the value of the date response header&lt;/li&gt;
&lt;li&gt;The final difference was the need to unwrap a promise to get the body as JSON with &lt;code&gt;await res.json()&lt;/code&gt;. It seemed like a bit of extra work, but that is how the browser Fetch API &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Body/json&quot;&gt;response&lt;/a&gt; works.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Same as all the above examples, this code is also accessible as a &lt;a href=&quot;https://github.com/geshan/nodejs-requests/pull/6/files&quot;&gt;pull request&lt;/a&gt; for your reference.&lt;/p&gt;
&lt;p&gt;Now it’s time to compare the four libraries that we just reviewed.&lt;/p&gt;
&lt;h2 id=&quot;a-quick-comparison-of-node-http-request-methods&quot; tabindex=&quot;-1&quot;&gt;A quick comparison of Node HTTP request methods &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/03/nodejs-http-request/#a-quick-comparison-of-node-http-request-methods&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Except for the HTTP/HTTPS standard Node module, all four other HTTP client libraries for Node.js are available as npm packages. Below is a quick view of their download statistics by week for the past six months, via &lt;a href=&quot;https://www.npmtrends.com/axios-vs-got-vs-superagent-vs-node-fetch&quot;&gt;npm trends&lt;/a&gt;:&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/nodejs-http-requests/03npm-trends.jpg&quot; title=&quot;NPM trends of the 4 HTTP related NPM modules&quot; alt=&quot;NPM trends of the 4 HTTP related NPM modules&quot; /&gt;
&lt;p&gt;In terms of weekly downloads, got was the most popular, and SuperAgent was the least popular in the past six months. Let’s scrutinize some other metrics for a better picture of popularity among these contenders thanks to the &lt;a href=&quot;https://github.com/sindresorhus/got#comparison&quot;&gt;comparison table&lt;/a&gt; on the Got GitHub repo:&lt;/p&gt;
&lt;table&gt;
  &lt;tr&gt;
   &lt;td&gt;
   &lt;/td&gt;
   &lt;td&gt;&lt;strong&gt;Axios&lt;/strong&gt;
   &lt;/td&gt;
   &lt;td&gt;&lt;strong&gt;Got&lt;/strong&gt;
   &lt;/td&gt;
   &lt;td&gt;&lt;strong&gt;Superagent&lt;/strong&gt;
   &lt;/td&gt;
   &lt;td&gt;&lt;strong&gt;node-fetch&lt;/strong&gt;
   &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td&gt;&lt;strong&gt;GitHub stars&lt;/strong&gt;
   &lt;/td&gt;
   &lt;td&gt;80.55K
   &lt;/td&gt;
   &lt;td&gt;8.81K
   &lt;/td&gt;
   &lt;td&gt;15.49K
   &lt;/td&gt;
   &lt;td&gt;5.92K
   &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td&gt;&lt;strong&gt;Install size&lt;/strong&gt;
   &lt;/td&gt;
   &lt;td&gt;388kB
   &lt;/td&gt;
   &lt;td&gt;1.32MB
   &lt;/td&gt;
   &lt;td&gt;1.70MB
   &lt;/td&gt;
   &lt;td&gt;155kB
   &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
   &lt;td&gt;&lt;strong&gt;npm downloads (per week)&lt;/strong&gt;
   &lt;/td&gt;
   &lt;td&gt;18.76M
   &lt;/td&gt;
   &lt;td&gt;22.96M
   &lt;/td&gt;
   &lt;td&gt;4.87M
   &lt;/td&gt;
   &lt;td&gt;20.74M
   &lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;From the above table, node-fetch is the most downloaded package. SuperAgent has the largest install size at 1.70MB, and Axios has the most GitHub stars with 80.55K — more than all three other libraries combined.&lt;/p&gt;
&lt;h2 id=&quot;conclusion&quot; tabindex=&quot;-1&quot;&gt;Conclusion &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/03/nodejs-http-request/#conclusion&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I used SuperAgent quite extensively some years back; after that, I moved to Axios. With its long feature list, I want to give Got a try in the near future. Even though node-fetch looks promising and has a small install size, I am not sure if the API is user-friendly enough — at least for me.&lt;/p&gt;
&lt;p&gt;You might notice I didn’t mention the &lt;a href=&quot;https://www.npmjs.com/package/request&quot;&gt;Request&lt;/a&gt; npm package. Even though Request is still ultra-popular (22.36 million downloads each week), as of 11 February 2020, it will have been &lt;a href=&quot;https://github.com/request/request#deprecated&quot;&gt;fully deprecated&lt;/a&gt;, so there’s no point in using a deprecated library.&lt;/p&gt;
&lt;p&gt;All these libraries mainly do the same thing — much like which brand of coffee you prefer, in the end, you are still drinking coffee. Choose wisely depending on your use case, and make the right tradeoffs for maximum benefit.&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>10 JavaScript array functions you should start using today</title>
		<link href="https://geshan.com.np/blog/2021/03/javascript-array-functions/"/>
		<updated>2021-03-15T10:48:22Z</updated>
		<id>https://geshan.com.np/blog/2021/03/javascript-array-functions/</id>
		<content type="html">&lt;p&gt;In JavaScript, we generally use arrays to represent data or manipulate data, so using JavaScript array functions is very helpful. For instance, if we query a database we will most likely get the rows as an array of objects. Where each object represents a row in the database.&lt;/p&gt;
&lt;p&gt;In this post, we will learn about 10 JavaScript array functions that are going to help you easily work with data in the JavaScript arrays. Let’s get started!&lt;/p&gt;
&lt;!-- more --&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/javascript-array-functions/01javascript-array-functions.jpg&quot; title=&quot;10 JavaScript array functions you should know about&quot; alt=&quot;10 JavaScript array functions you should start using today&quot; /&gt;
&lt;h2 id=&quot;table-of-contents&quot; tabindex=&quot;-1&quot;&gt;Table of contents &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/03/javascript-array-functions/#table-of-contents&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/03/javascript-array-functions/#prerequisites&quot;&gt;Prerequisites&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/03/javascript-array-functions/#javascript-array-functions&quot;&gt;Javascript array functions&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/03/javascript-array-functions/#map&quot;&gt;Map&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/03/javascript-array-functions/#filter&quot;&gt;Filter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/03/javascript-array-functions/#some&quot;&gt;Some&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/03/javascript-array-functions/#every&quot;&gt;Every&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/03/javascript-array-functions/#find&quot;&gt;Find&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/03/javascript-array-functions/#includes&quot;&gt;Includes&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/03/javascript-array-functions/#slice&quot;&gt;Slice&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/03/javascript-array-functions/#join&quot;&gt;Join&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/03/javascript-array-functions/#fill&quot;&gt;FIll&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/03/javascript-array-functions/#sort&quot;&gt;Sort&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/03/javascript-array-functions/#javascript-array-functions-examples&quot;&gt;JavaScript array functions examples&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/03/javascript-array-functions/#conclusion&quot;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;prerequisites&quot; tabindex=&quot;-1&quot;&gt;Prerequisites &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/03/javascript-array-functions/#prerequisites&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Before we jump into the code, below are some prerequisites to be mindful of:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;You are familiar with the ES6 way of writing JavaScript with the shorthand &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions&quot;&gt;arrow function&lt;/a&gt; syntax and one-liners.&lt;/li&gt;
&lt;li&gt;You are generally familiar with how JavaScript &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array&quot;&gt;arrays&lt;/a&gt; work and how &lt;a href=&quot;https://www.freecodecamp.org/news/javascript-callback-functions-what-are-callbacks-in-js-and-how-to-use-them/&quot;&gt;callbacks&lt;/a&gt; work.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Time to get our hands dirty with some example code, scroll a bit more to begin.&lt;/p&gt;
&lt;h2 id=&quot;javascript-array-functions&quot; tabindex=&quot;-1&quot;&gt;Javascript array functions &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/03/javascript-array-functions/#javascript-array-functions&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;An array is a high-level, list-like object in JavaScript that can have a sequence of primitive data types like string, int, or even objects. The array functions that we are going to elaborate on later in this post are built-in functions.&lt;/p&gt;
&lt;p&gt;We will use a simple array of objects from the programming-languages API as below:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; programmingLanguages &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token string-property property&quot;&gt;&quot;id&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string-property property&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;JavaScript&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string-property property&quot;&gt;&quot;released_year&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1995&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string-property property&quot;&gt;&quot;githut_rank&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string-property property&quot;&gt;&quot;pypl_rank&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token string-property property&quot;&gt;&quot;id&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string-property property&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Python&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string-property property&quot;&gt;&quot;released_year&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1991&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string-property property&quot;&gt;&quot;githut_rank&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string-property property&quot;&gt;&quot;pypl_rank&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token string-property property&quot;&gt;&quot;id&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string-property property&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Java&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string-property property&quot;&gt;&quot;released_year&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1995&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string-property property&quot;&gt;&quot;githut_rank&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string-property property&quot;&gt;&quot;pypl_rank&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token string-property property&quot;&gt;&quot;id&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string-property property&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;TypeScript&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string-property property&quot;&gt;&quot;released_year&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2012&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string-property property&quot;&gt;&quot;githut_rank&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string-property property&quot;&gt;&quot;pypl_rank&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token string-property property&quot;&gt;&quot;id&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string-property property&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;C#&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string-property property&quot;&gt;&quot;released_year&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2000&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string-property property&quot;&gt;&quot;githut_rank&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token string-property property&quot;&gt;&quot;pypl_rank&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Time to learn about our first JavaScript array function, find out what Map does.&lt;/p&gt;
&lt;h3 id=&quot;map&quot; tabindex=&quot;-1&quot;&gt;Map &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/03/javascript-array-functions/#map&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;In JavaScript, the array map function creates a new array with the results of calling a given function for each element in the source array. Let’s have a look at a simple array with 5 integers, we will use Map to square each number, meaning multiply the number by itself.&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; programmingLanguageNames &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; programmingLanguages&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token parameter&quot;&gt;programmingLanguage&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; programmingLanguage&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;All programming language names pulled in with map function: &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;programmingLanguageNames&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The above code will fill up the &lt;code&gt;programmingLanguageNames&lt;/code&gt; const array with 5 elements having values &lt;code&gt;[&amp;quot;JavaScript&amp;quot;, &amp;quot;Python&amp;quot;, &amp;quot;Java&amp;quot;, &amp;quot;TypeScript&amp;quot;, &amp;quot;C#&amp;quot;]&lt;/code&gt;. The JavaScript Map method can also be used to loop through each element of the array in a more functional way than using something like a &lt;code&gt;for&lt;/code&gt; construct.&lt;/p&gt;
&lt;p&gt;Reduce function is generally talked about with Map, I would curb the complexity of the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce&quot;&gt;reduce function&lt;/a&gt; and let you explore it on your own. Step forward to sharpen your functional programming skills.&lt;/p&gt;
&lt;h3 id=&quot;filter&quot; tabindex=&quot;-1&quot;&gt;Filter &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/03/javascript-array-functions/#filter&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The javascript filter function on arrays creates a new array filled up with the elements that pass the test in the provided function. From our example array, we will filter programming languages that release after 1999, we can do it in the following way:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; zenZProgrammingLanguages &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; programmingLanguages&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token parameter&quot;&gt;programmingLanguage&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; programmingLanguage&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;released_year &lt;span class=&quot;token operator&quot;&gt;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2000&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Filter out the programming languages release on or after 2000: &#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; zenZProgrammingLanguages&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The filter function in this case will filter out all programming languages released before 2000. This will result in an array that has 2 objects in the array for Typescript and C#. As the name suggests, the filter JavaScript array function can be used to filter any given array based on a condition.&lt;/p&gt;
&lt;h3 id=&quot;some&quot; tabindex=&quot;-1&quot;&gt;Some &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/03/javascript-array-functions/#some&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The Some JavaScript function executes the callback function once for each array element until it finds one element where the callback returns true. In our example of programming languages, let&#39;s try to find if there is any programming language that was released in the year 1995. To do this we will use the &lt;code&gt;some&lt;/code&gt; function as follows:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; hasLanguageReleasedin1991 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; programmingLanguages&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;some&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token parameter&quot;&gt;programmingLanguage&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; programmingLanguage&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;released_year &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1991&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;Do we have any programming language in our list that was released in 1991? The answer is: &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;hasLanguageReleasedin1991&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt; using &quot;some&#39;&#39; function&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;When we execute the above code, the const &lt;code&gt;hasLanguageReleasedin1995&lt;/code&gt; will have a value of true. It will be true because in our list &lt;code&gt;Python&lt;/code&gt; was released in 1991 which will pass the released_year of 1995 test and set the variable to true. If we try the test with say release_year is 1997 the variable will be set to false as no programming language in our array of 5 was released in 1997.&lt;/p&gt;
&lt;h3 id=&quot;every&quot; tabindex=&quot;-1&quot;&gt;Every &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/03/javascript-array-functions/#every&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;JavaScript Every function checks if all the elements of the given array pass a test provided in the callback function. We will check if all the programming languages in our array are among the top 10 programming languages in &lt;a href=&quot;https://githut.info/&quot;&gt;GitHut&lt;/a&gt;. Let’s see how the code unfolds to test that:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; allAmongTop10InGitHut &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; programmingLanguages&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;every&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token parameter&quot;&gt;programmingLanguage&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; programmingLanguage&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;githut_rank &lt;span class=&quot;token operator&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;Are all programming languages in our list among top 10 on GitHut? The answer is: &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;allAmongTop10InGitHut&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt; using &quot;every&quot; function&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The const &lt;code&gt;allAmongTop10InGitHut&lt;/code&gt; will be true as all the programming languages are below rank 10 on Githut in our list of 5 programming languages.&lt;/p&gt;
&lt;h3 id=&quot;find&quot; tabindex=&quot;-1&quot;&gt;Find &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/03/javascript-array-functions/#find&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The JavaScript array &lt;code&gt;find&lt;/code&gt; function returns the value of the first element in the given array which passes a given test in the provided callback function. To use this function, let&#39;s try to find the No.1 popular language in the &lt;a href=&quot;https://pypl.github.io/PYPL.html&quot;&gt;PYPL&lt;/a&gt; popularity of Programming languages index and print its name. I have a feeling it is Python, let&#39;s put that theory to test.&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; mostPopularLangaugeOnPypl &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; programmingLanguages&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;find&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token parameter&quot;&gt;programmingLanguage&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; programmingLanguage&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;pypl_rank &lt;span class=&quot;token operator&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;The most popular programming language as per PYPL index is: &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;mostPopularLangaugeOnPypl&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;name&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;hr /&gt;
&lt;p&gt;For the next set of 5 Javascript array functions, we will use a simple array that has the names of the days in a week.&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; days &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token string&quot;&gt;&quot;Monday&quot;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Tuesday&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Wednesday&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Thursday&quot;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;br /&gt;  &lt;span class=&quot;token string&quot;&gt;&quot;Friday&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;token string&quot;&gt;&quot;Saturday&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;token string&quot;&gt;&quot;Sunday&quot;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;includes&quot; tabindex=&quot;-1&quot;&gt;Includes &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/03/javascript-array-functions/#includes&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Javascript array includes function is a search to find if an array contains a given value among its entries. It returns true if the array includes the given value else it returns false. Let’s see if we have “Sunday” in the days of the weeks, expected answer is true:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; isSundayADay &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; days&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;includes&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Sunday&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; isFundayADay &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; days&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;includes&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Funday&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;Is Sunday a day? Answer: &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;isSundayADay&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt; -- Is Funday a day? Answer: &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;isFundayADay&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Looks like Sunday is a day but unfortunately &lt;code&gt;Funday&lt;/code&gt; is not a day :). On a different note, there can be an alias for &lt;code&gt;includes&lt;/code&gt; called &lt;code&gt;contains&lt;/code&gt; that does the same thing.&lt;/p&gt;
&lt;h3 id=&quot;slice&quot; tabindex=&quot;-1&quot;&gt;Slice &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/03/javascript-array-functions/#slice&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;As the name says, the slice JavaScript function will cut the JavaScript array and give the slices. It returns a shallow copy of a portion of the array into a new array object selected from the given start to end. Let’s try to get only weekend days as an example below:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; weekendDays &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; days&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;slice&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;Generally most countries in the world get a weekend on: &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;weekendDays&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As seen in the above example, the end is not taken in the slice and the original array (days in this case) is not modified.&lt;/p&gt;
&lt;h3 id=&quot;join&quot; tabindex=&quot;-1&quot;&gt;Join &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/03/javascript-array-functions/#join&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The join function is a very useful array function in JavaScript. It concatenates all the elements in the array as a string separated by commas by default. We can specify a separator string too. In case the array has only one item, it will be returned without the separator. Time to look at how our &lt;code&gt;days&lt;/code&gt; array looks like as a string with a &lt;code&gt;~&lt;/code&gt; separator:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; funkyDays &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; days&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;~&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;Days are flowing in: &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;funkyDays&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you have noticed we have used the &lt;code&gt;join&lt;/code&gt; function in the above examples as well. It is pretty similar to the &lt;a href=&quot;https://www.php.net/manual/en/function.implode.php&quot;&gt;implode&lt;/a&gt; function in PHP. Similar to join there is a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/split&quot;&gt;split&lt;/a&gt; function that converts a string into an array.&lt;/p&gt;
&lt;h3 id=&quot;fill&quot; tabindex=&quot;-1&quot;&gt;FIll &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/03/javascript-array-functions/#fill&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The fill function available on JavaScript arrays changes all the elements in an array to a static value in the given range. If no range is provided it fills up the whole array with the given value. Let&#39;s have a look at how it works:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; allSaturdays &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; days&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;fill&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;“Saturday”&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It changes the main array as well, so after this operation, the &lt;code&gt;days&lt;/code&gt; array will have 7 elements and all of them will be “Saturday:”. A practical use-case of fill I have seen is in the &lt;a href=&quot;https://github.com/namshi/node-mysql/&quot;&gt;node-mysql wrapper&lt;/a&gt;, where it is used to &lt;a href=&quot;https://github.com/namshi/node-mysql/blob/master/index.js#L76&quot;&gt;fill up&lt;/a&gt; an array with &lt;code&gt;?&lt;/code&gt; for &lt;a href=&quot;https://cheatsheetseries.owasp.org/cheatsheets/Query_Parameterization_Cheat_Sheet.html&quot;&gt;parameterized SQL query&lt;/a&gt;. Another example can be if you need the same data to test performance with a big-sized array.&lt;/p&gt;
&lt;h3 id=&quot;sort&quot; tabindex=&quot;-1&quot;&gt;Sort &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/03/javascript-array-functions/#sort&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The sort array function in JavaScript sorts the elements of an array in place and returns a sorted array. It converts the array elements into strings and sorts them in ascending order. Let’s see how the days will be sorted by sort in an ascending fashion:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; sortedDays &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Monday&quot;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Tuesday&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Wednesday&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Thursday&quot;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Friday&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;token string&quot;&gt;&quot;Saturday&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;token string&quot;&gt;&quot;Sunday&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;sortedDays&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;sort&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;Days cannot be sorted but JavaScript sorts them as: &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;sortedDays&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I hope my days were so easily sorted, but they are not. Sort can also take a function to do the sorting. Here is a good &lt;a href=&quot;https://javascript.info/array-methods#sort-fn&quot;&gt;example&lt;/a&gt;. The sort function can be nifty for quickly sorting elements in an array using the default function or by providing your own function to do the sorting logic.&lt;/p&gt;
&lt;h2 id=&quot;javascript-array-functions-examples&quot; tabindex=&quot;-1&quot;&gt;JavaScript array functions examples &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/03/javascript-array-functions/#javascript-array-functions-examples&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;All the above code examples can be found in this neat &lt;a href=&quot;https://gist.github.com/geshan/ecac791ab5ee78e7e680613dd915e520#file-10-js-array-methods-js&quot;&gt;gist&lt;/a&gt; for your reference. If you have node installed locally you can quickly run the code without downloading the file in your machine with the command below:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;curl&lt;/span&gt; https://gist.githubusercontent.com/geshan/ecac791ab5ee78e7e680613dd915e520/raw/9f5628539d6e41c6adb225478fc81e4e49dc7026/10-js-array-methods.js &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;node&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;There are other very useful JavaScript array functions like splice, shift, concat, values, etc. I would really recommend checking &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array#browser_compatibility&quot;&gt;browser compatibility&lt;/a&gt; before using these functions on the browser. In the case of Node.js, you can check the compatibility on &lt;a href=&quot;https://node.green/#ES2015-built-ins-typed-arrays&quot;&gt;Node.green&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;You can try the above examples on &lt;a href=&quot;https://jsfiddle.net/geshan/6cx8em0a/&quot;&gt;JsFiddle&lt;/a&gt;, or do a quick check below (their console is in beta right now):&lt;/p&gt;
&lt;script async=&quot;&quot; src=&quot;https://jsfiddle.net/geshan/6cx8em0a/1/embed/js,result/dark/&quot;&gt;&lt;/script&gt;
&lt;p&gt;In addition to making your JavaScript code efficient, if you want to make it fast try &lt;a href=&quot;https://geshan.com.np/blog/2021/02/javascript-memoization/&quot;&gt;JavaScript Memoization&lt;/a&gt;. Using &lt;a href=&quot;https://geshan.com.np/blog/2021/02/nodemon/&quot;&gt;Nodemon&lt;/a&gt; for local Node.js development is also highly advisable.&lt;/p&gt;
&lt;h2 id=&quot;conclusion&quot; tabindex=&quot;-1&quot;&gt;Conclusion &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/03/javascript-array-functions/#conclusion&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;We have seen 10 very useful JavaScript array functions that you can use to filter, check if an array contains an element, sort, and do other handy stuff.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Don’t underestimate the power of arrays, exploit it to make your code simpler to read and maintain with these nifty functions.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Happy coding!&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>Kubernetes cron jobs: a hands-on guide to optimally configured crons</title>
		<link href="https://geshan.com.np/blog/2021/02/kubernetes-cron-job/"/>
		<updated>2021-02-20T11:48:22Z</updated>
		<id>https://geshan.com.np/blog/2021/02/kubernetes-cron-job/</id>
		<content type="html">&lt;p&gt;Kubernetes is super effective on running cron jobs as well as other web application workloads. Kubernetes cron job is a special kind of Kubernetes job that runs on a time-based schedule. In this post, we will focus on how to run optimally configured cron jobs on Kubernetes.&lt;/p&gt;
&lt;!-- more --&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/kubernetes-cron-job/01kubernetes-cron-job.jpg&quot; title=&quot;Kubernetes cron jobs, lets configure them optimally&quot; alt=&quot;Kubernetes cron jobs, lets configure them optimally&quot; /&gt;
&lt;h2 id=&quot;table-of-contents&quot; tabindex=&quot;-1&quot;&gt;Table of contents &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/02/kubernetes-cron-job/#table-of-contents&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/02/kubernetes-cron-job/#what-is-kubernetes%3F&quot;&gt;What is Kubernetes?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/02/kubernetes-cron-job/#what-does-kubernetes-do%3F&quot;&gt;What does Kubernetes do?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/02/kubernetes-cron-job/#kubernetes-cron-job&quot;&gt;Kubernetes Cron Job&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/02/kubernetes-cron-job/#prerequisites&quot;&gt;Prerequisites&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/02/kubernetes-cron-job/#kubernetes-cron-job-a-simple-example&quot;&gt;Kubernetes cron job a simple example&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/02/kubernetes-cron-job/#kubernetes-cron-job-an-optimal-example&quot;&gt;Kubernetes cron job an optimal example&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/02/kubernetes-cron-job/#run-kubernetes-cron-jobs-on-the-fly&quot;&gt;Run Kubernetes cron jobs on the fly&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/02/kubernetes-cron-job/#conclusion&quot;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;what-is-kubernetes%3F&quot; tabindex=&quot;-1&quot;&gt;What is Kubernetes? &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/02/kubernetes-cron-job/#what-is-kubernetes%3F&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Kubernetes has multiple definitions, we will first look at a couple of them and then try to simplify them. To start with, the official “what is Kubernetes” page on &lt;a href=&quot;http://kubernetes.io/&quot;&gt;Kubernetes.io&lt;/a&gt; says:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Kubernetes is a portable, extensible, open-source platform for managing containerized workloads and services, that facilitates both declarative configuration and automation.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;It further adds: “The name Kubernetes originates from Greek, meaning helmsman or pilot. Google open-sourced the Kubernetes project in 2014.” There is also a mention of the over 15 years of Google’s experience running production workload at scale.&lt;/p&gt;
&lt;p&gt;Wikipedia page on Kubernetes voices:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Kubernetes (commonly stylized as K8s) is an open-source container orchestration system for automating computer application deployment, scaling, and management.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;It adds: It was originally designed by Google and is now maintained by the Cloud Native Computing Foundation. It aims to provide a &amp;quot;platform for automating deployment, scaling, and operations of application containers across clusters of hosts&amp;quot;.&lt;/p&gt;
&lt;h2 id=&quot;what-does-kubernetes-do%3F&quot; tabindex=&quot;-1&quot;&gt;What does Kubernetes do? &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/02/kubernetes-cron-job/#what-does-kubernetes-do%3F&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Ok, now let&#39;s simplify stuff. If I say this is the container era for deploying workloads like web applications, cron jobs, and anything in between I won’t be wrong. In container land, Docker has won the race and it is the defacto container tool.&lt;/p&gt;
&lt;p&gt;Now, with that in mind. we might start small with containers and run one or two apps in containers. This means at any given time we would be running 1-10 containers. Some time passes, we like the idea and other advantages containers provide. We want to run a couple of more workloads/apps in containers. This equates to having 10s of containers running and maybe in production.&lt;/p&gt;
&lt;p&gt;More time passes by and more apps are containerized, at this point we have 100s of containers running. Then how do we scale these containers? How do we make service A talk to service B? How do we handle deployments and rollbacks of 10s of applications that have 100s of containers underlined? How do we effectively manage resources (CPU/RAM) and secrets consistently for these 100s of containers?&lt;/p&gt;
&lt;p&gt;The answer to all of the above Hows is a “container orchestrator”. Around 2015 there was a slight competition between Kubernetes, Docker Swarm, and Apache Mesos. By mid-2017, Kubernetes comfortably won the race to become the wildly popular de facto container orchestrator as per &lt;a href=&quot;https://trends.google.com/trends/explore?date=2015-01-01%202021-01-31&amp;amp;q=kubernetes,docker%20swarm,apache%20mesos&quot;&gt;Google Trends&lt;/a&gt; that we can see below:&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/kubernetes-cron-job/02kubernetes-cron-job-popularity.jpg&quot; title=&quot;Kubernetes won the container orchestrator race in mid 2017&quot; alt=&quot;Kubernetes won the container orchestrator race in mid 2017&quot; /&gt;
&lt;p&gt;Even though Kubernetes is flexible, powerful, and ultra-popular. There are some things &lt;a href=&quot;https://kubernetes.io/docs/concepts/overview/what-is-kubernetes/#what-kubernetes-is-not&quot;&gt;Kubernetes is not&lt;/a&gt;, it is better to know about them too. In today’s time, Kubernetes has become a well-established platform with a thriving ecosystem around it.&lt;/p&gt;
&lt;h2 id=&quot;kubernetes-cron-job&quot; tabindex=&quot;-1&quot;&gt;Kubernetes Cron Job &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/02/kubernetes-cron-job/#kubernetes-cron-job&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;I have been part of a team that used Kubernetes in Production in &lt;a href=&quot;https://www.slideshare.net/geshan/embrace-chatops-stop-installing-deployment-software-larcon-eu-2016/54&quot;&gt;2016&lt;/a&gt;. Kubernetes is great at managing long-running workloads like web servers or queue consumers. They roughly translate to &lt;a href=&quot;https://kubernetes.io/docs/concepts/services-networking/service/&quot;&gt;Service&lt;/a&gt;, and &lt;a href=&quot;https://kubernetes.io/docs/concepts/workloads/controllers/deployment/&quot;&gt;Deployment&lt;/a&gt; artifact in Kubernetes lingo. In addition to being great for long-running workloads, Kubernetes does an amazing job in managing Cron Jobs too.&lt;/p&gt;
&lt;p&gt;If we look at a bit of Kubernetes history, Kubernetes Cron Job was called &lt;code&gt;ScheduledJob&lt;/code&gt;. In &lt;a href=&quot;https://github.com/kubernetes/kubernetes/blob/master/CHANGELOG/CHANGELOG-1.5.md#action-required-before-upgrading&quot;&gt;version 1.5&lt;/a&gt; it was renamed to be called Cron Job. In Kubernetes, &lt;a href=&quot;https://kubernetes.io/docs/concepts/workloads/controllers/cron-jobs/&quot;&gt;Cron Job&lt;/a&gt; is a special kind of a &lt;a href=&quot;https://kubernetes.io/docs/concepts/workloads/controllers/job/&quot;&gt;Job&lt;/a&gt; that runs on a repeating schedule. The frequency of the Kubernetes Cron Job is written in the familiar &lt;a href=&quot;https://crontab.guru/&quot;&gt;Cron&lt;/a&gt; format. For example &lt;code&gt;0 4 * * *&lt;/code&gt; in the cron format means at 4:00 AM every morning. You can read more about the &lt;a href=&quot;https://kubernetes.io/docs/concepts/workloads/controllers/cron-jobs/#cron-schedule-syntax&quot;&gt;cron schedule syntax&lt;/a&gt; if you want.&lt;/p&gt;
&lt;p&gt;How would you know if a cron job missed one or more of its schedule? It is better to know more about effective &lt;a href=&quot;https://geshan.com.np/blog/2019/11/how-to-efficiently-monitor-crons-with-a-simple-bash-trick/&quot;&gt;cron job monitoring&lt;/a&gt; before it slips unnoticed.&lt;/p&gt;
&lt;h3 id=&quot;prerequisites&quot; tabindex=&quot;-1&quot;&gt;Prerequisites &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/02/kubernetes-cron-job/#prerequisites&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;You are generally aware of how Kubernetes works and schedules containers as &lt;a href=&quot;https://kubernetes.io/docs/concepts/workloads/pods/&quot;&gt;pods&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;You know that Kubernetes manages objects and config in a &lt;a href=&quot;https://kubernetes.io/docs/concepts/overview/working-with-objects/object-management/#declarative-object-configuration&quot;&gt;declarative way&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;The differences between a service, deployment, and &lt;a href=&quot;https://kubernetes.io/docs/tasks/run-application/horizontal-pod-autoscale/&quot;&gt;Horizontal Pod Autoscaler&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;You generally know what &lt;a href=&quot;https://kubernetes.io/docs/concepts/services-networking/ingress/&quot;&gt;Ingress&lt;/a&gt; is used for in Kubernetes.&lt;/li&gt;
&lt;li&gt;You are aware of usual Kubernetes terms like Node, Kubelet, and the likes.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Next, we will look into a simple Kubernetes cron job example.&lt;/p&gt;
&lt;h3 id=&quot;kubernetes-cron-job-a-simple-example&quot; tabindex=&quot;-1&quot;&gt;Kubernetes cron job a simple example &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/02/kubernetes-cron-job/#kubernetes-cron-job-a-simple-example&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;We will try a simple Kubernetes cron job example on &lt;a href=&quot;https://kind.sigs.k8s.io/docs/user/quick-start/&quot;&gt;Kind&lt;/a&gt;. At the time of writing Kind version 0.9.0 starts a Kubernetes cluster of version 1.19.1. Below is our simple Kubernetes cron file that uses node:14-alipine image to print the current date.&lt;/p&gt;
&lt;pre class=&quot;language-yaml&quot;&gt;&lt;code class=&quot;language-yaml&quot;&gt;&lt;span class=&quot;token key atrule&quot;&gt;apiVersion&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; batch/v1beta1&lt;br /&gt;&lt;span class=&quot;token key atrule&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; CronJob&lt;br /&gt;&lt;span class=&quot;token key atrule&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token key atrule&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; print&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;date&lt;br /&gt;&lt;span class=&quot;token key atrule&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token key atrule&quot;&gt;schedule&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;*/5 * * * *&quot;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token key atrule&quot;&gt;jobTemplate&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token key atrule&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token key atrule&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token key atrule&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br /&gt;          &lt;span class=&quot;token key atrule&quot;&gt;containers&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br /&gt;          &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token key atrule&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; print&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;date&lt;br /&gt;            &lt;span class=&quot;token key atrule&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; node&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;14&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;alpine&lt;br /&gt;            &lt;span class=&quot;token key atrule&quot;&gt;imagePullPolicy&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; IfNotPresent&lt;br /&gt;            &lt;span class=&quot;token key atrule&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br /&gt;            &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;e&lt;br /&gt;            &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;console.log(new Date().toString());&quot;&lt;/span&gt;&lt;br /&gt;          &lt;span class=&quot;token key atrule&quot;&gt;restartPolicy&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; OnFailure&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let’s analyze this simple, not so well configure Cronjob.yaml file in detail:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;We are using the &lt;code&gt;batch/v1beta1&lt;/code&gt; API version of Kubernetes  API&lt;/li&gt;
&lt;li&gt;This is a type of &lt;code&gt;CronJob&lt;/code&gt; Kubernetes resource/workload&lt;/li&gt;
&lt;li&gt;We have named the cron job &lt;code&gt;print-date&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;The Kubernetes cron job is scheduled to execute every 5 minutes -- &lt;code&gt;*/5 * * * *&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;We are using the &lt;code&gt;node:14-alpine&lt;/code&gt; image which will be taken from docker hub by default&lt;/li&gt;
&lt;li&gt;&lt;code&gt;IfNotPresent&lt;/code&gt; image pull policy is the default one. It causes the &lt;a href=&quot;https://kubernetes.io/docs/reference/command-line-tools-reference/kubelet/&quot;&gt;kubelet&lt;/a&gt; to pull an image if it does not already exist.&lt;/li&gt;
&lt;li&gt;Then we pass in &lt;code&gt;-e&lt;/code&gt; for eval&lt;code&gt;and&lt;/code&gt;console.log&lt;code&gt;to print the current date as string. As the command for the node container is&lt;/code&gt;node` this will print the current date and time.&lt;/li&gt;
&lt;li&gt;The container will be restarted on failure as per the above-defined &lt;a href=&quot;https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#restart-policy&quot;&gt;restart policy&lt;/a&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Now, we will schedule this cron job on a local &lt;a href=&quot;https://kind.sigs.k8s.io/&quot;&gt;kind&lt;/a&gt; Kubernetes cluster to try it out. The kind version I am using at the time of writing this blog post is 0.9.0 which has installed Kubernetes version 1.19.1.&lt;/p&gt;
&lt;p&gt;If we save the above file as &lt;code&gt;cronjob.yaml&lt;/code&gt; we can add it to Kubernetes with the following command:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;kubectl apply -f cronjob.yaml&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After the command runs successfully we will see something like:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;cronjob.batch/print-date created&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To check if the cron job is created successfully we can execute the following:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;kubectl get cronjob&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If all is good, it will print out something as follows:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;NAME         SCHEDULE      SUSPEND   ACTIVE   LAST SCHEDULE   AGE&lt;br /&gt;print-date   */5 * * * *                    False          &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;                    &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;none&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;          17s&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After around 5 minutes if we try &lt;code&gt;kubectl get po | grep print-date&lt;/code&gt; we should see that the cron has run once, like below:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;print-date-1613818500-88ln6   &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;/1     Completed   &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;          97s&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To see the logs of the cron job that has run we should execute &lt;code&gt;kubectl logs print-date-1613818500-88ln6&lt;/code&gt; where &lt;code&gt;print-date-1613818500-88ln6&lt;/code&gt; is the pod name will be different in your case. It will show us something as follows:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;Sat Feb &lt;span class=&quot;token number&quot;&gt;20&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2021&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt;:55:03 GMT+0000 &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Coordinated Universal Time&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let’s recap the commands below:&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/kubernetes-cron-job/03kubernetes-cron-job-simple.jpg&quot; title=&quot;Kubernetes cron job a simple example - not optimally configured&quot; alt=&quot;Kubernetes cron job a simple example - not optimally configured&quot; /&gt;
&lt;p&gt;In the next part, we will look at configuring the Kubernetes Cron Job optimally.&lt;/p&gt;
&lt;h3 id=&quot;kubernetes-cron-job-an-optimal-example&quot; tabindex=&quot;-1&quot;&gt;Kubernetes cron job an optimal example &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/02/kubernetes-cron-job/#kubernetes-cron-job-an-optimal-example&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;In the above simple example, let’s scrutinize some things:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;What if there is an error in the command, will Kubernetes try to schedule the cron job pod many times?&lt;/li&gt;
&lt;li&gt;How can we clean up the pods that have completed the job?&lt;/li&gt;
&lt;li&gt;What if our cron job has not finished and it is time to run the next one. We just want to skip the next run as the current job is not finished.&lt;/li&gt;
&lt;li&gt;We want to temporarily stop the cron job for the time being.&lt;/li&gt;
&lt;li&gt;We want to see logs of some older cron job runs even if they have failed or succeeded.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The answers to above questions and more lies in the cron job configuration below:&lt;/p&gt;
&lt;pre class=&quot;language-yaml&quot;&gt;&lt;code class=&quot;language-yaml&quot;&gt;&lt;span class=&quot;token key atrule&quot;&gt;apiVersion&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; batch/v1beta1&lt;br /&gt;&lt;span class=&quot;token key atrule&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; CronJob&lt;br /&gt;&lt;span class=&quot;token key atrule&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token key atrule&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; print&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;date&lt;br /&gt;&lt;span class=&quot;token key atrule&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token key atrule&quot;&gt;schedule&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;*/5 * * * *&quot;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token key atrule&quot;&gt;jobTemplate&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token key atrule&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token key atrule&quot;&gt;backoffLimit&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token key atrule&quot;&gt;ttlSecondsAfterFinished&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;100&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token key atrule&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br /&gt;        &lt;span class=&quot;token key atrule&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br /&gt;          &lt;span class=&quot;token key atrule&quot;&gt;containers&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br /&gt;          &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token key atrule&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; print&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;date&lt;br /&gt;            &lt;span class=&quot;token key atrule&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; node&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;14&lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;alpine&lt;br /&gt;            &lt;span class=&quot;token key atrule&quot;&gt;imagePullPolicy&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; IfNotPresent&lt;br /&gt;            &lt;span class=&quot;token key atrule&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;&lt;br /&gt;            &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt;e&lt;br /&gt;            &lt;span class=&quot;token punctuation&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;console.log(new Date().toString());&quot;&lt;/span&gt;&lt;br /&gt;          &lt;span class=&quot;token key atrule&quot;&gt;restartPolicy&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; OnFailure&lt;br /&gt;      &lt;span class=&quot;token key atrule&quot;&gt;parallelism&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token key atrule&quot;&gt;completions&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token key atrule&quot;&gt;concurrencyPolicy&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;Forbid&quot;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token key atrule&quot;&gt;successfulJobsHistoryLimit&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token key atrule&quot;&gt;failedJobsHistoryLimit&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let’s analyze some of the new configurations we have added and what do they do:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;In this definition &lt;code&gt;backoffLimit&lt;/code&gt; is used to specify the number of retries before marking the job as &lt;a href=&quot;https://kubernetes.io/docs/concepts/workloads/controllers/job/#pod-backoff-failure-policy&quot;&gt;failed&lt;/a&gt;. For example, if the container doesn’t start or the command has an error, we are specifying it should retry 5 times before backing off (marking the job as a failed one).&lt;/li&gt;
&lt;li&gt;To lessen the pressure on Kubernetes, we can specify TTL seconds after finished. Where the TTL controller cleans up the job and deletes the job in a &lt;a href=&quot;https://kubernetes.io/docs/concepts/workloads/controllers/job/#ttl-mechanism-for-finished-jobs&quot;&gt;cascading manner&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;parallelism&lt;/code&gt; and &lt;code&gt;completions&lt;/code&gt; are by default 1, It can be used to have only 1 pod running in &lt;a href=&quot;https://kubernetes.io/docs/concepts/workloads/controllers/job/#controlling-parallelism&quot;&gt;parallel&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Use of &lt;code&gt;concurrencyPolicy&lt;/code&gt; is very handy if you want to skip the next run if the current cron job pod is still active. Setting it to &lt;code&gt;Forbid&lt;/code&gt; can enable this. If your job demands that on the next run the current run should be canceled, it can be set to replace &lt;a href=&quot;https://kubernetes.io/docs/tasks/job/automated-tasks-with-cron-jobs/#concurrency-policy&quot;&gt;Concurrency Policy&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Lastly, we set job history for both success and failure. We do this so that those pods are not cleaned up for a certain limit and we can check the logs if we need to.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Below is a screenshot of reapplying the new definition and checking logs from a run from the new configs we added:&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/kubernetes-cron-job/04kubernetes-cron-job-better.jpg&quot; title=&quot;Kubernetes cron job a better example - optimally configured&quot; alt=&quot;Kubernetes cron job a better example - optimally configured&quot; /&gt;
&lt;p&gt;A new command in the above image is:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;kubectl get &lt;span class=&quot;token function&quot;&gt;jobs&lt;/span&gt; --watch&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It gets jobs and watches it for any changes. As you can see in the screenshot it detected the change when running job &lt;code&gt;print-date-1613820600&lt;/code&gt; every second for 2-3 seconds.&lt;/p&gt;
&lt;h3 id=&quot;run-kubernetes-cron-jobs-on-the-fly&quot; tabindex=&quot;-1&quot;&gt;Run Kubernetes cron jobs on the fly &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/02/kubernetes-cron-job/#run-kubernetes-cron-jobs-on-the-fly&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Protip: You can force run a Kubernetes Cron Job (outside of the schedule) with a command like below:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;kubectl create job print-date-try01 --from&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;cronjob/print-date&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It is ultra convinient for testing cron jobs as we don&#39;t need to wait for the scheduled run.&lt;/p&gt;
&lt;p&gt;We are asking Kubernetes to create a job with the name &lt;code&gt;print-date-try01. The name has to be unique. If you run it the second time use &lt;/code&gt;try02&lt;code&gt;. We are telling Kubernetes to create the job from our cron job which is &lt;/code&gt;cronjob/print-date`.&lt;/p&gt;
&lt;p&gt;We can see an example of the above command as follows:&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/kubernetes-cron-job/05kubernetes-cron-job-create-job.jpg&quot; title=&quot;Kubernetes cron job a demo for create job which is very useful for testing cron jobs&quot; alt=&quot;Kubernetes cron job a demo for create job which is very useful for testing cron jobs&quot; /&gt;
&lt;p&gt;As seen above the cron job even though scheduled for every 5th minute ran at &lt;code&gt;11:35:54&lt;/code&gt; and &lt;code&gt;11:36:35&lt;/code&gt; which is outside of its regular schedule. It was possible because we force ran the cron job on a need basis than waiting for the schedule. This command is very handy when testing Kubernetes cron jobs that are scheduled to run say every hour or every day.&lt;/p&gt;
&lt;h2 id=&quot;conclusion&quot; tabindex=&quot;-1&quot;&gt;Conclusion &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/02/kubernetes-cron-job/#conclusion&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Kubernetes cron jobs are very useful as we have seen. In addition to being great at handling long-running workloads, Kubernetes also does an amazing job of executing jobs and cron jobs alike.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Configure your Kubernetes cron jobs optimally to run the cron jobs as you expect on a Kubernetes cluster.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Even modern applications have tasks that need to be done with Cron jobs and Kubernetes cron jobs can be exploited for such tasks.&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>How to use nodemon to restart your Node.js applications automatically and efficiently</title>
		<link href="https://geshan.com.np/blog/2021/02/nodemon/"/>
		<updated>2021-02-15T10:48:22Z</updated>
		<id>https://geshan.com.np/blog/2021/02/nodemon/</id>
		<content type="html">&lt;p&gt;If you are developing any Node.js application, nodemon is one of the necessary weapons in your arsenal. Learn how to install and effectively use nodemon to automatically restart your Node.js application on every relevant file change. Do you want to restart your Node.js web server and save loads of development time? In this post, we are going to see how you can utilize Nodemon with any Node.js application easily.&lt;/p&gt;
&lt;!-- more --&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/nodemon/01nodemon.jpg&quot; title=&quot;How to use nodemon to reload applicaitons automatically&quot; alt=&quot;How to use nodemon to reload applicaitons automatically&quot; /&gt;
&lt;h2 id=&quot;table-of-contents&quot; tabindex=&quot;-1&quot;&gt;Table of contents &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/02/nodemon/#table-of-contents&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/02/nodemon/#nodemon-a-quick-intro&quot;&gt;Nodemon a quick intro&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/02/nodemon/#how-to-install-nodemon%3F&quot;&gt;How to install nodemon?&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/02/nodemon/#install-nodemon-as-a-global-dependency&quot;&gt;Install nodemon as a global dependency&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/02/nodemon/#install-nodemon-as-a-local-project-dependency&quot;&gt;Install nodemon as a local project dependency&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/02/nodemon/#how-to-use-nodemon%3F&quot;&gt;How to use nodemon?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/02/nodemon/#more-nodemon-configs&quot;&gt;More Nodemon configs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/02/nodemon/#conclusion&quot;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;nodemon-a-quick-intro&quot; tabindex=&quot;-1&quot;&gt;Nodemon a quick intro &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/02/nodemon/#nodemon-a-quick-intro&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Having Nodemon to watch your file changes is like having an eagle watching over its prey.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;On every file save and your Node.js server is automatically restarted for you as easy as that.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Even Nodemon’s slogan says “reload, automatically”. It might come to you as a surprise that Nodemon can be used with other languages like Python, Ruby, or even make as well. &lt;a href=&quot;https://nodemon.io/&quot;&gt;Nodemon&lt;/a&gt; is used as a dependency by more than 1.5 million projects, so it is surely battle-tested. If you are not using Nodemon for development, you are suffering.&lt;/p&gt;
&lt;p&gt;Let’s go ahead and install nodemon.&lt;/p&gt;
&lt;h2 id=&quot;how-to-install-nodemon%3F&quot; tabindex=&quot;-1&quot;&gt;How to install nodemon? &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/02/nodemon/#how-to-install-nodemon%3F&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Before we install nodemon, we will use a sample app to see &lt;code&gt;nodemon&lt;/code&gt; in action. We will use &lt;a href=&quot;https://github.com/geshan/nodejs-mysql&quot;&gt;Node.js MySQL open-source application&lt;/a&gt; that I have used for the &lt;a href=&quot;https://geshan.com.np/blog/2020/11/nodejs-mysql-tutorial/&quot;&gt;Node.js MySQL&lt;/a&gt; tutorial post. This is a simple quotes REST API built with Node.js, Express.js communication with a MySQL database. Next, we will install nodemon in this sample application.&lt;/p&gt;
&lt;p&gt;Like most npm modules, Nodemon can be installed in two ways as follows:&lt;/p&gt;
&lt;h3 id=&quot;install-nodemon-as-a-global-dependency&quot; tabindex=&quot;-1&quot;&gt;Install nodemon as a global dependency &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/02/nodemon/#install-nodemon-as-a-global-dependency&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;To install nodemon as a global NPM dependency we can run the following command:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;npm&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;install&lt;/span&gt; -g nodemon&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This will install nodemon as a global dependency. It will also make the &lt;code&gt;nodemon&lt;/code&gt; command available on any path you run it on. The advantage is that you don’t need to install nodemon on each of your Node.js projects.&lt;/p&gt;
&lt;h3 id=&quot;install-nodemon-as-a-local-project-dependency&quot; tabindex=&quot;-1&quot;&gt;Install nodemon as a local project dependency &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/02/nodemon/#install-nodemon-as-a-local-project-dependency&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;For installing nodemon as a local project NPM dependency,  we can execute the following on the project we want:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;npm&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;install&lt;/span&gt; --save-dev nodemon&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For our sample project, we are going to run the above command. Running it should show us something like below:&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/nodemon/02nodemon-install-local.jpg&quot; title=&quot;How to install nodemon as a local dev dependency&quot; alt=&quot;How to install nodemon as a local dev dependency&quot; /&gt;
&lt;p&gt;As we used &lt;code&gt;--save-dev&lt;/code&gt;, nodemon has been added to the &lt;code&gt;devDependencies&lt;/code&gt; section of the &lt;code&gt;package.json&lt;/code&gt; file. Similarly, relevant changes have been added to the &lt;code&gt;package-lock.json&lt;/code&gt; file too. If you use yarn you can run &lt;code&gt;yarn add nodemon --dev&lt;/code&gt; to add nodemon to your devDependencies.&lt;/p&gt;
&lt;p&gt;When we install nodemon locally, you will not have access to the nodemon command everywhere. If you run nodemon outside of the package.json context you will get the &lt;code&gt;nodemon command not found&lt;/code&gt; problem. To tackle this you can install nodemon globally.&lt;/p&gt;
&lt;p&gt;You can view the changes of adding &lt;code&gt;nodemon&lt;/code&gt; as a dev dependency using NPM in &lt;a href=&quot;https://github.com/geshan/nodejs-mysql/pull/8/files&quot;&gt;this&lt;/a&gt; pull request.&lt;/p&gt;
&lt;h2 id=&quot;how-to-use-nodemon%3F&quot; tabindex=&quot;-1&quot;&gt;How to use nodemon? &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/02/nodemon/#how-to-use-nodemon%3F&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;To use nodemon we will replace the node command with nodemon command when we run our app. Now as we have nodemon installed as a local dependency, to make things easier we will add a new script in package.json to run the application with nodemon. We can add the new script in the package.json file as below:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token string-property property&quot;&gt;&quot;scripts&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;   &lt;span class=&quot;token string-property property&quot;&gt;&quot;start&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;node ./bin/www&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token string-property property&quot;&gt;&quot;start:dev&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;DEBUG=nodejs-mysql:* nodemon ./bin/www&quot;&lt;/span&gt; &lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After that, we can run the app with the command &lt;code&gt;npm run start:dev&lt;/code&gt; and hit &lt;code&gt;http://localhost:3000/quotes&lt;/code&gt; to see the output on the browsers. As we have the app running with nodemon, if we change any file and save it it will rerun the command after nodemon again. For example, I added a &lt;code&gt;,&lt;/code&gt; in a line in &lt;code&gt;src/services/quotes.js&lt;/code&gt; and saved the file which resulted in:&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/nodemon/03nodemon-run.jpg&quot; title=&quot;How to use nodemon as a package.json script&quot; alt=&quot;How to use nodemon as a package.json script&quot; /&gt;
&lt;p&gt;As seen above, the Express.js server restated on each file change as expected.&lt;/p&gt;
&lt;h2 id=&quot;more-nodemon-configs&quot; tabindex=&quot;-1&quot;&gt;More Nodemon configs &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/02/nodemon/#more-nodemon-configs&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;We can add more configs by passing more parameters to the nodemon command or adding a &lt;code&gt;nodemon.json&lt;/code&gt; file. For example, if you want to make nodemon work well with docker you will need to add &lt;code&gt;--legacy-watch&lt;/code&gt; or &lt;code&gt;-L&lt;/code&gt; so that it enables Chokidar polling and nodemon will work with docker. You can have a look at &lt;a href=&quot;https://geshan.com.np/blog/2020/11/nodejs-with-docker/#1.3-add-nodemon-to-monitor-changes-and-reload&quot;&gt;Node.js with Docker&lt;/a&gt; example too.&lt;/p&gt;
&lt;p&gt;You can even delay restarts for nodemon using the &lt;code&gt;--delay&lt;/code&gt; parameter like:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;nodemon delay &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt; index.js&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This will wait for 2 seconds before restarting the server on file changes. If you want to watch say .js and .sql files you can do it with the following command:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;nodemon -e js,sql index.js&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Depending on what we want to do, we can add more configs on a &lt;code&gt;nodemon.json&lt;/code&gt; file. Below is an example of a &lt;code&gt;nodemon.json&lt;/code&gt; file:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token string-property property&quot;&gt;&quot;events&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token string-property property&quot;&gt;&quot;start&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;clear&quot;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token string-property property&quot;&gt;&quot;delay&quot;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;2500&quot;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The above nodemon.json will make sure that on each restart the &lt;code&gt;clear&lt;/code&gt; command is run which will clear any old console output. Similarly, it will also restart the server after 2.5 seconds of a file change. We can add other configs too like file extensions, files to ignore. These configs can be put into the &lt;code&gt;package.json&lt;/code&gt; file too under the &lt;code&gt;nodemonConfig&lt;/code&gt; index in that file. &lt;a href=&quot;https://github.com/remy/nodemon/wiki/Sample-nodemon.json&quot;&gt;Here&lt;/a&gt; is another sample Nodemon.json file from the nodemon repo.&lt;/p&gt;
&lt;p&gt;I would highly recommend you to read the nodemon &lt;a href=&quot;https://github.com/remy/nodemon#nodemon&quot;&gt;docs&lt;/a&gt;. The &lt;a href=&quot;https://github.com/remy/nodemon/blob/master/faq.md&quot;&gt;FAQ&lt;/a&gt; of nodemon is a great place to find answers to any issues you are facing with nodemon. There are answers to issues relating to Docker, windows, and permission to name some of them.&lt;/p&gt;
&lt;p&gt;You can find the nodemon command the sample config file in &lt;a href=&quot;https://github.com/geshan/nodejs-mysql/pull/9/files&quot;&gt;this&lt;/a&gt; pull request.&lt;/p&gt;
&lt;p&gt;If you need more docs or help for nodemon usage, you can run &lt;code&gt;./node_modules/nodemon/bin/nodemon.js -h&lt;/code&gt; if nodemoe is installed locally. If nodemon is installed globally you can simply execute &lt;code&gt;nodemon -h&lt;/code&gt; and see the help.&lt;/p&gt;
&lt;h2 id=&quot;conclusion&quot; tabindex=&quot;-1&quot;&gt;Conclusion &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/02/nodemon/#conclusion&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;We have seen that nodemon is a very useful tool for Node.js development. Be it a web server, a command line interface (CLI) command or any other workload nodemon will make your life a lot easier.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Nodemon is like having someone restart your servers for you on every file change. It is very handy when writing web applications because it makes testing a lot more frictionless.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I hope you have learned how to use Nodemon to automatically restart your Node.js application with this quick tutorial.&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>Javascript memoization: a practical example for better HTTP performance</title>
		<link href="https://geshan.com.np/blog/2021/02/javascript-memoization/"/>
		<updated>2021-02-12T11:30:22Z</updated>
		<id>https://geshan.com.np/blog/2021/02/javascript-memoization/</id>
		<content type="html">&lt;p&gt;Memoization is simply caching the output of a function so that the consequent calls just use the cached result eliminating any heavy computation. Memoization in Javascript can also yield amazing performance benefits, given it is implemented properly. Do you want to make your javascript code run much faster? In this post, we will have a look at a practical example of javascript memoization. Spoiler alert: you will not see a Fibonacci or factorial mentioned in this post.&lt;/p&gt;
&lt;!-- more --&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/javascript-memoization/01javascript-memoization.jpg&quot; title=&quot;Javascript memoization for speed, performance and profit&quot; alt=&quot;Javascript memoization for speed, performance and profit&quot; /&gt;
&lt;h2 id=&quot;table-of-contents&quot; tabindex=&quot;-1&quot;&gt;Table of contents &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/02/javascript-memoization/#table-of-contents&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/02/javascript-memoization/#what-is-memoization&quot;&gt;What is memoization&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/02/javascript-memoization/#not-another-factorial-or-fibonacci-example&quot;&gt;Not another factorial or Fibonacci example&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/02/javascript-memoization/#assumptions&quot;&gt;Assumptions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/02/javascript-memoization/#practical-example%3A-javascript-memoization-for-a-web-response&quot;&gt;Practical example: Javascript memoization for a web response&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/02/javascript-memoization/#response-times-before-javascript-memoization&quot;&gt;Response times before javascript memoization&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/02/javascript-memoization/#response-times-after-javascript-memoization&quot;&gt;Response times after javascript memoization&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/02/javascript-memoization/#other-considerations&quot;&gt;Other considerations&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/02/javascript-memoization/#conclusion&quot;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;what-is-memoization&quot; tabindex=&quot;-1&quot;&gt;What is memoization &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/02/javascript-memoization/#what-is-memoization&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;An oversimplified definition of memoization is when you run an expensive function with parameters a and b, you will cache the result of that function. When the same expensive function is called with the same parameters a and b as the output is known and in the cache, the cached result is sent back.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Memoization&quot;&gt;Wikipedia&lt;/a&gt; defines memoization as:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;In computing, memoization or memoisation is an optimization technique used primarily to speed up computer programs by storing the results of expensive function calls and returning the cached result when the same inputs occur again.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;It further adds: A memoized function &amp;quot;remembers&amp;quot; the results corresponding to some set of specific inputs. Subsequent calls with remembered inputs return the remembered result rather than recalculating it, thus eliminating the primary cost of a call with given parameters from all but the first call made to the function with those parameters.&lt;/p&gt;
&lt;p&gt;Memoization is also useful for &lt;a href=&quot;https://geshan.com.np/blog/2020/12/software-scalability/&quot;&gt;software scalability&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;not-another-factorial-or-fibonacci-example&quot; tabindex=&quot;-1&quot;&gt;Not another factorial or Fibonacci example &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/02/javascript-memoization/#not-another-factorial-or-fibonacci-example&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;To be honest, I am bored with the same Fibonacci and factorial examples to explain memoization. From Wikipedia to 8 out of the 10 results for a google search for “javascript memoization” will use either factorial or Fibonacci as the example. Yes, we used to do it in university to understand recursion may be. But day-to-day real-life coding I have not used something like a factorial or Fibonacci in the past 14 years.&lt;/p&gt;
&lt;p&gt;If you still want to read some of those examples please read &lt;a href=&quot;https://flaviocopes.com/javascript-memoization/&quot;&gt;these&lt;/a&gt; posts. One on &lt;a href=&quot;https://www.freecodecamp.org/news/understanding-memoize-in-javascript-51d07d19430e/&quot;&gt;FreeCodeCamp&lt;/a&gt; even shows how to build your own memoize function. But we are not here to build one, we are here to use one in a more practical sense. We will see how in the next part.&lt;/p&gt;
&lt;h2 id=&quot;assumptions&quot; tabindex=&quot;-1&quot;&gt;Assumptions &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/02/javascript-memoization/#assumptions&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Before we jump into the code, below are some assumption we are making:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;You are generally aware of how promises and async code work in Javascript&lt;/li&gt;
&lt;li&gt;You have an understanding of how REST APIs work&lt;/li&gt;
&lt;li&gt;You know who to write up a basic API with a programming language and a Relational DBMS  as a data store.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Let’s get cracking!&lt;/p&gt;
&lt;h2 id=&quot;practical-example%3A-javascript-memoization-for-a-web-response&quot; tabindex=&quot;-1&quot;&gt;Practical example: Javascript memoization for a web response &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/02/javascript-memoization/#practical-example%3A-javascript-memoization-for-a-web-response&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;We will take an example Quotes API and memoize the response which is a promise using the &lt;a href=&quot;https://github.com/sindresorhus/p-memoize&quot;&gt;p-memoize&lt;/a&gt; library. Of course, there are other options, for instance, lodash.memoize, mem, and fast-memoize are some ultra &lt;a href=&quot;https://www.npmtrends.com/p-memoize-vs-memoizee-vs-memoizejs-vs-fast-memoize-vs-memoize-one-vs-mem-vs-lodash.memoize&quot;&gt;popular&lt;/a&gt; ones.&lt;/p&gt;
&lt;p&gt;On a similar note, the most popular one is mem (at least in my comparison), and P-memoize is the promise/asysc version of &lt;code&gt;mem&lt;/code&gt;. Both mem and p-memoize are developed by the same developer.&lt;/p&gt;
&lt;p&gt;As I have used p-memoize in the past I will stick with that one for this example. Our example currency converter API is &lt;a href=&quot;https://github.com/geshan/nodejs-posgresql&quot;&gt;open source&lt;/a&gt; and deployed on Heroku. Please read more on &lt;a href=&quot;https://geshan.com.np/blog/2021/01/free-nodejs-hosting/&quot;&gt;free Node.js hosting&lt;/a&gt; if you are interested to host your Node.js app for $0 a month.&lt;/p&gt;
&lt;p&gt;I have chosen Heroku because it is free and not serverless, so we will see a clear decrease in the response times after implementing memoization. Next, we will see how javascript memoization speeds up the response times.&lt;/p&gt;
&lt;h3 id=&quot;response-times-before-javascript-memoization&quot; tabindex=&quot;-1&quot;&gt;Response times before javascript memoization &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/02/javascript-memoization/#response-times-before-javascript-memoization&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Before we memorize the function let’s have a look at the code in &lt;code&gt;/routes/quotes.js&lt;/code&gt; &lt;a href=&quot;https://github.com/geshan/nodejs-posgresql/blob/master/routes/quotes.js&quot;&gt;file&lt;/a&gt;:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; express &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;express&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; router &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; express&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Router&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; quotes &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;../services/quotes&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;/* GET quotes listing. */&lt;/span&gt;&lt;br /&gt;router&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;/&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;req&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; res&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; next&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    res&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; quotes&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getMultiple&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;req&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;query&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;page&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;err&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;Error while getting quotes &lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; err&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;message&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    res&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;err&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;statusCode &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;500&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token string-property property&quot;&gt;&#39;message&#39;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; err&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;message&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is a simple Express.js route where we get the rows from &lt;code&gt;quotes.getMultiple&lt;/code&gt;. In this case, it will run a &lt;a href=&quot;https://github.com/geshan/nodejs-posgresql/blob/d51ef7298cba039130fe8bf98486ba32bf19ad7d/services/quotes.js#L7&quot;&gt;database query&lt;/a&gt; on each call. Let’s have a quick look at the response times with this approach. We will run a simple load test with 2 requests per second for 30 seconds using &lt;a href=&quot;https://geshan.com.np/blog/2020/09/vegeta-load-testing-primer-with-examples/&quot;&gt;Vegeta load testing&lt;/a&gt; tool. We can run a command as follow:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;GET https://nodejs-postgresql-try.herokuapp.com/quotes&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; vegeta attack -duration&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;30s -rate&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;50&lt;/span&gt; -output&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;results-veg-no-mem.bin &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;cat&lt;/span&gt; results-veg-no-mem.bin &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; vegeta plot --title&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Quotes API before memozie&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; quotes-api-before-memoize.html&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;When the above Vegeta load test runs for 30 seconds, it will show us an output like below:&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/javascript-memoization/02before-javascript-memoization.jpg&quot; title=&quot;50 RPS for 30 seconds before javascript memoization&quot; alt=&quot;50 RPS for 30 seconds before javascript memoization&quot; /&gt;
&lt;p&gt;As we can see, the fastest response we got was ~205 ms and the slowest one was 1.5 s. I deliberately did 50 requests per second. Those red dots are the 500 errors caused by the database connection issue.&lt;/p&gt;
&lt;p&gt;The response times are pretty good after the first few requests as we use a &lt;a href=&quot;https://github.com/geshan/nodejs-posgresql/blob/master/services/db.js#L13&quot;&gt;pool&lt;/a&gt; of database connections.&lt;/p&gt;
&lt;h3 id=&quot;response-times-after-javascript-memoization&quot; tabindex=&quot;-1&quot;&gt;Response times after javascript memoization &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/02/javascript-memoization/#response-times-after-javascript-memoization&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Next we will use javascript memoization with p-memozie library to memorize the &lt;code&gt;getMultiple&lt;/code&gt; function on the quotes service. The changes in the &lt;code&gt;routes/quotes.js&lt;/code&gt; file after doing &lt;code&gt;npm i p-memoize&lt;/code&gt; are as follows:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; express &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;express&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; router &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; express&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;Router&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; quotes &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;../services/quotes&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; pMemoize &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;p-memoize&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;ONE_MINUTE_IN_MS&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;60000&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; memGetMultiple &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;pMemoize&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;quotes&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;getMultiple&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token literal-property property&quot;&gt;maxAge&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token constant&quot;&gt;ONE_MINUTE_IN_MS&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;/* GET quotes listing. */&lt;/span&gt;&lt;br /&gt;router&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;/&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;req&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; res&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; next&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token keyword&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    res&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;memGetMultiple&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;req&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;query&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;page&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;err&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;    console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;Error while getting quotes &lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; err&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;message&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;    res&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;err&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;statusCode &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;500&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token string-property property&quot;&gt;&#39;message&#39;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; err&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;message&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Let’s analyze the things we changed here:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;We have added the p-memoize library in line 4.&lt;/li&gt;
&lt;li&gt;Next, we set a constant to be 60000 milliseconds equivalent to 1 minute, the cache lifetime of our javascript memoization cache done on the memory.&lt;/li&gt;
&lt;li&gt;Consequently, we are memorizing the &lt;code&gt;quotes.getMultiple&lt;/code&gt; function on line 6 using p-memoize&lt;/li&gt;
&lt;li&gt;Later inside the get route we are using the memoized function not the original one.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;We can refer to the change in this &lt;a href=&quot;https://github.com/geshan/nodejs-posgresql/pull/17&quot;&gt;pull request&lt;/a&gt; too.&lt;br /&gt;
When we run the same load test with 50 requests per second for 30 seconds with this change, it yields the following results:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;GET https://nodejs-postgresql-try.herokuapp.com/quotes&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; vegeta attack -duration&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;30s -rate&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;50&lt;/span&gt; -output&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;results-veg-mem.bin &lt;span class=&quot;token operator&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;cat&lt;/span&gt; results-veg-mem.bin &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; vegeta plot --title&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Quotes API after memozie&quot;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; quotes-api-after-memoize.html&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It results in:&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/javascript-memoization/03after-javascript-memoization.jpg&quot; title=&quot;50 RPS for 30 seconds after javascript memoization&quot; alt=&quot;50 RPS for 30 seconds after javascript memoization&quot; /&gt;
&lt;p&gt;Here compared to the above load test, the fastest response time we got was ~157ms and the slowest one (probably the first one) was 1.05 s. Overall we clearly see a cut of 50-75 milliseconds for each request from the previous test. Another advantage we have is that the database is getting hit just once for 1500 (30*50) requests in the span of just 30 seconds.&lt;/p&gt;
&lt;p&gt;Similarly, the logs for this branch deployment is as follows:&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/javascript-memoization/04logs-after-javascript-memoization.jpg&quot; title=&quot;Server logs after Javascipt Memoization - DB hit only once&quot; alt=&quot;Server logs after Javascipt Memoization - DB hit only once&quot; /&gt;
&lt;p&gt;As seen here, the first request hit the database rendering the log saying &lt;code&gt;Getting quotes from the db&lt;/code&gt; then for the next one minute it would not hit the database. So all remaining 1499 requests in our load test got the memoized (cached) result for getting multiple quotes. The first two requests took ~320 ms and then after it took 0.5 ms to 2.4 ms, all thanks to memoization.&lt;/p&gt;
&lt;p&gt;If we had run the tests locally the results would have been much faster after memoization as it will not need to use the internet. Local tests would also avoid any complexities like the &lt;a href=&quot;https://www.cloudflare.com/en-gb/learning/ssl/what-happens-in-a-tls-handshake/&quot;&gt;SSL handshake&lt;/a&gt;. Anyway, I wanted to show a more practical and real-life example for javascript memoization as I was super bored with the factorial and Fibonacci examples.&lt;/p&gt;
&lt;p&gt;I used p-memoize but you can use any library I would suggest looking at fast-memoize or Memoizee. Fast-memoize also aims to be the “fastest possible memoization library in JavaScript that supports N arguments.”. Give that a spin.&lt;/p&gt;
&lt;h2 id=&quot;other-considerations&quot; tabindex=&quot;-1&quot;&gt;Other considerations &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/02/javascript-memoization/#other-considerations&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Depending on the library you are using, please be mindful of the following things:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;When memoizing might just cache the first parameter giving unexpected results. For example, in P-memoize we need to &lt;a href=&quot;https://github.com/sindresorhus/mem#caching-strategy&quot;&gt;join&lt;/a&gt; the arguments if there are more than 1 arguments.&lt;/li&gt;
&lt;li&gt;Not all languages support it, for instance, there would be no straightforward native way to memoize the return value of a function as all &lt;a href=&quot;https://geshan.com.np/blog/2020/11/nodejs-for-php-developers/#node.js-process-is-long-running%2C-unlike-php&quot;&gt;PHP processes spin up and die&lt;/a&gt; per request. The same logic will apply for serverless functions.&lt;/li&gt;
&lt;li&gt;It is pretty clear that only functions that return something can be memoized.&lt;a href=&quot;https://www.cs.fsu.edu/~cop3014p/lectures/ch7/index.html&quot;&gt;Void functions&lt;/a&gt; cannot be memoized.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;In this example, we could also utilize the &lt;code&gt;Cache-Control&lt;/code&gt; response &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control&quot;&gt;header&lt;/a&gt;  to cache the response on the browser. That would be the HTTP level caching option if you want to explore.&lt;/p&gt;
&lt;h2 id=&quot;conclusion&quot; tabindex=&quot;-1&quot;&gt;Conclusion &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/02/javascript-memoization/#conclusion&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Understand memoization a bit differently and use it more for practical purposes.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Break the notion that you can use javascript memoization for just things like Factorial and Fibonacci and use it for any resource-heavy thing that can be cached like a GET request.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I hope you learned a bit more things about memoization and specifically memoization in javascript, keep learning!&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>5 Node.js Logging libraries compared for you to make the optimal choice</title>
		<link href="https://geshan.com.np/blog/2021/01/nodejs-logging-library/"/>
		<updated>2021-01-27T11:30:22Z</updated>
		<id>https://geshan.com.np/blog/2021/01/nodejs-logging-library/</id>
		<content type="html">&lt;p&gt;The optimally correct logging Node.js logging library can give you unprecedented insights into how your application is working. Having proper logging is equivalent to having a powerful telescope in a space with all your applications. Do you want to be able to see how your application behaves under load in production? In this post, we are going to analyze 5 popular Node.js logging libraries that can easily do the job for you.&lt;/p&gt;
&lt;!-- more --&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/nodejs-logging-libraries/01nodejs-logging-library.jpg&quot; title=&quot;5 node.js logging libraries compared&quot; alt=&quot;5 node.js logging libraries compared&quot; /&gt;
&lt;h2 id=&quot;table-of-contents&quot; tabindex=&quot;-1&quot;&gt;Table of contents &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/01/nodejs-logging-library/#table-of-contents&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/01/nodejs-logging-library/#assumptions&quot;&gt;Assumptions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/01/nodejs-logging-library/#nodejs-logging-libraries-to-evaluate&quot;&gt;Node.js logging libraries to evaluate&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/01/nodejs-logging-library/#winston&quot;&gt;Winston&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/01/nodejs-logging-library/#bunyan-for-node.js-logging&quot;&gt;Bunyan for Node.js logging&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/01/nodejs-logging-library/#pino&quot;&gt;Pino&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/01/nodejs-logging-library/#loglevel&quot;&gt;Loglevel&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/01/nodejs-logging-library/#npmlog&quot;&gt;Npmlog&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/01/nodejs-logging-library/#quick-comparison-of-node.js-logging-libraries&quot;&gt;Quick comparison of Node.js logging libraries&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/01/nodejs-logging-library/#conclusion&quot;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;assumptions&quot; tabindex=&quot;-1&quot;&gt;Assumptions &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/01/nodejs-logging-library/#assumptions&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;You are familiar with how Node.js works and can run node locally&lt;/li&gt;
&lt;li&gt;You can install npm libraries and have basic knowledge of package.json and npm CLI&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;We will use Express.js as an example app to see code examples writing log to the console for all of the Node.js logging libraries in this post.&lt;/p&gt;
&lt;h2 id=&quot;node.js-logging-libraries-to-evaluate&quot; tabindex=&quot;-1&quot;&gt;Node.js logging libraries to evaluate &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/01/nodejs-logging-library/#node.js-logging-libraries-to-evaluate&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;For this post, we will evaluate 5 of the popular Node.js logging libraries available on NPM. All of them are downloaded more than a million times each week, so they are pretty darn popular. Let’s get started!&lt;/p&gt;
&lt;h3 id=&quot;winston&quot; tabindex=&quot;-1&quot;&gt;Winston &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/01/nodejs-logging-library/#winston&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://www.npmjs.com/package/winston&quot;&gt;Winston&lt;/a&gt; is a popular logging library. It is designed to be simple and enables universal logging with support for multiple &lt;code&gt;transports&lt;/code&gt;. Winston defines itself as “A logger for just about everything”.&lt;/p&gt;
&lt;p&gt;With Winston, we can route your logs to other services like &lt;a href=&quot;https://www.npmjs.com/package/winston-cloudwatch&quot;&gt;AWS cloud watch&lt;/a&gt;, &lt;a href=&quot;https://www.npmjs.com/package/@eximius/winston-graylog2&quot;&gt;graylog2&lt;/a&gt;, &lt;a href=&quot;https://www.npmjs.com/package/winston-logzio&quot;&gt;logz.io&lt;/a&gt;, or even &lt;a href=&quot;https://www.npmjs.com/package/winston-logsene&quot;&gt;Sematext Logsene&lt;/a&gt;. We can even add the express middleware to make &lt;a href=&quot;https://www.npmjs.com/package/express-winston&quot;&gt;logging with Express&lt;/a&gt; better with Winston.&lt;/p&gt;
&lt;p&gt;Below is a code example of Winston with Express using &lt;a href=&quot;https://github.com/bithavoc/express-winston&quot;&gt;express-winston middleware&lt;/a&gt;:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; winston &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;winston&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; expressWinston &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;express-winston&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; express &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;express&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; app &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;express&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; port &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3001&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;//more options here - https://github.com/bithavoc/express-winston#request-logging&lt;/span&gt;&lt;br /&gt;app&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;use&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;expressWinston&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;logger&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token literal-property property&quot;&gt;transports&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;br /&gt;    &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;winston&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;transports&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Console&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token literal-property property&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; winston&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;format&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;combine&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;br /&gt;    winston&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;format&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;colorize&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;    winston&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;format&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token literal-property property&quot;&gt;meta&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token literal-property property&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;HTTP  &quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token literal-property property&quot;&gt;expressFormat&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token literal-property property&quot;&gt;colorize&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token function-variable function&quot;&gt;ignoreRoute&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;req&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; res&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;app&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;/&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;req&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; res&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  res&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Hello World! - Winston logged&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;app&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;/api/test&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;req&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; res&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  res&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token string-property property&quot;&gt;&#39;message&#39;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Hello winston!&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;app&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;listen&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;port&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;Example app listening at http://localhost:&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;port&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It will give an output as follows when we run the server with &lt;code&gt;node winston.js&lt;/code&gt; and hit &lt;code&gt;http://localhost:3001/test/api&lt;/code&gt; on the browser:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;Example app listening at http://localhost:3001&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;meta&quot;&lt;/span&gt;:&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;,&lt;span class=&quot;token string&quot;&gt;&quot;level&quot;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;&lt;span class=&quot;token entity&quot; title=&quot;\u001b&quot;&gt;\u001b&lt;/span&gt;[32minfo&lt;span class=&quot;token entity&quot; title=&quot;\u001b&quot;&gt;\u001b&lt;/span&gt;[39m&quot;&lt;/span&gt;,&lt;span class=&quot;token string&quot;&gt;&quot;message&quot;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;GET /api/test 304 2ms&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;meta&quot;&lt;/span&gt;:&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;,&lt;span class=&quot;token string&quot;&gt;&quot;level&quot;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;&lt;span class=&quot;token entity&quot; title=&quot;\u001b&quot;&gt;\u001b&lt;/span&gt;[32minfo&lt;span class=&quot;token entity&quot; title=&quot;\u001b&quot;&gt;\u001b&lt;/span&gt;[39m&quot;&lt;/span&gt;,&lt;span class=&quot;token string&quot;&gt;&quot;message&quot;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;GET /favicon.ico 404 2ms&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;meta&quot;&lt;/span&gt;:&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;,&lt;span class=&quot;token string&quot;&gt;&quot;level&quot;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;&lt;span class=&quot;token entity&quot; title=&quot;\u001b&quot;&gt;\u001b&lt;/span&gt;[32minfo&lt;span class=&quot;token entity&quot; title=&quot;\u001b&quot;&gt;\u001b&lt;/span&gt;[39m&quot;&lt;/span&gt;,&lt;span class=&quot;token string&quot;&gt;&quot;message&quot;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;GET /favicon.ico 404 1ms&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The above code is also available as a &lt;a href=&quot;https://github.com/geshan/nodejs-logging/pull/2/files&quot;&gt;pull request&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&quot;bunyan-for-node.js-logging&quot; tabindex=&quot;-1&quot;&gt;Bunyan for Node.js logging &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/01/nodejs-logging-library/#bunyan-for-node.js-logging&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://www.npmjs.com/package/bunyan&quot;&gt;Bunyan&lt;/a&gt; is another famous Node.js logging library. Bunyan is used by &lt;a href=&quot;https://www.joyent.com/node-js/production/modules&quot;&gt;Joyent&lt;/a&gt; in production. It defines itself as a simple and fast JSON logging library for Node.js services.&lt;/p&gt;
&lt;p&gt;Bunyan advocates that logs should be in JSON format. Its features include a CLI for pretty-printing, serializers, and support for &lt;a href=&quot;https://github.com/trentm/node-bunyan#runtime-environments&quot;&gt;multiple runtimes&lt;/a&gt; in addition to Node.js like Webpack and Browserify.&lt;/p&gt;
&lt;p&gt;Below is a code example of Bunyan with Express using &lt;a href=&quot;https://github.com/villadora/express-bunyan-logger&quot;&gt;Express Bunyan logger&lt;/a&gt;:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; express &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;express&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; app &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;express&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; port &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3002&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;//more options here - https://github.com/villadora/express-bunyan-logger#usage&lt;/span&gt;&lt;br /&gt;app&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;use&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;express-bunyan-logger&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token literal-property property&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;logger&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token literal-property property&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;:remote-address - :user-agent[major] custom logger&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;  &lt;span class=&quot;token literal-property property&quot;&gt;streams&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token literal-property property&quot;&gt;level&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;info&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;br /&gt;      &lt;span class=&quot;token literal-property property&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; process&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;stdout&lt;br /&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;app&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;/&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;req&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; res&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  res&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Hello World! - Bunyan logged&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;app&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;/api/test&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;req&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; res&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  res&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token string-property property&quot;&gt;&#39;message&#39;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Hello bunyan!&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;app&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;listen&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;port&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;Example app listening at http://localhost:&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;port&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It will show an output similar as follows when we execute the code with &lt;code&gt;node bunyan.js&lt;/code&gt; and hit &lt;code&gt;http://localhost:3002/test/api&lt;/code&gt; on the browser:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;Example app listening at http://localhost:3002&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;logger&quot;&lt;/span&gt;,&lt;span class=&quot;token string&quot;&gt;&quot;hostname&quot;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;abcd&quot;&lt;/span&gt;,&lt;span class=&quot;token string&quot;&gt;&quot;pid&quot;&lt;/span&gt;:32691,&lt;span class=&quot;token string&quot;&gt;&quot;req_id&quot;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;0b2d2977-376e-4742-86b0-57feec630188&quot;&lt;/span&gt;,&lt;span class=&quot;token string&quot;&gt;&quot;level&quot;&lt;/span&gt;:30,&lt;span class=&quot;token string&quot;&gt;&quot;remote-address&quot;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;::1&quot;&lt;/span&gt;,&lt;span class=&quot;token string&quot;&gt;&quot;ip&quot;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;::1&quot;&lt;/span&gt;,&lt;span class=&quot;token string&quot;&gt;&quot;method&quot;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;GET&quot;&lt;/span&gt;,&lt;span class=&quot;token string&quot;&gt;&quot;url&quot;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;/api/test&quot;&lt;/span&gt;,&lt;span class=&quot;token string&quot;&gt;&quot;referer&quot;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;-&quot;&lt;/span&gt;,&lt;span class=&quot;token string&quot;&gt;&quot;user-agent&quot;&lt;/span&gt;:&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;family&quot;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Chrome&quot;&lt;/span&gt;,&lt;span class=&quot;token string&quot;&gt;&quot;major&quot;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;87&quot;&lt;/span&gt;,&lt;span class=&quot;token string&quot;&gt;&quot;minor&quot;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;0&quot;&lt;/span&gt;,&lt;span class=&quot;token string&quot;&gt;&quot;patch&quot;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;4280&quot;&lt;/span&gt;,&lt;span class=&quot;token string&quot;&gt;&quot;device&quot;&lt;/span&gt;:&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;family&quot;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Other&quot;&lt;/span&gt;,&lt;span class=&quot;token string&quot;&gt;&quot;major&quot;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;0&quot;&lt;/span&gt;,&lt;span class=&quot;token string&quot;&gt;&quot;minor&quot;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;0&quot;&lt;/span&gt;,&lt;span class=&quot;token string&quot;&gt;&quot;patch&quot;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;0&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;,&lt;span class=&quot;token string&quot;&gt;&quot;os&quot;&lt;/span&gt;:&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;family&quot;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Mac OS X&quot;&lt;/span&gt;,&lt;span class=&quot;token string&quot;&gt;&quot;major&quot;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;10&quot;&lt;/span&gt;,&lt;span class=&quot;token string&quot;&gt;&quot;minor&quot;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;14&quot;&lt;/span&gt;,&lt;span class=&quot;token string&quot;&gt;&quot;patch&quot;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;6&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;,&lt;span class=&quot;token string&quot;&gt;&quot;http-version&quot;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;1.1&quot;&lt;/span&gt;,&lt;span class=&quot;token string&quot;&gt;&quot;response-time&quot;&lt;/span&gt;:14.628108,&lt;span class=&quot;token string&quot;&gt;&quot;response-hrtime&quot;&lt;/span&gt;:&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0,14628108&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;,&lt;span class=&quot;token string&quot;&gt;&quot;status-code&quot;&lt;/span&gt;:304,&lt;span class=&quot;token string&quot;&gt;&quot;req-headers&quot;&lt;/span&gt;:&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;host&quot;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;localhost:3002&quot;&lt;/span&gt;,&lt;span class=&quot;token string&quot;&gt;&quot;connection&quot;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;keep-alive&quot;&lt;/span&gt;,&lt;span class=&quot;token string&quot;&gt;&quot;sec-ch-ua&quot;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;&lt;span class=&quot;token entity&quot; title=&quot;\&amp;quot;&quot;&gt;\&quot;&lt;/span&gt;Google Chrome&lt;span class=&quot;token entity&quot; title=&quot;\&amp;quot;&quot;&gt;\&quot;&lt;/span&gt;;v=&lt;span class=&quot;token entity&quot; title=&quot;\&amp;quot;&quot;&gt;\&quot;&lt;/span&gt;87&lt;span class=&quot;token entity&quot; title=&quot;\&amp;quot;&quot;&gt;\&quot;&lt;/span&gt;, &lt;span class=&quot;token entity&quot; title=&quot;\&amp;quot;&quot;&gt;\&quot;&lt;/span&gt; Not;A Brand&lt;span class=&quot;token entity&quot; title=&quot;\&amp;quot;&quot;&gt;\&quot;&lt;/span&gt;;v=&lt;span class=&quot;token entity&quot; title=&quot;\&amp;quot;&quot;&gt;\&quot;&lt;/span&gt;99&lt;span class=&quot;token entity&quot; title=&quot;\&amp;quot;&quot;&gt;\&quot;&lt;/span&gt;, &lt;span class=&quot;token entity&quot; title=&quot;\&amp;quot;&quot;&gt;\&quot;&lt;/span&gt;Chromium&lt;span class=&quot;token entity&quot; title=&quot;\&amp;quot;&quot;&gt;\&quot;&lt;/span&gt;;v=&lt;span class=&quot;token entity&quot; title=&quot;\&amp;quot;&quot;&gt;\&quot;&lt;/span&gt;87&lt;span class=&quot;token entity&quot; title=&quot;\&amp;quot;&quot;&gt;\&quot;&lt;/span&gt;&quot;&lt;/span&gt;,&lt;span class=&quot;token string&quot;&gt;&quot;sec-ch-ua-mobile&quot;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;?0&quot;&lt;/span&gt;,&lt;span class=&quot;token string&quot;&gt;&quot;upgrade-insecure-requests&quot;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;1&quot;&lt;/span&gt;,&lt;span class=&quot;token string&quot;&gt;&quot;user-agent&quot;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.141 Safari/537.36&quot;&lt;/span&gt;,&lt;span class=&quot;token string&quot;&gt;&quot;accept&quot;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9&quot;&lt;/span&gt;,&lt;span class=&quot;token string&quot;&gt;&quot;sec-fetch-site&quot;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;none&quot;&lt;/span&gt;,&lt;span class=&quot;token string&quot;&gt;&quot;sec-fetch-mode&quot;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;navigate&quot;&lt;/span&gt;,&lt;span class=&quot;token string&quot;&gt;&quot;sec-fetch-user&quot;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;?1&quot;&lt;/span&gt;,&lt;span class=&quot;token string&quot;&gt;&quot;sec-fetch-dest&quot;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;document&quot;&lt;/span&gt;,&lt;span class=&quot;token string&quot;&gt;&quot;accept-encoding&quot;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;gzip, deflate, br&quot;&lt;/span&gt;,&lt;span class=&quot;token string&quot;&gt;&quot;accept-language&quot;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;en-GB,en-US;q=0.9,en;q=0.8&quot;&lt;/span&gt;,&lt;span class=&quot;token string&quot;&gt;&quot;cookie&quot;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;a=b&quot;&lt;/span&gt;,&lt;span class=&quot;token string&quot;&gt;&quot;if-none-match&quot;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;W/&lt;span class=&quot;token entity&quot; title=&quot;\&amp;quot;&quot;&gt;\&quot;&lt;/span&gt;1b-1NBfctHuicMF7VuqeDKGexvbveA&lt;span class=&quot;token entity&quot; title=&quot;\&amp;quot;&quot;&gt;\&quot;&lt;/span&gt;&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;,&lt;span class=&quot;token string&quot;&gt;&quot;res-headers&quot;&lt;/span&gt;:&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;x-powered-by&quot;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Express&quot;&lt;/span&gt;,&lt;span class=&quot;token string&quot;&gt;&quot;etag&quot;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;W/&lt;span class=&quot;token entity&quot; title=&quot;\&amp;quot;&quot;&gt;\&quot;&lt;/span&gt;1b-1NBfctHuicMF7VuqeDKGexvbveA&lt;span class=&quot;token entity&quot; title=&quot;\&amp;quot;&quot;&gt;\&quot;&lt;/span&gt;&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;,&lt;span class=&quot;token string&quot;&gt;&quot;req&quot;&lt;/span&gt;:&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;method&quot;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;GET&quot;&lt;/span&gt;,&lt;span class=&quot;token string&quot;&gt;&quot;url&quot;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;/api/test&quot;&lt;/span&gt;,&lt;span class=&quot;token string&quot;&gt;&quot;headers&quot;&lt;/span&gt;:&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;host&quot;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;localhost:3002&quot;&lt;/span&gt;,&lt;span class=&quot;token string&quot;&gt;&quot;connection&quot;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;keep-alive&quot;&lt;/span&gt;,&lt;span class=&quot;token string&quot;&gt;&quot;sec-ch-ua&quot;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;&lt;span class=&quot;token entity&quot; title=&quot;\&amp;quot;&quot;&gt;\&quot;&lt;/span&gt;Google Chrome&lt;span class=&quot;token entity&quot; title=&quot;\&amp;quot;&quot;&gt;\&quot;&lt;/span&gt;;v=&lt;span class=&quot;token entity&quot; title=&quot;\&amp;quot;&quot;&gt;\&quot;&lt;/span&gt;87&lt;span class=&quot;token entity&quot; title=&quot;\&amp;quot;&quot;&gt;\&quot;&lt;/span&gt;, &lt;span class=&quot;token entity&quot; title=&quot;\&amp;quot;&quot;&gt;\&quot;&lt;/span&gt; Not;A Brand&lt;span class=&quot;token entity&quot; title=&quot;\&amp;quot;&quot;&gt;\&quot;&lt;/span&gt;;v=&lt;span class=&quot;token entity&quot; title=&quot;\&amp;quot;&quot;&gt;\&quot;&lt;/span&gt;99&lt;span class=&quot;token entity&quot; title=&quot;\&amp;quot;&quot;&gt;\&quot;&lt;/span&gt;, &lt;span class=&quot;token entity&quot; title=&quot;\&amp;quot;&quot;&gt;\&quot;&lt;/span&gt;Chromium&lt;span class=&quot;token entity&quot; title=&quot;\&amp;quot;&quot;&gt;\&quot;&lt;/span&gt;;v=&lt;span class=&quot;token entity&quot; title=&quot;\&amp;quot;&quot;&gt;\&quot;&lt;/span&gt;87&lt;span class=&quot;token entity&quot; title=&quot;\&amp;quot;&quot;&gt;\&quot;&lt;/span&gt;&quot;&lt;/span&gt;,&lt;span class=&quot;token string&quot;&gt;&quot;sec-ch-ua-mobile&quot;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;?0&quot;&lt;/span&gt;,&lt;span class=&quot;token string&quot;&gt;&quot;upgrade-insecure-requests&quot;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;1&quot;&lt;/span&gt;,&lt;span class=&quot;token string&quot;&gt;&quot;user-agent&quot;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.141 Safari/537.36&quot;&lt;/span&gt;,&lt;span class=&quot;token string&quot;&gt;&quot;accept&quot;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9&quot;&lt;/span&gt;,&lt;span class=&quot;token string&quot;&gt;&quot;sec-fetch-site&quot;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;none&quot;&lt;/span&gt;,&lt;span class=&quot;token string&quot;&gt;&quot;sec-fetch-mode&quot;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;navigate&quot;&lt;/span&gt;,&lt;span class=&quot;token string&quot;&gt;&quot;sec-fetch-user&quot;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;?1&quot;&lt;/span&gt;,&lt;span class=&quot;token string&quot;&gt;&quot;sec-fetch-dest&quot;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;document&quot;&lt;/span&gt;,&lt;span class=&quot;token string&quot;&gt;&quot;accept-encoding&quot;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;gzip, deflate, br&quot;&lt;/span&gt;,&lt;span class=&quot;token string&quot;&gt;&quot;accept-language&quot;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;en-GB,en-US;q=0.9,en;q=0.8&quot;&lt;/span&gt;,&lt;span class=&quot;token string&quot;&gt;&quot;cookie&quot;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;a=b&quot;&lt;/span&gt;,&lt;span class=&quot;token string&quot;&gt;&quot;if-none-match&quot;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;W/&lt;span class=&quot;token entity&quot; title=&quot;\&amp;quot;&quot;&gt;\&quot;&lt;/span&gt;1b-1NBfctHuicMF7VuqeDKGexvbveA&lt;span class=&quot;token entity&quot; title=&quot;\&amp;quot;&quot;&gt;\&quot;&lt;/span&gt;&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;,&lt;span class=&quot;token string&quot;&gt;&quot;remoteAddress&quot;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;::1&quot;&lt;/span&gt;,&lt;span class=&quot;token string&quot;&gt;&quot;remotePort&quot;&lt;/span&gt;:63793&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;,&lt;span class=&quot;token string&quot;&gt;&quot;res&quot;&lt;/span&gt;:&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;statusCode&quot;&lt;/span&gt;:304,&lt;span class=&quot;token string&quot;&gt;&quot;header&quot;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;HTTP/1.1 304 Not Modified&lt;span class=&quot;token entity&quot; title=&quot;\r&quot;&gt;\r&lt;/span&gt;&lt;span class=&quot;token entity&quot; title=&quot;\n&quot;&gt;\n&lt;/span&gt;X-Powered-By: Express&lt;span class=&quot;token entity&quot; title=&quot;\r&quot;&gt;\r&lt;/span&gt;&lt;span class=&quot;token entity&quot; title=&quot;\n&quot;&gt;\n&lt;/span&gt;ETag: W/&lt;span class=&quot;token entity&quot; title=&quot;\&amp;quot;&quot;&gt;\&quot;&lt;/span&gt;1b-1NBfctHuicMF7VuqeDKGexvbveA&lt;span class=&quot;token entity&quot; title=&quot;\&amp;quot;&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;token entity&quot; title=&quot;\r&quot;&gt;\r&lt;/span&gt;&lt;span class=&quot;token entity&quot; title=&quot;\n&quot;&gt;\n&lt;/span&gt;Date: Tue, 26 Jan 2021 21:11:12 GMT&lt;span class=&quot;token entity&quot; title=&quot;\r&quot;&gt;\r&lt;/span&gt;&lt;span class=&quot;token entity&quot; title=&quot;\n&quot;&gt;\n&lt;/span&gt;Connection: keep-alive&lt;span class=&quot;token entity&quot; title=&quot;\r&quot;&gt;\r&lt;/span&gt;&lt;span class=&quot;token entity&quot; title=&quot;\n&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;token entity&quot; title=&quot;\r&quot;&gt;\r&lt;/span&gt;&lt;span class=&quot;token entity&quot; title=&quot;\n&quot;&gt;\n&lt;/span&gt;&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;,&lt;span class=&quot;token string&quot;&gt;&quot;incoming&quot;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;&amp;lt;--&quot;&lt;/span&gt;,&lt;span class=&quot;token string&quot;&gt;&quot;msg&quot;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;::1 - 87 custom logger&quot;&lt;/span&gt;,&lt;span class=&quot;token string&quot;&gt;&quot;time&quot;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;2021-01-26T21:11:12.817Z&quot;&lt;/span&gt;,&lt;span class=&quot;token string&quot;&gt;&quot;v&quot;&lt;/span&gt;:0&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Bunyan&#39;s logs are very verbose by default.&lt;/p&gt;
&lt;p&gt;The above code is also available as a &lt;a href=&quot;https://github.com/geshan/nodejs-logging/pull/3/files&quot;&gt;pull request&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&quot;pino&quot; tabindex=&quot;-1&quot;&gt;Pino &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/01/nodejs-logging-library/#pino&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://www.npmjs.com/package/pino&quot;&gt;Pino&lt;/a&gt; is a relatively popular Node.js logging library that marks itself as a “very low overhead Node.js logger”. It attributes &lt;a href=&quot;https://github.com/pinojs/pino/blob/HEAD/docs/asynchronous.md&quot;&gt;asynchronous logging&lt;/a&gt; to its fast performance. Pino claims to be over 5x faster than alternatives in many cases in its &lt;a href=&quot;https://github.com/pinojs/pino/blob/master/docs/benchmarks.md&quot;&gt;benchmarks&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Other features include &lt;a href=&quot;https://github.com/pinojs/pino/blob/master/docs/child-loggers.md&quot;&gt;child loggers&lt;/a&gt; and &lt;a href=&quot;https://github.com/pinojs/pino/blob/master/docs/web.md&quot;&gt;support for multiple web frameworks&lt;/a&gt;. It has multiple core and community modules which helps to form a thriving &lt;a href=&quot;https://github.com/pinojs/pino/blob/master/docs/ecosystem.md&quot;&gt;ecosystem&lt;/a&gt;. With Pino, you can send the logs to many services by using proper transports like &lt;a href=&quot;https://github.com/pinojs/pino/blob/master/docs/transports.md#pino-mysql&quot;&gt;MySQL&lt;/a&gt;, &lt;a href=&quot;https://github.com/pinojs/pino/blob/master/docs/transports.md#pino-datadog&quot;&gt;Datadog&lt;/a&gt;, &lt;a href=&quot;https://github.com/pinojs/pino/blob/master/docs/transports.md#pino-cloudwatch&quot;&gt;AWS cloud watch&lt;/a&gt;, or &lt;a href=&quot;https://github.com/pinojs/pino/blob/master/docs/transports.md#pino-logflare&quot;&gt;log flare&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Below is an example of Pino with Express using &lt;a href=&quot;https://github.com/pinojs/express-pino-logger&quot;&gt;Express Pino logger&lt;/a&gt;:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; express &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;express&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; app &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;express&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; pino &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;express-pino-logger&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; port &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3003&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;//more options here - https://github.com/pinojs/express-pino-logger#example&lt;/span&gt;&lt;br /&gt;app&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;use&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;pino&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;app&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;/&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;req&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; res&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  res&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Hello World! - Pino logged&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;app&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;/api/test&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;req&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; res&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  req&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;log&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Yo from pino&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  res&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token string-property property&quot;&gt;&#39;message&#39;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Hello Pino!&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;app&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;listen&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;port&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;Example app listening at http://localhost:&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;port&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It will send out output as follows when we run the server with &lt;code&gt;node pino.js&lt;/code&gt; and hit &lt;code&gt;http://localhost:3003/test/api&lt;/code&gt; on the browser:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;Example app listening at http://localhost:3003&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;level&quot;&lt;/span&gt;:30,&lt;span class=&quot;token string&quot;&gt;&quot;time&quot;&lt;/span&gt;:1611695678813,&lt;span class=&quot;token string&quot;&gt;&quot;pid&quot;&lt;/span&gt;:32768,&lt;span class=&quot;token string&quot;&gt;&quot;hostname&quot;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;abcd&quot;&lt;/span&gt;,&lt;span class=&quot;token string&quot;&gt;&quot;req&quot;&lt;/span&gt;:&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;id&quot;&lt;/span&gt;:1,&lt;span class=&quot;token string&quot;&gt;&quot;method&quot;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;GET&quot;&lt;/span&gt;,&lt;span class=&quot;token string&quot;&gt;&quot;url&quot;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;/api/test&quot;&lt;/span&gt;,&lt;span class=&quot;token string&quot;&gt;&quot;headers&quot;&lt;/span&gt;:&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;host&quot;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;localhost:3003&quot;&lt;/span&gt;,&lt;span class=&quot;token string&quot;&gt;&quot;connection&quot;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;keep-alive&quot;&lt;/span&gt;,&lt;span class=&quot;token string&quot;&gt;&quot;sec-ch-ua&quot;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;&lt;span class=&quot;token entity&quot; title=&quot;\&amp;quot;&quot;&gt;\&quot;&lt;/span&gt;Google Chrome&lt;span class=&quot;token entity&quot; title=&quot;\&amp;quot;&quot;&gt;\&quot;&lt;/span&gt;;v=&lt;span class=&quot;token entity&quot; title=&quot;\&amp;quot;&quot;&gt;\&quot;&lt;/span&gt;87&lt;span class=&quot;token entity&quot; title=&quot;\&amp;quot;&quot;&gt;\&quot;&lt;/span&gt;, &lt;span class=&quot;token entity&quot; title=&quot;\&amp;quot;&quot;&gt;\&quot;&lt;/span&gt; Not;A Brand&lt;span class=&quot;token entity&quot; title=&quot;\&amp;quot;&quot;&gt;\&quot;&lt;/span&gt;;v=&lt;span class=&quot;token entity&quot; title=&quot;\&amp;quot;&quot;&gt;\&quot;&lt;/span&gt;99&lt;span class=&quot;token entity&quot; title=&quot;\&amp;quot;&quot;&gt;\&quot;&lt;/span&gt;, &lt;span class=&quot;token entity&quot; title=&quot;\&amp;quot;&quot;&gt;\&quot;&lt;/span&gt;Chromium&lt;span class=&quot;token entity&quot; title=&quot;\&amp;quot;&quot;&gt;\&quot;&lt;/span&gt;;v=&lt;span class=&quot;token entity&quot; title=&quot;\&amp;quot;&quot;&gt;\&quot;&lt;/span&gt;87&lt;span class=&quot;token entity&quot; title=&quot;\&amp;quot;&quot;&gt;\&quot;&lt;/span&gt;&quot;&lt;/span&gt;,&lt;span class=&quot;token string&quot;&gt;&quot;sec-ch-ua-mobile&quot;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;?0&quot;&lt;/span&gt;,&lt;span class=&quot;token string&quot;&gt;&quot;upgrade-insecure-requests&quot;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;1&quot;&lt;/span&gt;,&lt;span class=&quot;token string&quot;&gt;&quot;user-agent&quot;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.141 Safari/537.36&quot;&lt;/span&gt;,&lt;span class=&quot;token string&quot;&gt;&quot;accept&quot;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9&quot;&lt;/span&gt;,&lt;span class=&quot;token string&quot;&gt;&quot;sec-fetch-site&quot;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;none&quot;&lt;/span&gt;,&lt;span class=&quot;token string&quot;&gt;&quot;sec-fetch-mode&quot;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;navigate&quot;&lt;/span&gt;,&lt;span class=&quot;token string&quot;&gt;&quot;sec-fetch-user&quot;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;?1&quot;&lt;/span&gt;,&lt;span class=&quot;token string&quot;&gt;&quot;sec-fetch-dest&quot;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;document&quot;&lt;/span&gt;,&lt;span class=&quot;token string&quot;&gt;&quot;accept-encoding&quot;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;gzip, deflate, br&quot;&lt;/span&gt;,&lt;span class=&quot;token string&quot;&gt;&quot;accept-language&quot;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;en-GB,en-US;q=0.9,en;q=0.8&quot;&lt;/span&gt;,&lt;span class=&quot;token string&quot;&gt;&quot;cookie&quot;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;_ga=GA1.1.1863215728.1591927460; PPA_ID=gkq1qhp7htr141pkojpmqcqt95; webfx-tree-cookie-persistence=wfxt-4; io=TxK-RQvnHb14VONKAAAC&quot;&lt;/span&gt;,&lt;span class=&quot;token string&quot;&gt;&quot;if-none-match&quot;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;W/&lt;span class=&quot;token entity&quot; title=&quot;\&amp;quot;&quot;&gt;\&quot;&lt;/span&gt;19-JzA5ewGlTSyvFTwS4fIYMkAu78Q&lt;span class=&quot;token entity&quot; title=&quot;\&amp;quot;&quot;&gt;\&quot;&lt;/span&gt;&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;,&lt;span class=&quot;token string&quot;&gt;&quot;remoteAddress&quot;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;::1&quot;&lt;/span&gt;,&lt;span class=&quot;token string&quot;&gt;&quot;remotePort&quot;&lt;/span&gt;:63824&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;,&lt;span class=&quot;token string&quot;&gt;&quot;msg&quot;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Yo from pino&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;level&quot;&lt;/span&gt;:30,&lt;span class=&quot;token string&quot;&gt;&quot;time&quot;&lt;/span&gt;:1611695678817,&lt;span class=&quot;token string&quot;&gt;&quot;pid&quot;&lt;/span&gt;:32768,&lt;span class=&quot;token string&quot;&gt;&quot;hostname&quot;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;abcd&quot;&lt;/span&gt;,&lt;span class=&quot;token string&quot;&gt;&quot;req&quot;&lt;/span&gt;:&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;id&quot;&lt;/span&gt;:1,&lt;span class=&quot;token string&quot;&gt;&quot;method&quot;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;GET&quot;&lt;/span&gt;,&lt;span class=&quot;token string&quot;&gt;&quot;url&quot;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;/api/test&quot;&lt;/span&gt;,&lt;span class=&quot;token string&quot;&gt;&quot;headers&quot;&lt;/span&gt;:&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;host&quot;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;localhost:3003&quot;&lt;/span&gt;,&lt;span class=&quot;token string&quot;&gt;&quot;connection&quot;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;keep-alive&quot;&lt;/span&gt;,&lt;span class=&quot;token string&quot;&gt;&quot;sec-ch-ua&quot;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;&lt;span class=&quot;token entity&quot; title=&quot;\&amp;quot;&quot;&gt;\&quot;&lt;/span&gt;Google Chrome&lt;span class=&quot;token entity&quot; title=&quot;\&amp;quot;&quot;&gt;\&quot;&lt;/span&gt;;v=&lt;span class=&quot;token entity&quot; title=&quot;\&amp;quot;&quot;&gt;\&quot;&lt;/span&gt;87&lt;span class=&quot;token entity&quot; title=&quot;\&amp;quot;&quot;&gt;\&quot;&lt;/span&gt;, &lt;span class=&quot;token entity&quot; title=&quot;\&amp;quot;&quot;&gt;\&quot;&lt;/span&gt; Not;A Brand&lt;span class=&quot;token entity&quot; title=&quot;\&amp;quot;&quot;&gt;\&quot;&lt;/span&gt;;v=&lt;span class=&quot;token entity&quot; title=&quot;\&amp;quot;&quot;&gt;\&quot;&lt;/span&gt;99&lt;span class=&quot;token entity&quot; title=&quot;\&amp;quot;&quot;&gt;\&quot;&lt;/span&gt;, &lt;span class=&quot;token entity&quot; title=&quot;\&amp;quot;&quot;&gt;\&quot;&lt;/span&gt;Chromium&lt;span class=&quot;token entity&quot; title=&quot;\&amp;quot;&quot;&gt;\&quot;&lt;/span&gt;;v=&lt;span class=&quot;token entity&quot; title=&quot;\&amp;quot;&quot;&gt;\&quot;&lt;/span&gt;87&lt;span class=&quot;token entity&quot; title=&quot;\&amp;quot;&quot;&gt;\&quot;&lt;/span&gt;&quot;&lt;/span&gt;,&lt;span class=&quot;token string&quot;&gt;&quot;sec-ch-ua-mobile&quot;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;?0&quot;&lt;/span&gt;,&lt;span class=&quot;token string&quot;&gt;&quot;upgrade-insecure-requests&quot;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;1&quot;&lt;/span&gt;,&lt;span class=&quot;token string&quot;&gt;&quot;user-agent&quot;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.141 Safari/537.36&quot;&lt;/span&gt;,&lt;span class=&quot;token string&quot;&gt;&quot;accept&quot;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9&quot;&lt;/span&gt;,&lt;span class=&quot;token string&quot;&gt;&quot;sec-fetch-site&quot;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;none&quot;&lt;/span&gt;,&lt;span class=&quot;token string&quot;&gt;&quot;sec-fetch-mode&quot;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;navigate&quot;&lt;/span&gt;,&lt;span class=&quot;token string&quot;&gt;&quot;sec-fetch-user&quot;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;?1&quot;&lt;/span&gt;,&lt;span class=&quot;token string&quot;&gt;&quot;sec-fetch-dest&quot;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;document&quot;&lt;/span&gt;,&lt;span class=&quot;token string&quot;&gt;&quot;accept-encoding&quot;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;gzip, deflate, br&quot;&lt;/span&gt;,&lt;span class=&quot;token string&quot;&gt;&quot;accept-language&quot;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;en-GB,en-US;q=0.9,en;q=0.8&quot;&lt;/span&gt;,&lt;span class=&quot;token string&quot;&gt;&quot;cookie&quot;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;a=b&quot;&lt;/span&gt;,&lt;span class=&quot;token string&quot;&gt;&quot;if-none-match&quot;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;W/&lt;span class=&quot;token entity&quot; title=&quot;\&amp;quot;&quot;&gt;\&quot;&lt;/span&gt;19-JzA5ewGlTSyvFTwS4fIYMkAu78Q&lt;span class=&quot;token entity&quot; title=&quot;\&amp;quot;&quot;&gt;\&quot;&lt;/span&gt;&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;,&lt;span class=&quot;token string&quot;&gt;&quot;remoteAddress&quot;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;::1&quot;&lt;/span&gt;,&lt;span class=&quot;token string&quot;&gt;&quot;remotePort&quot;&lt;/span&gt;:63824&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;,&lt;span class=&quot;token string&quot;&gt;&quot;res&quot;&lt;/span&gt;:&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;statusCode&quot;&lt;/span&gt;:304,&lt;span class=&quot;token string&quot;&gt;&quot;headers&quot;&lt;/span&gt;:&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;x-powered-by&quot;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Express&quot;&lt;/span&gt;,&lt;span class=&quot;token string&quot;&gt;&quot;etag&quot;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;W/&lt;span class=&quot;token entity&quot; title=&quot;\&amp;quot;&quot;&gt;\&quot;&lt;/span&gt;19-JzA5ewGlTSyvFTwS4fIYMkAu78Q&lt;span class=&quot;token entity&quot; title=&quot;\&amp;quot;&quot;&gt;\&quot;&lt;/span&gt;&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;,&lt;span class=&quot;token string&quot;&gt;&quot;responseTime&quot;&lt;/span&gt;:4,&lt;span class=&quot;token string&quot;&gt;&quot;msg&quot;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;request completed&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Similar to Bunyan, Pino&#39;s default logs are also verbose. We can use &lt;a href=&quot;https://github.com/pinojs/pino-pretty&quot;&gt;pino-pretty&lt;/a&gt; CLI to make the logs prettier.&lt;/p&gt;
&lt;p&gt;The code example can be accessed as a &lt;a href=&quot;https://github.com/geshan/nodejs-logging/pull/4/files&quot;&gt;pull request&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&quot;loglevel&quot; tabindex=&quot;-1&quot;&gt;Loglevel &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/01/nodejs-logging-library/#loglevel&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://www.npmjs.com/package/loglevel&quot;&gt;Loglevel&lt;/a&gt; is a very popular logging library that can be used in both Node.js and the browser. LogLevel defines itself as “Minimal lightweight simple logging for JavaScript.” It also claims to replace console.log eliminating console.log’s downsides.&lt;/p&gt;
&lt;p&gt;Loglevel seems to be easy to use and very convenient too. Its readme adds “This is a barebones reliable everyday logging library.” which does not do fancy things but does have core functionality you will actually use.&lt;/p&gt;
&lt;p&gt;Below is a very simple example of Loglevel with Express server and no middleware:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; express &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;express&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; app &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;express&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; logger &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;loglevel&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; port &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3004&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;//more docs here - https://github.com/pimterry/loglevel#documentation&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;app&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;/&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;req&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; res&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  res&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Hello World! - loglevel logged&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;app&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;/api/test&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;req&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; res&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  logger&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;warn&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Loglevel is simple&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  res&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token string-property property&quot;&gt;&#39;message&#39;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Hello loglevel!&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;app&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;listen&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;port&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;Example app listening at http://localhost:&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;port&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It will show output as follows when we run the execute the above code with &lt;code&gt;node loglevel.js&lt;/code&gt; and hit &lt;code&gt;http://localhost:3004/test/api&lt;/code&gt; on the browser:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;Example app listening at http://localhost:3004&lt;br /&gt;Loglevel is simple&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Loglevel output is very simple compared to the other libraries. Also, we did not use any express specific middleware to log using Loglevel.&lt;/p&gt;
&lt;p&gt;We can access the above example as a &lt;a href=&quot;https://github.com/geshan/nodejs-logging/pull/5/files&quot;&gt;pull request&lt;/a&gt; too.&lt;/p&gt;
&lt;h3 id=&quot;npmlog&quot; tabindex=&quot;-1&quot;&gt;Npmlog &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/01/nodejs-logging-library/#npmlog&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://www.npmjs.com/package/npmlog&quot;&gt;Npmlog&lt;/a&gt; is yet another very popular logging library that NPM uses. As per NpmLog’s readme “This logger is very basic. It does the logging for npm. It supports custom levels and colored output.”&lt;/p&gt;
&lt;p&gt;There is nothing fancy about this Node.js logging library and the last version was published 4 years ago. Yet, it is the most popular logging library listed in this post. The only library with over 10 million downloads per week as of Jan-2021.&lt;/p&gt;
&lt;p&gt;Below is a quick example of npmlog in action with Express js and no middleware:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; express &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;express&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; app &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;express&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; logger &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;npmlog&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; port &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3005&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;&lt;span class=&quot;token comment&quot;&gt;//more docs here - https://github.com/npm/npmlog#basic-usage&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;app&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;/&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;req&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; res&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  res&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;Hello World! - npmlog logged&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;app&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;/api/test&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token parameter&quot;&gt;req&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; res&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  logger&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;warn&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;From Npmlog&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Npmlog is simple too %j&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token string-property property&quot;&gt;&#39;message&#39;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;test&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;  res&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token string-property property&quot;&gt;&#39;message&#39;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;Hello npmlog!&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;app&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;listen&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;port&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;br /&gt;  console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token template-string&quot;&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;Example app listening at http://localhost:&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;${&lt;/span&gt;port&lt;span class=&quot;token interpolation-punctuation punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token template-punctuation string&quot;&gt;`&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;br /&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;It will show an output like below when we start the Express js server with &lt;code&gt;node npmlog.js&lt;/code&gt; and hit &lt;code&gt;http://localhost:3005/test/api&lt;/code&gt; on the browser:&lt;/p&gt;
&lt;pre class=&quot;language-bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;Example app listening at http://localhost:3005&lt;br /&gt;WARN From Npmlog Npmlog is simple too &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;message&quot;&lt;/span&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;test&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Similar to Loglevel, for npmlog the output was simple and we did not use any Express js middleware too.&lt;/p&gt;
&lt;p&gt;The above code is available as a &lt;a href=&quot;https://github.com/geshan/nodejs-logging/pull/6/files&quot;&gt;pull request&lt;/a&gt; too.&lt;/p&gt;
&lt;h2 id=&quot;quick-comparison-of-node.js-logging-libraries&quot; tabindex=&quot;-1&quot;&gt;Quick comparison of Node.js logging libraries &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/01/nodejs-logging-library/#quick-comparison-of-node.js-logging-libraries&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Below is a quick comparison of the Node.js logging libraries we have discussed till now, all data is collected on the last week of Jan-2021:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:center&quot;&gt;Feature/Service&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;Downloads/week&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;Github Stars&lt;/th&gt;
&lt;th&gt;Github Forks&lt;/th&gt;
&lt;th&gt;First Release&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;a href=&quot;https://www.npmjs.com/package/winston&quot;&gt;Winston&lt;/a&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;5.05 million&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;a href=&quot;https://github.com/winstonjs/winston&quot;&gt;16.7K&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;1.5K&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;https://github.com/winstonjs/winston/tags?after=0.1.3&quot;&gt;0.1.0&lt;/a&gt; on 19-Jan-2011&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;a href=&quot;https://www.npmjs.com/package/bunyan&quot;&gt;Bunyan&lt;/a&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;1.23 million&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;a href=&quot;https://github.com/trentm/node-bunyan&quot;&gt;6.5K&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;513&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;https://github.com/trentm/node-bunyan/tags?after=0.5.0&quot;&gt;0.1.0&lt;/a&gt; on 3-Feb-2012&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;a href=&quot;https://www.npmjs.com/package/pino&quot;&gt;Pino&lt;/a&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;1.28 millon&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;a href=&quot;https://github.com/pinojs/pino&quot;&gt;6.6K&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;439&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;https://github.com/pinojs/pino/tags?after=v0.4.2&quot;&gt;0.2.0&lt;/a&gt; on 6-Mar-2016&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;a href=&quot;https://www.npmjs.com/package/loglevel&quot;&gt;LogLevel&lt;/a&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;9.12 million&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;a href=&quot;https://github.com/pimterry/loglevel&quot;&gt;1.9K&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;154&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;https://github.com/pimterry/loglevel/tags?after=1.0.0&quot;&gt;0.1.0&lt;/a&gt; on 2-Apr-2013&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;a href=&quot;https://www.npmjs.com/package/npmlog&quot;&gt;npmlog&lt;/a&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;10.71 million&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;a href=&quot;https://github.com/npm/npmlog&quot;&gt;346&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;53&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;https://github.com/npm/npmlog/tags?after=v1.0.0&quot;&gt;0.1.0&lt;/a&gt; on 6-Jun-2012&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;If we look at the download trends, &lt;a href=&quot;https://www.npmtrends.com/winston-vs-bunyan-vs-pino-vs-loglevel-vs-npmlog&quot;&gt;NPM trends&lt;/a&gt; paints a picture like below:&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/nodejs-logging-libraries/02nodejs-logging-libraries-downloads.jpg&quot; title=&quot;5 node.js logging libraries downloads trend in past 1 year&quot; alt=&quot;5 node.js logging libraries downloads trend in past 1 year&quot; /&gt;
&lt;p&gt;Even though npmlog has only 346 stars and 53 forks, it is reportedly downloaded more than 10 million times each week. In terms of GitHub stars, Winston has 3 times as many stars compared to the second one Bunyan with 513 stars. Winston is also the oldest library created on 30-Dec-2010 with the first release on 19-Jan-2011.&lt;/p&gt;
&lt;p&gt;As per &lt;a href=&quot;https://npmcompare.com/compare/bunyan,loglevel,npmlog,pino,winston&quot;&gt;npmcompare&lt;/a&gt;, Npmlog has the most points with 25.5 million points and Buyan has the least points with 2.9 million points.&lt;/p&gt;
&lt;h2 id=&quot;conclusion&quot; tabindex=&quot;-1&quot;&gt;Conclusion &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/01/nodejs-logging-library/#conclusion&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;For an optimal logging and monitoring experience in Node.js, rather than going after the numbers, it might be best to choose the library that suits your needs.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Use the library that fits your purpose the best and utilize its addons or features that make the most sense to your use case.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;It would also be great if you follow some &lt;a href=&quot;https://geshan.com.np/blog/2019/03/follow-these-logging-best-practices-to-get-the-most-out-of-application-level-logging-slides/&quot;&gt;logging best practices&lt;/a&gt; to reap the most benefits as they are &lt;a href=&quot;https://geshan.com.np/blog/2019/11/laracon-au-2019-overall-a-good-experience/#slides&quot;&gt;software engineers’ best friend&lt;/a&gt;. I have been preaching about the &lt;a href=&quot;https://geshan.com.np/blog/2015/08/importance-of-logging-in-your-applications/&quot;&gt;importance of logging&lt;/a&gt; for a long time now. Happy logging!&lt;/p&gt;
</content>
	</entry>
	
	<entry>
		<title>3 free Node.js hosting services you should be using today (with step-by-step deployment examples)</title>
		<link href="https://geshan.com.np/blog/2021/01/free-nodejs-hosting/"/>
		<updated>2021-01-14T11:30:22Z</updated>
		<id>https://geshan.com.np/blog/2021/01/free-nodejs-hosting/</id>
		<content type="html">&lt;p&gt;Hosting Node.js applications is easy, finding a completely free Node.js hosting service that is reliable is not. In this post, we will discuss 3 hosting services where you can host your Node.js applications or API for free which you should start using now. We will also deploy a demo app step-by-step on each of these 3 platforms. I wished to have found more than 3 but finding even 3 was not very easy.&lt;/p&gt;
&lt;!-- more --&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/free-nodejs-hosting/01free-nodejs-hosting.jpg&quot; title=&quot;3 free node.js hosting services you should try now&quot; alt=&quot;3 free node.js hosting services you should try now&quot; /&gt;
&lt;h2 id=&quot;table-of-contents&quot; tabindex=&quot;-1&quot;&gt;Table of contents &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/01/free-nodejs-hosting/#table-of-contents&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/01/free-nodejs-hosting/#free-node.js-hosting-options&quot;&gt;Free Node.js Hosting options&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/01/free-nodejs-hosting/#prerequisites&quot;&gt;Prerequisites&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/01/free-nodejs-hosting/#free-node.js-hosting-services&quot;&gt;Free Node.js hosting services&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/01/free-nodejs-hosting/#issues-with-these-services&quot;&gt;Issues with these services&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/01/free-nodejs-hosting/#free-node.js-hosting-platforms-to-deploy-your-app&quot;&gt;Free Node.js hosting platforms to deploy your app&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/01/free-nodejs-hosting/#heroku&quot;&gt;Heroku&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/01/free-nodejs-hosting/#deploy-node.js-quotes-api-to-heroku&quot;&gt;Deploy Node.js Quotes API to Heroku&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/01/free-nodejs-hosting/#vercel&quot;&gt;Vercel&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/01/free-nodejs-hosting/#deploy-node.js-quotes-api-on-vercel&quot;&gt;Deploy Node.js Quotes API on Vercel&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/01/free-nodejs-hosting/#zeet&quot;&gt;Zeet&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/01/free-nodejs-hosting/#deploy-node.js-quotes-api-to-zeet&quot;&gt;Deploy Node.js Quotes API to Zeet&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/01/free-nodejs-hosting/#quick-comparison-of-free-node.js-hosting-services&quot;&gt;Quick comparison of Free Node.js hosting services&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/01/free-nodejs-hosting/#other-options-for-free-node.js-hosting&quot;&gt;Other options for free Node.js hosting&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://geshan.com.np/blog/2021/01/free-nodejs-hosting/#conclusion&quot;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;free-node.js-hosting-options&quot; tabindex=&quot;-1&quot;&gt;Free Node.js Hosting options &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/01/free-nodejs-hosting/#free-node.js-hosting-options&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;This post is about services where you can host your Node.js application completely free, yes for $0 a month. Of course, when you don’t pay anything you will need to make some trade-offs. Still, this is not a list with just a couple of free options and a bulk of paid alternatives like the other posts I have seen and read.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;I have tried all of the 3 services on my own and they work pretty well for demo and small-sized applications.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Needless to say, we would not use a free service to host a medium-sized or a production-level application. All of these 3 main services DO NOT ask for your credit card even for backup purposes so keep them inside your wallets.&lt;/p&gt;
&lt;p&gt;I will include 3+ other services that ask for credit cards or have pretty inexpensive plans towards the end to make the list a bit more comprehensive.&lt;/p&gt;
&lt;h2 id=&quot;prerequisites&quot; tabindex=&quot;-1&quot;&gt;Prerequisites &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/01/free-nodejs-hosting/#prerequisites&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;All 3 of these services that we are going to look at in the next sections. Before we dive into actually deploying our Node.js applications below are some prerequisites:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;You have a GitHub account and know how to fork repositories&lt;/li&gt;
&lt;li&gt;Your application code is available on GitHub&lt;/li&gt;
&lt;li&gt;You are able to add third-party applications to your GitHub account.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Time to start revealing our free Node.js hosting services:&lt;/p&gt;
&lt;h2 id=&quot;free-node.js-hosting-services&quot; tabindex=&quot;-1&quot;&gt;Free Node.js hosting services &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/01/free-nodejs-hosting/#free-node.js-hosting-services&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The free Node.js hosting services are Heroku (free tier), Vercel (hobby free forever plan), and Zeet. All these services can host your Node.js application for $0 a month a.k.a. absolutely and completely free. You don&#39;t even need to add a credit card for backup or safety reasons. But there are strings attached, as discussed next.&lt;/p&gt;
&lt;h2 id=&quot;issues-with-these-services&quot; tabindex=&quot;-1&quot;&gt;Issues with these services &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/01/free-nodejs-hosting/#issues-with-these-services&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Heroku free dynos sleep if they are inactive for 30 minutes.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;There is a workaround called &lt;a href=&quot;https://kaffeine.herokuapp.com/&quot;&gt;Kaffeine&lt;/a&gt; that calls your Heroku service every 30 minutes.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Or you can use something like &lt;a href=&quot;http://cron-job.org/&quot;&gt;Cron-Job.org&lt;/a&gt; to ping your Heroku service every 20 minutes to keep it awake. Heroku has a maximum of 5 applications available on the free tier.&lt;/p&gt;
&lt;p&gt;Vercel is an amazing service, where you could host both your backend API and frontend application in the same repository. It focuses more on the frontend side of things.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The downside is that Vercel uses serverless functions. It is like a great wrapper on top of AWS Lambda. It only allows personal GitHub repositories for free, not organizational ones.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;With serverless functions, the issues of cold start and losing application state comes into the picture.&lt;/p&gt;
&lt;p&gt;Zeet is another awesome service where neither the app sleeps if you don’t get requests for 30 minutes nor it is serverless.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The con here is you get only 1 app free but it gets 1 shared CPU and 1 GB of shared memory.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Well, that is still better than the above two options if you only have only one &lt;a href=&quot;https://geshan.com.np/blog/2020/09/take-home-coding-challenges-outshine-competition/&quot;&gt;coding challenge&lt;/a&gt; to deploy.&lt;/p&gt;
&lt;h2 id=&quot;free-node.js-hosting-platforms-to-deploy-your-app&quot; tabindex=&quot;-1&quot;&gt;Free Node.js hosting platforms to deploy your app &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/01/free-nodejs-hosting/#free-node.js-hosting-platforms-to-deploy-your-app&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Ok, let’s cut the rant and get to deploying a demo application. For this illustration I will use A &lt;a href=&quot;https://geshan.com.np/blog/2021/01/nodejs-postgresql-tutorial/&quot;&gt;node.js Express API&lt;/a&gt; that talks with a PostgreSQL database on &lt;a href=&quot;https://www.elephantsql.com/&quot;&gt;ElephantSQL&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This is a simple quotes API and you can find the code open-source on &lt;a href=&quot;https://github.com/geshan/nodejs-posgresql&quot;&gt;Github&lt;/a&gt;. Time to see this app hosted for free on Heroku.&lt;/p&gt;
&lt;h3 id=&quot;heroku&quot; tabindex=&quot;-1&quot;&gt;Heroku &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/01/free-nodejs-hosting/#heroku&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://heroku.com/&quot;&gt;Heroku&lt;/a&gt; is a salesforce company and one of the first Platform-as-a-service (PaaS) companies that made it big, really big. It has been around since 2007, and it has evolved and adapted well to the changing technology landscape in the past 15 years. We can host multiple languages as Heroku Dynos and Node.js is definitely one of them.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Heroku even 11 years back in 2010 was more like throw me your app and I will run it for you, this was before Docker and containers were a thing.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Now in 2021, they have a host of services, and luckily the Free plan is still alive on their &lt;a href=&quot;https://www.heroku.com/pricing&quot;&gt;pricing&lt;/a&gt; page. Time to proceed to how you can deploy the demo app on Heroku:&lt;/p&gt;
&lt;h4 id=&quot;deploy-node.js-quotes-api-to-heroku&quot; tabindex=&quot;-1&quot;&gt;Deploy Node.js Quotes API to Heroku &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/01/free-nodejs-hosting/#deploy-node.js-quotes-api-to-heroku&quot;&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;You will need a &lt;a href=&quot;https://signup.heroku.com/&quot;&gt;free account&lt;/a&gt; on Heroku to get started. After you have registered, please follow the steps below to run your Node.js app on Heroku:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Login to your Heroku account&lt;/li&gt;
&lt;li&gt;Go to: &lt;a href=&quot;https://github.com/geshan/nodejs-posgresql&quot;&gt;https://github.com/geshan/nodejs-posgresql&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Click on the “Deploy to Heroku” button&lt;/li&gt;
&lt;li&gt;On the Heroku “Create New App” page give the app a name like &lt;code&gt;nodejs-heroku-try&lt;/code&gt; or something that is available&lt;/li&gt;
&lt;li&gt;Then click “Deploy App”&lt;/li&gt;
&lt;li&gt;Wait for a minute or two and it will build and deploy the app like below:&lt;/li&gt;
&lt;/ul&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/free-nodejs-hosting/02nodejs-heroku.jpg&quot; title=&quot;Deploy a Node.js API on Heroku from its interface&quot; alt=&quot;Deploy a Node.js API on Heroku from its interface&quot; /&gt;
&lt;ul&gt;
&lt;li&gt;After that click the “View” button, you should see something like below:&lt;/li&gt;
&lt;/ul&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/free-nodejs-hosting/03nodejs-app-on-heroku.jpg&quot; title=&quot;Node.js API running on Heroku&quot; alt=&quot;Node.js API running on Heroku&quot; /&gt;
&lt;ul&gt;
&lt;li&gt;Add &lt;code&gt;/quotes&lt;/code&gt; to the URL and you should see the quotes in JSON format as follows:&lt;/li&gt;
&lt;/ul&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/free-nodejs-hosting/04nodejs-quotes-api-on-heroku.jpg&quot; title=&quot;Node.js Quotes API running on Heroku&quot; alt=&quot;Node.js Quotes API running on Heroku&quot; /&gt;
&lt;p&gt;Wasn’t that easy, there you have the quotes API built with Node.js and Express running on the first free Node.js hosting platform: Heroku.&lt;/p&gt;
&lt;p&gt;It did not run magically though, the settings were already present on the repo in the &lt;a href=&quot;https://github.com/geshan/nodejs-posgresql/blob/master/app.json&quot;&gt;app.json&lt;/a&gt; file. This tells Heroku how to deploy the app. For a real-life app, we will need to set the correct environment variable mainly secrets like database credentials properly.&lt;/p&gt;
&lt;p&gt;To make it better you can Fork the repository and connect &lt;a href=&quot;https://devcenter.heroku.com/articles/github-integration&quot;&gt;Github as a deployment method&lt;/a&gt; for Heroku.&lt;/p&gt;
&lt;p&gt;Furthermore, you can set up &lt;a href=&quot;https://devcenter.heroku.com/articles/pipelines&quot;&gt;Pipelines&lt;/a&gt; to create staging and production environments in Heroku. You can also use the &lt;a href=&quot;https://devcenter.heroku.com/articles/heroku-cli&quot;&gt;Heroku CLI&lt;/a&gt; for more control over your apps. I leave further exploration to you. Next, let’s look at how to deploy the same application on Vercel.&lt;/p&gt;
&lt;h3 id=&quot;vercel&quot; tabindex=&quot;-1&quot;&gt;Vercel &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/01/free-nodejs-hosting/#vercel&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://vercel.com/&quot;&gt;Vercel&lt;/a&gt; (previously known as Zeit) is a great place to deploy frontend apps. Being a layer on top of serverless functions it can also run some other languages and &lt;a href=&quot;https://vercel.com/docs/runtimes#official-runtimes/node-js&quot;&gt;Node.js is included&lt;/a&gt; in that list. Amongst other good features, a very handy feature with Vercel is you get a unique URL for each pull request which makes testing that particular branch a breeze. They call this deploy preview.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://vercel.com/pricing&quot;&gt;Vercel Pricing&lt;/a&gt; is pretty straight forward. Personal projects run free and it integrates with GitHub, BitBucket, and GitLab.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Let&#39;s look at how we can deploy our Quotes API Node.js app on Vercel.&lt;/p&gt;
&lt;h4 id=&quot;deploy-node.js-quotes-api-on-vercel&quot; tabindex=&quot;-1&quot;&gt;Deploy Node.js Quotes API on Vercel &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/01/free-nodejs-hosting/#deploy-node.js-quotes-api-on-vercel&quot;&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;After you have &lt;a href=&quot;https://vercel.com/signup&quot;&gt;registered&lt;/a&gt; with Vercel and are logged into Vercel, do the following steps:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Visit &lt;a href=&quot;https://github.com/geshan/nodejs-posgresql&quot;&gt;https://github.com/geshan/nodejs-posgresql&lt;/a&gt; (you don’t even need to fork the repo)&lt;/li&gt;
&lt;li&gt;Click on the blue “Deploy” button&lt;/li&gt;
&lt;li&gt;Give it a name in the Vercel UI like below:&lt;/li&gt;
&lt;/ul&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/free-nodejs-hosting/05nodejs-vercel-linkup.jpg&quot; title=&quot;Link up Node.js App Github Repo with Vercel&quot; alt=&quot;Link up Node.js App Github Repo with Vercel&quot; /&gt;
&lt;ul&gt;
&lt;li&gt;And click &amp;quot;Continue&amp;quot;&lt;/li&gt;
&lt;li&gt;You can create your own repo on Github from the screen below:&lt;/li&gt;
&lt;/ul&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/free-nodejs-hosting/06nodejs-vercel-create-repo.jpg&quot; title=&quot;Create Github Repo within Vercel for Node.js free hosting&quot; alt=&quot;Create Github Repo within Vercel for Node.js free hosting&quot; /&gt;
&lt;ul&gt;
&lt;li&gt;After that, select the root as the project’s source code, then click “Continue”&lt;/li&gt;
&lt;/ul&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/free-nodejs-hosting/07nodejs-vercel-project-root.jpg&quot; title=&quot;Choose root as the project source code in Vercel&quot; alt=&quot;Choose root as the project source code in Vercel&quot; /&gt;
&lt;ul&gt;
&lt;li&gt;Subsequently, click deploy in the next screen:&lt;/li&gt;
&lt;/ul&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/free-nodejs-hosting/08nodejs-vercel-deploy.jpg&quot; title=&quot;Deploy the app on Vercel with Deploy button&quot; alt=&quot;Deploy the app on Vercel with Deploy button&quot; /&gt;
&lt;ul&gt;
&lt;li&gt;It will build and deploy the app and you will see a screen like below:&lt;/li&gt;
&lt;/ul&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/free-nodejs-hosting/09nodejs-vercel-deployed.jpg&quot; title=&quot;The app is deployed on Vercel&quot; alt=&quot;The app is deployed on Vercel&quot; /&gt;
&lt;ul&gt;
&lt;li&gt;Now, click the “Visit” button, you should see something like the following:&lt;/li&gt;
&lt;/ul&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/free-nodejs-hosting/10nodejs-vercel-app-running.jpg&quot; title=&quot;The app is running on Vercel&quot; alt=&quot;The app is running on Vercel&quot; /&gt;
&lt;ul&gt;
&lt;li&gt;Add &lt;code&gt;/quotes&lt;/code&gt; to the URL and you should see the quotes in a JSON format like below:&lt;/li&gt;
&lt;/ul&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/free-nodejs-hosting/11nodejs-vercel-api-running.jpg&quot; title=&quot;The quotes API is running on Vercel&quot; alt=&quot;The quotes API is running on Vercel&quot; /&gt;
&lt;p&gt;This is set up very well now, you should go to the app’s settings page if you want to tweak anything. You can add environment variables and do other things in the settings. You can even look at the function’s logs.&lt;/p&gt;
&lt;p&gt;Each time you open a new pull request in that repository Vercel will give you a deploy preview URL which is very handy. You can see how it looks like below:&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/free-nodejs-hosting/12nodejs-vercel-deploy-preview.jpg&quot; title=&quot;Vercel deploy preview on GitHub pull request&quot; alt=&quot;Vercel deploy preview on GitHub pull request&quot; /&gt;
&lt;p&gt;On merge to master/main branch, it will auto-deploy the code to the main URL. You can use the &lt;a href=&quot;https://vercel.com/docs/cli&quot;&gt;Vercel CLI&lt;/a&gt; for re-deployments, setting up environment variables, and a host of other things.&lt;/p&gt;
&lt;p&gt;Both Heroku and Vercel have powerful CLI to make your life easier for deploying the apps and doing other things like having a look at the app logs from the CLI.&lt;/p&gt;
&lt;p&gt;Next, let&#39;s look at how Zeet compares to Heroku and Vercel.&lt;/p&gt;
&lt;h3 id=&quot;zeet&quot; tabindex=&quot;-1&quot;&gt;Zeet &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/01/free-nodejs-hosting/#zeet&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://zeet.co/&quot;&gt;Zeet&lt;/a&gt; brands itself as the easiest way to deploy. It supports both code from Github or a public docker container. Zeet is not as popular as either Heroku or Vercel but it packs a punch with its simplicity quotient.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;As Zeet doesn’t run serverless functions or sleep in 30 mins it looks like a promising option to host just one app for free.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;As per its &lt;a href=&quot;https://zeet.co/pricing&quot;&gt;pricing&lt;/a&gt; page, we can run one project for free with limited and shared resources. Time to dig more into Zeet:&lt;/p&gt;
&lt;h3 id=&quot;update%3A-mar-2021---zeet-has-started-to-charge&quot; tabindex=&quot;-1&quot;&gt;Update: Mar 2021 - Zeet has started to charge &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/01/free-nodejs-hosting/#update%3A-mar-2021---zeet-has-started-to-charge&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Recently Zeet has deprecated its free plan and started to charge $5 for the single shared VM it used to provide free. I would recommend using &lt;a href=&quot;https://www.qovery.com/pricing&quot;&gt;Qovery&lt;/a&gt; as an alternative to Zeet which has a great free plan.&lt;/p&gt;
&lt;h4 id=&quot;deploy-node.js-quotes-api-to-zeet&quot; tabindex=&quot;-1&quot;&gt;Deploy Node.js Quotes API to Zeet &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/01/free-nodejs-hosting/#deploy-node.js-quotes-api-to-zeet&quot;&gt;#&lt;/a&gt;&lt;/h4&gt;
&lt;p&gt;Given you have &lt;a href=&quot;https://zeet.co/new&quot;&gt;registered&lt;/a&gt; on to Zeet with GitHub and you are logged into Zeet, follow the steps below:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Fork the &lt;code&gt;https://github.com/geshan/nodejs-posgresql&lt;/code&gt; repository to your GitHub account&lt;/li&gt;
&lt;li&gt;Go to Zeet, click the green “+ New Project” button on the top right of Zeet&lt;/li&gt;
&lt;li&gt;Then click “GitHub” and click the green “Continue” button under the “Trial $0” option&lt;/li&gt;
&lt;li&gt;After that, click “Continue” besides the “Nodejs-posgresql” repo that you have just forked and then click “Deploy Now” as seen below:&lt;/li&gt;
&lt;/ul&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/free-nodejs-hosting/13nodejs-zeet-deploy-now.jpg&quot; title=&quot;Deploy Node.js app to Zeet&quot; alt=&quot;Deploy Node.js app to Zeet&quot; /&gt;
&lt;ul&gt;
&lt;li&gt;Subsequently, choose “Node.js 14” on “Build Method” and click “Save” as follows:&lt;/li&gt;
&lt;/ul&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/free-nodejs-hosting/14nodejs-zeet-commands.jpg&quot; title=&quot;Node.js app to deploy on Zeet&quot; alt=&quot;Node.js app to deploy on Zeet&quot; /&gt;
&lt;ul&gt;
&lt;li&gt;Give it some time to build and deploy, after that, you will see something like below:&lt;/li&gt;
&lt;/ul&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/free-nodejs-hosting/15nodejs-zeet-deployed.jpg&quot; title=&quot;Node.js app deployed on Zeet&quot; alt=&quot;Node.js app deployed on Zeet&quot; /&gt;
&lt;ul&gt;
&lt;li&gt;If you click the green &amp;quot;Visit&amp;quot; button, it will not work now. There is one small config left. Click on “Settings” then click on the “Networking” link on the left then set the &amp;quot;Port&amp;quot; to be &lt;code&gt;3000&lt;/code&gt; as seen below, after that click “Save” on the bottom right as seen below:&lt;/li&gt;
&lt;/ul&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/free-nodejs-hosting/16nodejs-zeet-port.jpg&quot; title=&quot;Configure right port for the Node.js app on Zeet&quot; alt=&quot;Configure right port for the Node.js app on Zeet&quot; /&gt;
&lt;ul&gt;
&lt;li&gt;This should redeploy the App, if you go back to the “Deployments” tap it should be deploying/deployed.&lt;/li&gt;
&lt;li&gt;Consequently, click the “Visit” button again you should see something like below:&lt;/li&gt;
&lt;/ul&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/free-nodejs-hosting/17nodejs-zeet-app-running.jpg&quot; title=&quot;Node.js app running on Zeet&quot; alt=&quot;Node.js app running on Zeet&quot; /&gt;
&lt;ul&gt;
&lt;li&gt;Next, add &lt;code&gt;/quotes&lt;/code&gt; to the URL and you should see something similar to the following:&lt;/li&gt;
&lt;/ul&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/free-nodejs-hosting/18nodejs-zeet-api-running.jpg&quot; title=&quot;Node.js Quotes API running on Zeet&quot; alt=&quot;Node.js Quotes API running on Zeet&quot; /&gt;
&lt;p&gt;Like Vercel, Zeet also provides a deploy preview URL on each pull request. I have a feeling they wanted to compete Zeit with Zeet :), if you know what I mean. Below is a preview of how the deploy perview URL looks like as a comment in your pull reqeust:&lt;/p&gt;
&lt;img class=&quot;center&quot; loading=&quot;lazy&quot; src=&quot;https://geshan.com.np/images/free-nodejs-hosting/19nodejs-zeet-deploy-preview.jpg&quot; title=&quot;Node.js App deploy preview on Zeet&quot; alt=&quot;Node.js App deploy preview on Zeet&quot; /&gt;
&lt;p&gt;Anyway if you want to deploy your own app you will need to delete this demo app and add your own app. Zeet only allows 1 free app. They have more demos in their &lt;a href=&quot;https://github.com/zeet-demo&quot;&gt;GitHub account&lt;/a&gt;. Zeet does not have a CLI app which is good I suppose as it wants to keep things simple and clean.&lt;/p&gt;
&lt;p&gt;There you have it, the same Node.js API deployed on all 3 free Node.js hosting services without even needing to reach your wallet for your credit card.&lt;/p&gt;
&lt;h2 id=&quot;quick-comparison-of-free-node.js-hosting-services&quot; tabindex=&quot;-1&quot;&gt;Quick comparison of Free Node.js hosting services &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/01/free-nodejs-hosting/#quick-comparison-of-free-node.js-hosting-services&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Below is a quick comparison table for Heroku, Vercel, and Zeet.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:center&quot;&gt;Feature/Service&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;CPU&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;Memory&lt;/th&gt;
&lt;th&gt;Sleeps on no activity?&lt;/th&gt;
&lt;th&gt;Is FAAS/Serverless?&lt;/th&gt;
&lt;th&gt;No. of apps?&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Heroku&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;1x&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;512 MB&lt;/td&gt;
&lt;td&gt;After 30 mins&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Vercel&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;N/A&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;1 GB&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;td&gt;Yes&lt;/td&gt;
&lt;td&gt;Unlimited&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Zeet&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;1 Shared&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;1 GB Shared&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;td&gt;No&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;After that contrast, let’s look at some other options that are free but still ask for your credit card as a backup option that they can charge if you use more resources.&lt;/p&gt;
&lt;h2 id=&quot;other-options-for-free-node.js-hosting&quot; tabindex=&quot;-1&quot;&gt;Other options for free Node.js hosting &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/01/free-nodejs-hosting/#other-options-for-free-node.js-hosting&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Some other services where you can host your Node.js application free/almost free but you need to put your credit card are as follows:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;http://fly.io/&quot;&gt;Fly.io&lt;/a&gt; - Pretty good, it is like CDN for the backend. The &lt;a href=&quot;https://fly.io/docs/about/pricing/&quot;&gt;free plan&lt;/a&gt; has 3 shared-CPU-1x VMs with 256 MB of RAM. Asks for a credit-card on registration.&lt;/li&gt;
&lt;li&gt;Google Cloud Run - You can host your Node.js app on &lt;a href=&quot;https://cloud.google.com/run&quot;&gt;Google Cloud Run&lt;/a&gt; as &lt;a href=&quot;https://geshan.com.np/blog/2019/11/why-use-google-cloud-run-5-compelling-reasons/&quot;&gt;serverless containers&lt;/a&gt;. You can get up to &lt;a href=&quot;https://cloud.google.com/run/pricing&quot;&gt;2 million requests&lt;/a&gt; per month free. But it will involve setting up Google Cloud Registry and other tools. Part of Google Cloud Platform which asks for a credit card on registration.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://openode.io/&quot;&gt;Openode.io&lt;/a&gt; - If you have an open-source project you can ask them for a &lt;a href=&quot;https://www.openode.io/pricing&quot;&gt;free plan&lt;/a&gt;. The cheapest plan with 50MB of memory is just $0.75 a month.&lt;/li&gt;
&lt;li&gt;Glitch - &lt;a href=&quot;https://glitch.com/pricing&quot;&gt;Glitch&lt;/a&gt; can host one of your Node.js Apps for free. It is better used to code collaboratively than host a Node.js app or API.&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;You can host your Node.js App on all 3 of the big cloud providers AWS, Azure, and GCP and/or their function as a service (FAAS) serverless options or even on free-forever VM. But, they will ask for your credit-card.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;You can even explore other cloud providers like IBM Cloud or Alibaba to host your Node.js app for $0 a month. I will leave the digging deeper part for you.&lt;/p&gt;
&lt;p&gt;If you are looking for windows hosting, this &lt;a href=&quot;https://www.accuwebhosting.com/vps-hosting/windows&quot;&gt;Windows VPS Hosting Comparison&lt;/a&gt; is great.&lt;/p&gt;
&lt;h2 id=&quot;conclusion&quot; tabindex=&quot;-1&quot;&gt;Conclusion &lt;a class=&quot;direct-link&quot; href=&quot;https://geshan.com.np/blog/2021/01/free-nodejs-hosting/#conclusion&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Hosting a small test project with Node.js should not be a hassle.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;You should be able to do it easily with any of the above 3 services that give it absolutely free.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;You can also use the other services that give it for free but ask you to put down your credit card number. The choice is yours!&lt;/p&gt;
</content>
	</entry>
</feed>
